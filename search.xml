<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 3]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme2/</url>
      <content type="html"><![CDATA[<h2 id="Part-3-Wrapping-up-with-Disqus-comments-Google-Analytics-and-the-widgets"><a href="#Part-3-Wrapping-up-with-Disqus-comments-Google-Analytics-and-the-widgets" class="headerlink" title="Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets"></a>Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</h2><hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 2]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme1/</url>
      <content type="html"><![CDATA[<h2 id="Part-2-Finishing-up-the-remaining-pages"><a href="#Part-2-Finishing-up-the-remaining-pages" class="headerlink" title="Part 2: Finishing up the remaining pages"></a>Part 2: Finishing up the remaining pages</h2><hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 1]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme0/</url>
      <content type="html"><![CDATA[<h2 id="Part-1-Setting-up-the-project-and-creating-the-blog’s-main-index-page"><a href="#Part-1-Setting-up-the-project-and-creating-the-blog’s-main-index-page" class="headerlink" title="Part 1: Setting up the project and creating the blog’s main index page"></a>Part 1: Setting up the project and creating the blog’s main index page</h2><hr>
<p>In this multi part tutorial, you will learn how to create an Hexo Theme from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is pretty slim. Here is my attempt at fixing that.</p>
<a id="more"></a>
<h3 id="LINKS-TO-OTHER-SECTIONS"><a href="#LINKS-TO-OTHER-SECTIONS" class="headerlink" title="LINKS TO OTHER SECTIONS"></a>LINKS TO OTHER SECTIONS</h3><hr>
<ul>
<li>Part 1: Setting up the project and creating the blog’s main index pages</li>
<li>Part 2: Finishing up the remaining pages</li>
<li>Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</li>
</ul>
<h3 id="PREREQUISITES"><a href="#PREREQUISITES" class="headerlink" title="PREREQUISITES"></a>PREREQUISITES</h3><hr>
<ul>
<li>The very basics of blogging with hexo. If you are completely new, check the getting started guide on hexo.io.</li>
<li>Some knowledge of Bootstrap</li>
<li>Some knowledge of a JavaScript templating engine (we will use EJS)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小巷]]></title>
      <url>http://yoursite.com/2016/09/07/poetry0/</url>
      <content type="html"><![CDATA[<h2 id="小巷"><a href="#小巷" class="headerlink" title="小巷"></a>小巷</h2><hr>
<a id="more"></a>
<blockquote><p>小巷<br>又弯又长<br>没有门<br>没有窗<br>我拿把旧钥匙<br>敲着厚厚的墙</p>
<footer><strong>顾城</strong><cite>小巷</cite></footer></blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL5.7.9密码重置]]></title>
      <url>http://yoursite.com/2016/09/07/database1/</url>
      <content type="html"><![CDATA[<h2 id="MySQL忘记密码"><a href="#MySQL忘记密码" class="headerlink" title="MySQL忘记密码"></a>MySQL忘记密码</h2><hr>
<ol>
<li>修改my.cnf</li>
</ol>
<ul>
<li><code>vi /etc/my.cnf</code>,添加<code>skip-grant-tables</code></li>
</ul>
<ol>
<li>重启数据库</li>
</ol>
<ul>
<li><code>service mysqld restart</code></li>
</ul>
<a id="more"></a>
<ol>
<li>连接数据库</li>
</ol>
<ul>
<li><code>mysql -u root</code></li>
</ul>
<ol>
<li>修改MySQL root用户的密码<br>三行命令分别如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update mysql.user set authentication_string = password(&apos;123456&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</div><div class="line">flush privileges;</div><div class="line">quit;</div></pre></td></tr></table></figure></li>
<li>恢复第一步中的修改</li>
</ol>
<ul>
<li><code>vi /etc/my.cnf</code>，删除<code>skip-grant-tables</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库错误]]></title>
      <url>http://yoursite.com/2016/09/07/database0/</url>
      <content type="html"><![CDATA[<h2 id="OperationalError-1366"><a href="#OperationalError-1366" class="headerlink" title="OperationalError 1366"></a>OperationalError 1366</h2><hr>
<p>在 <strong>Django</strong>连接数据库时发生这样的错误，此异常是 <strong>MySQL</strong>问题，而非 <strong>Python</strong>的问题，因类 <strong>MySQL</strong>的字段类型是<code>utf-xxx</code>，而在 <strong>MySQL</strong>中这些<code>utf-8</code>数据类型只能存储最多三个字节的字符，而存不了包含四个字节的字符。类似这样的错误，应该是数据库表的 <em>charset</em>和 <em>collation</em>问题。尝试把所有表的 <em>charset</em>改为<code>utf-8</code>,  <em>collation</em>改为<code>utf8-unicode-ci</code>。<br>如果还是不能解决，最好是重建数据库，然后设置数据库的属性，选择 <em>charset</em>为<code>utf-8</code>, <em>collation</em>为<code>utf8-unicode-ci</code>。<br>或者在MySQL命令行模式下，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database cc default charset utf8 collate utf8_unicode_ci;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django后台admin密码重置]]></title>
      <url>http://yoursite.com/2016/09/07/django0/</url>
      <content type="html"><![CDATA[<h2 id="Django管理控制台密码重置"><a href="#Django管理控制台密码重置" class="headerlink" title="Django管理控制台密码重置"></a>Django管理控制台密码重置</h2><hr>
<ol>
<li>进入到Django项目根目录，执行<code>python manage.py shell</code>(进入到Django Shell环境)</li>
<li>导入模块：<code>from django.contrib.auth.models import User</code></li>
<li>获取相应的用户名：<code>user = User.objects.get(username=&#39;admin&#39;)</code>(默认为admin，若在创建超级用户(<code>python manage.py createsuperuser</code>)时做过更改，则输入更改的用户名)</li>
<li>重置密码：<code>user.set_password(&#39;new_password&#39;)</code></li>
<li>保存更改:<code>user.save()</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[影的告别]]></title>
      <url>http://yoursite.com/2016/09/06/something0/</url>
      <content type="html"><![CDATA[<h2 id="影的告别"><a href="#影的告别" class="headerlink" title="影的告别"></a>影的告别</h2><a id="more"></a>
<blockquote><p>影的告别<br>人睡到不知道时候的时候，就会有影来告别，说出那些话——<br>有我所不乐意的在天堂里，我不愿去；有我所不乐意的在地狱里，我不愿去；<br>有我所不乐意的在你们将来的黄金世界里，我不愿去。<br>然而你就是我所不乐意的。<br>朋友，我不想跟随你了，我不愿住。<br>我不愿意！<br>呜乎呜乎，我不愿意，我不如彷徨于无地。<br>我不过一个影，要别你而沉没在黑暗里了。<br>然而黑暗又会吞并我，然而光明又会使我消失。<br>然而我不愿彷徨于明暗之间，我不如在黑暗里沉没。<br>然而我终于彷徨于明暗之间，我不知道是黄昏还是黎明。我姑且举灰黑的手装作喝干一杯酒，我将在不知道时候的时候独自远行。<br>呜乎呜乎，倘若黄昏，黑夜自然会来沉没我，否则我要被白天消失，如果现是黎明。<br>朋友，时候近了。<br>我将向黑暗里彷徨于无地。<br>你还想我的赠品。我能献你甚么呢？无已，则仍是黑暗和虚空而已。<br>但是，我愿意只是黑暗，或者会消失于你的白天；我愿意只是虚空，决不占你的心地。<br>我愿意这样，朋友——<br>我独自远行，不但没有你，并且再没有别的影在黑暗里。只有我被黑暗沉没，那世界全属于我自己。</p>
<footer><strong>鲁迅</strong><cite>一九二四年九月二十四日</cite></footer></blockquote>
<blockquote><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26494705&auto=1&height=66"></iframe></blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript复制]]></title>
      <url>http://yoursite.com/2016/09/06/JavaScript0/</url>
      <content type="html"><![CDATA[<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>看到网上的JavaScript代码带一个复制的小按键，好奇就把相关的代码段整理了一下。</p>
<a id="more"></a>
<ol>
<li>复制文本框内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function jsCopy()&#123;</div><div class="line">        var e = document.getElementById('content');</div><div class="line">        e.select();</div><div class="line">        document.execCommand('Copy');</div><div class="line">        alert('已复制内容到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'content'</span> <span class="attr">cols</span>=<span class="string">'50'</span> <span class="attr">rows</span>=<span class="string">'5'</span>&gt;</span></div><div class="line">Your fucking content.</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>复制网络地址 </li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>点击文本框复制内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>代码段来源于互联网,作者1： <a href="http://my.csdn.net/jin367411763,&#39;作者的CSDN博客地址&#39;" target="_blank" rel="external"><em>jin367411763</em></a>，作者2: <a href="http://www.cnblogs.com/tylerdonet/,&#39;作者的cnblogs地址&#39;" target="_blank" rel="external"><em>Tyler’s Blog</em></a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优先队列的堆实现]]></title>
      <url>http://yoursite.com/2016/09/06/PrioQueue1/</url>
      <content type="html"><![CDATA[<h2 id="优先队列的堆实现"><a href="#优先队列的堆实现" class="headerlink" title="优先队列的堆实现"></a>优先队列的堆实现</h2><hr>
<h3 id="堆及其性质"><a href="#堆及其性质" class="headerlink" title="堆及其性质"></a>堆及其性质</h3><ol>
<li>采用树形结构实现优先队列的一种有效技术成为 <strong>堆</strong>，节点数据的存储满足堆序。<ul>
<li>从根到任何一个叶节点，节点数据优先级递减</li>
<li>堆顶元素优先级最高，O(1)时间即可得到</li>
<li>位于不同路径上的元素，这里不关心其顺序</li>
</ul>
</li>
<li>几个重要性质<ul>
<li>在一个堆最后追加一个元素，依然是完全二叉树，但未必是堆</li>
<li>去掉堆顶，两个子堆上堆序不变</li>
<li>去掉堆顶的两个子堆加入根元素，未必是堆（堆序无法保证）</li>
<li>去掉堆中最后的元素，不破坏堆序</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueue</span><span class="params">()</span>:</span></div><div class="line">	<span class="string">'''</span></div><div class="line">	Implementing priority queues using heaps.</div><div class="line">	'''</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)</div><div class="line">		<span class="keyword">if</span> elist:</div><div class="line">			self.buildheap()</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in peek.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">0</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		self._elems.append(<span class="keyword">None</span>)</div><div class="line">		self.siftup(e,len(self._elems)<span class="number">-1</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftup</span><span class="params">(self,e,last)</span>:</span></div><div class="line">		elems,i,j = self._elems,last,(last<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		<span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; elems[j]:</div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j,(j<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in dequeue.'</span>)</div><div class="line">		elems  = self._elems</div><div class="line">		e0 = elems[<span class="number">0</span>]</div><div class="line">		e = elems.pop()</div><div class="line">		<span class="keyword">if</span> len(elems) &gt; <span class="number">0</span>:</div><div class="line">			self.siftdown(e,<span class="number">0</span>,len(elems))</div><div class="line">		<span class="keyword">return</span> e0</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftdown</span><span class="params">(self,e,begin,end)</span>:</span></div><div class="line">		elems,i,j = self._elems,begin,begin*<span class="number">2</span>+<span class="number">1</span></div><div class="line">		<span class="keyword">while</span> j &lt; end:</div><div class="line">			<span class="keyword">if</span> j+<span class="number">1</span> &lt; end <span class="keyword">and</span> elems[j+<span class="number">1</span>] &lt; elems[j]:</div><div class="line">				j += <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> e &lt; elems[j]:</div><div class="line">				<span class="keyword">break</span></div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j, <span class="number">2</span>*j+<span class="number">1</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">buildheap</span><span class="params">(self)</span>:</span></div><div class="line">		end = len(self._elems)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(end//<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">			self.siftdown(self._elems[i],i,end)</div></pre></td></tr></table></figure>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建操作</td>
<td>O(n)</td>
</tr>
<tr>
<td>插入和弹出元素</td>
<td>O(log n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优先队列的连续列表实现]]></title>
      <url>http://yoursite.com/2016/09/06/PrioQueue0/</url>
      <content type="html"><![CDATA[<h2 id="优先队列的连续列表实现"><a href="#优先队列的连续列表实现" class="headerlink" title="优先队列的连续列表实现"></a>优先队列的连续列表实现</h2><hr>
<h3 id="两种实现方案"><a href="#两种实现方案" class="headerlink" title="两种实现方案"></a>两种实现方案</h3><ol>
<li>存储数据时保证元素的优先顺序，任何时候取元素都可以得到最高优先级（存入操作效率低，访问和弹出方便）</li>
<li>存入简单（顺序表存入表尾，链接表存入表头），取用时检索（存入效率高，访问弹出不便），如许多次访问统一元素但不弹出，则不采用此法，避免重复检索，或者记录要访问的元素位置。</li>
</ol>
<a id="more"></a>
<h3 id="代码（第一种方案）"><a href="#代码（第一种方案）" class="headerlink" title="代码（第一种方案）"></a>代码（第一种方案）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQue</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)           <span class="comment">#使用list转换：对实参拷贝防止共享；实参可以是任一迭代对象</span></div><div class="line">		self._elems = sort(reversed=<span class="keyword">True</span>)	  <span class="comment">#设置为较小的优先级高</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		i = len(self._elems) - <span class="number">1</span></div><div class="line">		<span class="keyword">while</span> i &gt;= <span class="number">0</span>:                       <span class="comment">#优先级相同的元素先进先出</span></div><div class="line">			<span class="keyword">if</span> self._elems[i] &lt;= e:</div><div class="line">				i -= <span class="number">1</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">break</span></div><div class="line">		self._elems.insert(i+<span class="number">1</span>,e)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in top.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">-1</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'No elem to pop.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems.pop()</div></pre></td></tr></table></figure>
<hr>
<h3 id="操作效率（复杂度）"><a href="#操作效率（复杂度）" class="headerlink" title="操作效率（复杂度）"></a>操作效率（复杂度）</h3><p><strong>方案1</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(n)</td>
</tr>
<tr>
<td>其他</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p><strong>方案2</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(1)，替换表存储空间需要O(n)时间</td>
</tr>
<tr>
<td>其他</td>
<td>O(n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[其他]]></title>
      <url>http://yoursite.com/2016/09/05/meeting/</url>
      <content type="html"><![CDATA[<h2 id="了解点概念"><a href="#了解点概念" class="headerlink" title="了解点概念"></a>了解点概念</h2><hr>
<ul>
<li>DNS流量分发</li>
<li>容器调度:HP Ku8 Mannager</li>
<li>功能测试，性能测试</li>
<li>资源需求，项目时间节点</li>
<li>WEB应用层，能力服务器，数据库，高可用</li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[背包问题]]></title>
      <url>http://yoursite.com/2016/09/05/bagproblem/</url>
      <content type="html"><![CDATA[<h2 id="栈的应用其二：背包问题"><a href="#栈的应用其二：背包问题" class="headerlink" title="栈的应用其二：背包问题"></a>栈的应用其二：背包问题</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><ol>
<li><code>knap(weight,n)</code>表示n件物品的重量<ul>
<li>若不选最后一件物品(重量为W(n-1))，<code>knap(weight,n-1)</code>的解即为<code>knap(weight,n)</code>的解</li>
<li>若选择最后一件物品，若<code>knap(weight-W(n-1),n-1)</code>有解，其解加上最后一件物品就是<code>kanp(weight,n)</code>的解，即前者有解后者也有解</li>
</ul>
</li>
<li><p>递归的考虑问题，n件物品的背包问题可归结为两个n-1件物品的背包问题：</p>
<ul>
<li>同样重量，物品数量减一</li>
<li>减少重量，物品数量减一<a id="more"></a>
</li>
</ul>
</li>
<li><p>几种最简单的情况</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>重量</th>
<th>解情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于0</td>
<td>有解</td>
</tr>
<tr>
<td>小于0</td>
<td>无解</td>
</tr>
<tr>
<td>大于0且无物品可用</td>
<td>无解</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knap_rec</span><span class="params">(weight,wlist,n)</span>:</span></div><div class="line">    <span class="keyword">if</span> weight == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> weight &lt; <span class="number">0</span> <span class="keyword">or</span> (weight &gt;<span class="number">1</span> <span class="keyword">and</span> n&lt;<span class="number">1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight - wlist[n<span class="number">-1</span>], wlist, n - <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">'Item'</span> + str(n) + <span class="string">':'</span>,wlist[n - <span class="number">1</span>]</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight, wlist, n<span class="number">-1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">wlist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,]</div><div class="line">n = len(wlist)</div><div class="line">weight = <span class="number">10</span></div><div class="line"></div><div class="line">knap_rec(weight,wlist,n)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单的括号匹配]]></title>
      <url>http://yoursite.com/2016/09/05/stack/</url>
      <content type="html"><![CDATA[<h2 id="栈的应用其一：括号匹配"><a href="#栈的应用其一：括号匹配" class="headerlink" title="栈的应用其一：括号匹配"></a>栈的应用其一：括号匹配</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><p>未考虑引号和注释中的括号情况</p>
<ul>
<li>顺序扫描正文字符串，跳过无关字符</li>
<li>遇到开括号<code>(,[,{</code>则入栈</li>
<li>遇到闭括号<code>),],}</code>则弹出栈顶元素与之匹配</li>
<li>匹配成功则继续，否则失败结束</li>
</ul>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> stack_ <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkParens</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''括号配对检查函数，text为被检查的正文串'''</span></div><div class="line">    parens = <span class="string">'()[]&#123;&#125;'</span></div><div class="line">    openParens = <span class="string">'([&#123;'</span></div><div class="line">    opposite = &#123;<span class="string">')'</span>:<span class="string">'('</span>,<span class="string">']'</span>:<span class="string">'['</span>,<span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>&#125;        <span class="comment">#配对关系的字典</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parenstheses</span><span class="params">(text)</span>:</span></div><div class="line">        i,textLen = <span class="number">0</span>,len(text)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">while</span> i &lt; textLen <span class="keyword">and</span> text[i] <span class="keyword">not</span> <span class="keyword">in</span> parens:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i &gt;= textLen:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">yield</span> text[i],i</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">    st = SStack()                       <span class="comment">#保存括号的栈</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> pr,i <span class="keyword">in</span> parenstheses(text):     <span class="comment">#对text里各括号和位置迭代</span></div><div class="line">        <span class="keyword">if</span> pr <span class="keyword">in</span> openParens:            <span class="comment">#开括号压栈</span></div><div class="line">            st.push(pr)</div><div class="line">        <span class="keyword">elif</span> st.pop() != opposite[pr]:  <span class="comment">#不匹配退出</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'Unmatching is found at'</span>,i,<span class="string">'for'</span>,pr</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'All parentheses are correctly matched.'</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
