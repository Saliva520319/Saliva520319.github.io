<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[Python 批量生成变量]]></title>
      <url>http://yoursite.com/2016/09/22/python/</url>
      <content type="html"><![CDATA[<p>基本思想就是利用<code>locals()</code>字典生成特定的变量,如列表，字典等。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">for</span> p,i <span class="keyword">in</span> enumerate(range(<span class="number">1</span>,<span class="number">11</span>)):</div><div class="line">    locals()[<span class="string">'l%i'</span>%(p+<span class="number">1</span>)] = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    locals()[<span class="string">'list'</span>+str(i)] = []</div><div class="line">    </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    a=<span class="string">'list%d=[]'</span>%i </div><div class="line"><span class="keyword">exec</span> a</div></pre></td></tr></table></figure>
<p>另小九九</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dict_ = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">    dict_[i]=<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</div><div class="line">        tmp = str(j)+<span class="string">'*'</span>+str(i)+<span class="string">'='</span>+str(j*i)</div><div class="line">        dict_[i] = dict_[i]+<span class="string">' '</span>+tmp</div><div class="line">    <span class="keyword">print</span> dict_[i]</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[那朵花]]></title>
      <url>http://yoursite.com/2016/09/21/song4/</url>
      <content type="html"><![CDATA[<p>实在是没什么说的。</p>
<a id="more"></a>
<blockquote><p>费了好几页<br>终于写完我们的心情<br>却不知为何<br>弥补不了空白的一行<br>夹上花样书签<br>和你乘着用完就扔的自行车<br>堆起快被人遗忘的砖头<br>却突然倒塌了</p>
<p>那逐渐将人拖向对等的<br>蓝得可怕的天空<br>玩累了的我们<br>一定不会再想起<br>现在就这样朝我这边<br>一束束阳光倾注而来<br>两个人明明仍近在咫尺<br>而我却祈求「愿能再次相遇」<br>好像脑袋短路了</p>
<p>在翻开新一页的手掌<br>用嘴唇绑结上纸手圈<br>今天也是一成不变的今天<br>下雨的话也能打电话<br>现在就这样朝你那边<br>(手圈不知不觉间断开了)<br>传递出我的温柔<br>(但不知为何总是难以开口)<br>好像真的脑袋短路了</p>
<p>只要从中选一<br>便会传出崩溃的声音<br>我说那就是爱<br>你却真的笑了<br>能赶上太好了<br>整条街默认不知道陷入沉睡<br>前往用被人遗忘的砖头<br>堆积而成的地方吧</p>
<p>攀上可以遥望大海的山坡<br>头上是蓝得可怕的天空<br>右手拿着汽水<br>而左手却一直在找寻你</p>
<p>就这样用这双紧密的手<br>拥抱着春日之风<br>时间仍然归属于我们<br>「总有一天，会把今天遗忘」什么的<br>希望你不要说出口</p>
<p>“现在”就这样<br>你也再没追问我什么<br>两个人依然停留在那里吧<br>「没错，弥补空白的语言」<br>不，还是先别说吧</p>
<p>翻开新一页的手掌<br>用嘴唇解开的手带<br>首班电车零散的幸福<br>呐，今天也是一成不变的日子呢</p>
<p>好像真的脑袋短路了</p>
<footer><strong>Galileo Galilei</strong><cite>青い栞</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=417613399&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django获取数据库模型相关]]></title>
      <url>http://yoursite.com/2016/09/21/django1/</url>
      <content type="html"><![CDATA[<p>1.获取数据库模型字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">params = yourmodel._meta.fields</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(params)):</div><div class="line">    <span class="keyword">print</span> params[i],params[i].verbose_name</div></pre></td></tr></table></figure></p>
<p>2.获取数据库名称<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourmodel._meta.object_name</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB备份策略和Backup服务简介]]></title>
      <url>http://yoursite.com/2016/09/21/mongodb3/</url>
      <content type="html"><![CDATA[<h2 id="冗余-versus-备份"><a href="#冗余-versus-备份" class="headerlink" title="冗余 versus 备份"></a>冗余 versus 备份</h2><blockquote>
<p><strong>冗余 ！= 备份</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>冗余</th>
<th>备份</th>
</tr>
</thead>
<tbody>
<tr>
<td><ul><li>Replica Set</li><li>7*24可用</li><li>故障发生无需干预<ul><li>秒级自动failover</li><li>多数据中心部署</li></ul></li><li>系统升级维护对用户透明</li></ul></td>
<td><ul><li>灾难恢复</li><li>程序Bug损坏数据</li><li>人工误操作</li></ul></td>
</tr>
<tr>
<td>可以离线多少时间？</td>
<td>可以丢失多少数据？</td>
</tr>
</tbody>
</table>
<h2 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h2><h3 id="mongodump-mongorestore"><a href="#mongodump-mongorestore" class="headerlink" title="mongodump / mongorestore"></a>mongodump / mongorestore</h3><ul>
<li>导出BSON文件</li>
<li>可以选择备份Namespace</li>
<li>可以通过Oplog实现时间点恢复（Point-in-time）</li>
<li>缺点<ul>
<li>速度较慢</li>
<li>分片集群需同步</li>
</ul>
</li>
</ul>
<h3 id="文件系统备份"><a href="#文件系统备份" class="headerlink" title="文件系统备份"></a>文件系统备份</h3><ul>
<li>常见方式<ul>
<li>文件复制</li>
<li>文件系统或块存储快照，如LVM 或AWS EBS</li>
</ul>
</li>
<li>速度最快</li>
<li><p>缺点</p>
<ul>
<li>日志文件（journal）落盘</li>
<li>无法选择性备份</li>
<li>备份文件占用空间较大</li>
<li>分片同步问题</li>
</ul>
<h3 id="Backup服务"><a href="#Backup服务" class="headerlink" title="Backup服务"></a>Backup服务</h3><ul>
<li>MongoDB开发</li>
<li>操作简单</li>
<li>选择性备份</li>
<li>时间点恢复</li>
<li>缺点</li>
<li>无法备份Standalone mongod</li>
</ul>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>分片集群备份时的同步问题</li>
<li>若无法恢复，失去备份意义<ul>
<li>持续恢复？</li>
</ul>
</li>
</ul>
<h2 id="Backup服务-1"><a href="#Backup服务-1" class="headerlink" title="Backup服务"></a>Backup服务</h2><h3 id="Backup-amp-Restore系统"><a href="#Backup-amp-Restore系统" class="headerlink" title="Backup &amp; Restore系统"></a>Backup &amp; Restore系统</h3><p>是MongoDB云服务系统的主要组件之一，目标是降低备份难度（只需要安装agent）</p>
<table>
<thead>
<tr>
<th>类似Secondary</th>
<th>又不是Secondary</th>
</tr>
</thead>
<tbody>
<tr>
<td><ul><li>复制数据</li><li>更新数据，采用MongoDB Replication机制</li><li>Tail Oplog</li><li>回访Oplog</li><li>离线维护时不影响用户生产环境</li></ul></td>
<td><ul><li>不是Replica Set组成部分</li><li>不参与选举</li><li>不参与Write Concern</li><li>无状态，没有磁盘I/O</li></ul></td>
</tr>
</tbody>
</table>
<div align="center"><img src="/img/image1.png" alt="主要组件"></div>

<h4 id="Backup-Agent"><a href="#Backup-Agent" class="headerlink" title="Backup Agent"></a>Backup Agent</h4><ul>
<li>可执行文件，用GO语言编写</li>
<li>无状态，从Ingestion获得配置命令</li>
<li>发送InitialSync数据</li>
<li>传输Oplog流</li>
<li>对于Sharded Cluster快照，试图同步Shards和Config servers</li>
<li>序列化BSON，压缩，网络传输</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[xwlt模块]]></title>
      <url>http://yoursite.com/2016/09/19/xwlt/</url>
      <content type="html"><![CDATA[<h2 id="xwlt"><a href="#xwlt" class="headerlink" title="xwlt"></a>xwlt</h2><blockquote>
<p>生成兼容MS Excel 97/2000/XP/2003 XLS的电子表格文件，Python2.6+均支持该模块，平台不限。无需任何Python自带库外的文件依赖。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install xwlt</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="comment">#创建两种显示样式</span></div><div class="line">style0 = xlwt.easyxf(<span class="string">'font:name Times New Roman,color-index red,bold on'</span>,num_format_str=<span class="string">'#,##0.00'</span>)</div><div class="line">style1 = xlwt.easyxf(num_format_str=<span class="string">'D-MMM-YY'</span>)</div><div class="line"><span class="comment">#创建表格，表格名称（非文件名）</span></div><div class="line">wb = xlwt.Workbook()</div><div class="line">ws = wb.add_sheet(<span class="string">'A Test Sheet'</span>)</div><div class="line"><span class="comment">#表格里输入，选项依次为行，列，内容，样式（从0开始算起）</span></div><div class="line">ws.write(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1234.56</span>,style0)</div><div class="line">ws.write(<span class="number">1</span>,<span class="number">0</span>,datetime.now(),style1)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">2</span>,xlwt.Formula(<span class="string">'A3+B3'</span>))</div><div class="line"><span class="comment">#此处保存为文件名称</span></div><div class="line">wb.save(<span class="string">'Example.xls'</span>)</div></pre></td></tr></table></figure>
<h2 id="API参考"><a href="#API参考" class="headerlink" title="API参考"></a>API参考</h2><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">xlwt</span>.<span class="title">Workbook</span>.<span class="title">Workbook</span><span class="params">(encoding=<span class="string">'ascii'</span>,style_compression=<span class="number">0</span>)</span></span></div></pre></td></tr></table></figure>
<p>该类代表了工作簿的全部内容，使用<code>xlwt</code>模块创建一个Excel文件就是使用该类实例化一个对象。</p>
<ul>
<li><span style="color: blue;background-color: #eeeeee">add_sheet(sheetname,cell_overwrite_ok=False)</span></li>
</ul>
<p>该方法用于在工作簿中创建表格（可以理解为Excel文件当中的一个个Tab）。</p>
<blockquote>
<p>参数：</p>
<ul>
<li><code>sheetname</code>:表格Tab名称（通常显示在Excel程序底部）</li>
<li><code>cell_overwrite_ok</code>:如果设置为<code>True</code>，表格内容被写入超过一次时不会报错（exception）<br>返回值：Excel中将添加一个Tab</li>
</ul>
</blockquote>
<ul>
<li><span style="color: blue;background-color: #eeeeee">save(filename_or_stream)</span></li>
</ul>
<p>顾名思义就是保存成一个Excel文件喽。</p>
<blockquote>
<p>参数：<code>filename_or_stream</code>:要保存的文件名称字符串。参数也可以是拥有<code>write</code>方法的流对象（stream object），例如<code>StringIO</code>,此时数据将写入文件流中。</p>
</blockquote>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">xlwt</span>.<span class="title">Worksheet</span>.<span class="title">Worksheet</span><span class="params">(sheetname,parent_book,cell_overwrite_ok=False)</span></span></div></pre></td></tr></table></figure>
<p>该类表示工作簿中的一个Tab表格。</p>
<blockquote>
<p>通常你是在实例化<code>Workbook</code>类时调用<code>add_sheet</code>方法创建该类的实例对象的。</p>
</blockquote>
<ul>
<li><span style="color: blue;background-color: #eeeeee">write(r,c,label=’’,style=[xlwt.XFStyle object])</span><br>该方法用于在表格的某个小格子写东西。</li>
</ul>
<blockquote>
<p>参数：</p>
<ul>
<li>r:行，从零开始</li>
<li>c:列，从零开始</li>
<li>label:写入的内容。简而言之，数都写成浮点数，Unicode对象保持原样，字节转化成Unicode对象，使用默认的ascii编码。时间类对象转化成距离1900年开始的天数。布尔对象显示为TRUE和FALSE,None将内容置空，xlwt.Formula用来创建Excel公式。</li>
<li>style:XF(扩展格式)，具体就是表格内容的表现形式（颜色等）</li>
</ul>
</blockquote>
<h2 id="扩展格式"><a href="#扩展格式" class="headerlink" title="扩展格式"></a>扩展格式</h2><p>扩展格式用来记录单元格的显示样式，主要包括六组：数字格式，字体，对齐（水平，垂直，居中，缩进，换行等），边界样式，背景，保护内容。</p>
<ul>
<li><span style="color: blue;background-color: #eeeeee">xlwt.Style.easyxf(strg_to_parse=’’,num_format_str=None,field_sep=’,’,line_sep=’;’,intro_sep=’:’,esc_char=’\\’,debug=False)</span></li>
</ul>
<p>该函数用处创建扩展格式对象（XFStyle）。</p>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[如何用十条命令在一分钟内检查Linux服务器性能]]></title>
      <url>http://yoursite.com/2016/09/18/linux0/</url>
      <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过执行以下命令，可以在1分钟内对系统资源使用情况有个大致的了解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">uptime</div><div class="line">dmesg | tail</div><div class="line">vmstat 1</div><div class="line">mpstat -P ALL 1</div><div class="line">pidstat 1</div><div class="line">iostat -xz 1</div><div class="line">free -m</div><div class="line">sar -n DEV 1</div><div class="line">sar -n TCP,ETCP 1</div><div class="line">top</div></pre></td></tr></table></figure></p>
<p>其中一些命令需要安装<code>sysstat</code>包，有一些由<code>procps</code>包提供。这些命令的输出，有助于快速定位性能瓶颈，检查出所有资源（CPU、内存、磁盘IO等）的利用率（<em>utilization</em>）、饱和度（<em>saturation</em>）和错误（<em>error</em>）度量，也就是所谓的USE方法。<br>下面我们来逐一介绍下这些命令，有关这些命令更多的参数和说明，请参照命令的手册。</p>
<hr>
<h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uptime</div><div class="line">23:51:26 up 21:31,  1 user,  load average: 30.02, 26.43, 19.02</div></pre></td></tr></table></figure>
<p>这个命令可以快速查看机器的负载情况。在Linux系统中，这些数据表示等待CPU资源的进程和阻塞在不可中断IO进程（进程状态为D）的数量。这些数据可以让我们对系统资源使用有一个宏观的了解。<br>命令的输出分别表示1分钟、5分钟、15分钟的平均负载情况。通过这三个数据，可以了解服务器负载是在趋于紧张还是区域缓解。如果1分钟平均负载很高，而15分钟平均负载很低，说明服务器正在命令高负载情况，需要进一步排查CPU资源都消耗在了哪里。反之，如果15分钟平均负载很高，1分钟平均负载较低，则有可能是CPU资源紧张时刻已经过去。<br>上面例子中的输出，可以看见最近1分钟的平均负载非常高，且远高于最近15分钟负载，因此我们需要继续排查当前系统中有什么进程消耗了大量的资源。可以通过下文将会介绍的vmstat、mpstat等命令进一步排查。</p>
<hr>
<h2 id="dmesg丨tail"><a href="#dmesg丨tail" class="headerlink" title="dmesg丨tail"></a>dmesg丨tail</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ dmesg | tail</div><div class="line">[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0</div><div class="line">[...]</div><div class="line">[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child</div><div class="line">[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB</div><div class="line">[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request.  Check SNMP counters.</div></pre></td></tr></table></figure>
<p>该命令会输出系统日志的最后10行。示例中的输出，可以看见一次内核的oom kill和一次TCP丢包。这些日志可以帮助排查性能问题。千万不要忘了这一步。</p>
<hr>
<h2 id="vmstat-1"><a href="#vmstat-1" class="headerlink" title="vmstat 1"></a>vmstat 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ vmstat 1</div><div class="line">procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----</div><div class="line"> r  b swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line">34  0    0 200889792  73708 591828    0    0     0     5    6   10 96  1  3  0  0</div><div class="line">32  0    0 200889920  73708 591860    0    0     0   592 13284 4282 98  1  1  0  0</div><div class="line">32  0    0 200890112  73708 591860    0    0     0     0 9501 2154 99  1  0  0  0</div><div class="line">32  0    0 200889568  73712 591856    0    0     0    48 11900 2459 99  0  0  0  0</div><div class="line">32  0    0 200890208  73712 591860    0    0     0     0 15898 4840 98  1  1  0  0</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>vmstat(8) 命令，每行会输出一些系统核心指标，这些指标可以让我们更详细的了解系统状态。后面跟的参数1，表示每秒输出一次统计信息，表头提示了每一列的含义，这几介绍一些和性能调优相关的列：</p>
<ul>
<li>r：等待在CPU资源的进程数。这个数据比平均负载更加能够体现CPU负载情况，数据中不包含等待IO的进程。如果这个数值大于机器CPU核数，那么机器的CPU资源已经饱和。</li>
<li>free：系统可用内存数（以千字节为单位），如果剩余内存不足，也会导致系统性能问题。下文介绍到的free命令，可以更详细的了解系统内存的使用情况。</li>
<li>si, so：交换区写入和读取的数量。如果这个数据不为0，说明系统已经在使用交换区（swap），机器物理内存已经不足。</li>
<li>us, sy, id, wa, st：这些都代表了CPU时间的消耗，它们分别表示用户时间（user）、系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen，一般被其他虚拟机消耗）。<br>上述这些CPU时间，可以让我们很快了解CPU是否出于繁忙状态。一般情况下，如果用户时间和系统时间相加非常大，CPU出于忙于执行指令。如果IO等待时间很长，那么系统的瓶颈可能在磁盘IO。<br>示例命令的输出可以看见，大量CPU时间消耗在用户态，也就是用户应用程序消耗了CPU时间。这不一定是性能问题，需要结合r队列，一起分析。</li>
</ul>
<hr>
<h2 id="mpstat-P-ALL-1"><a href="#mpstat-P-ALL-1" class="headerlink" title="mpstat-P ALL 1"></a>mpstat-P ALL 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mpstat -P ALL 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)</div><div class="line">07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle</div><div class="line">07:38:50 PM  all  98.47   0.00   0.75    0.00   0.00   0.00    0.00    0.00    0.00   0.78</div><div class="line">07:38:50 PM    0  96.04   0.00   2.97    0.00   0.00   0.00    0.00    0.00    0.00   0.99</div><div class="line">07:38:50 PM    1  97.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   2.00</div><div class="line">07:38:50 PM    2  98.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   1.00</div><div class="line">07:38:50 PM    3  96.97   0.00   0.00    0.00   0.00   0.00    0.00    0.00    0.00   3.03</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>该命令可以显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的。</p>
<hr>
<h2 id="pidstat-1"><a href="#pidstat-1" class="headerlink" title="pidstat 1"></a>pidstat 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ pidstat 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)</div><div class="line">07:41:02 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line">07:41:03 PM     0         9    0.00    0.94    0.00    0.94     1  rcuos/0</div><div class="line">07:41:03 PM     0      4214    5.66    5.66    0.00   11.32    15  mesos-slave</div><div class="line">07:41:03 PM     0      4354    0.94    0.94    0.00    1.89     8  java</div><div class="line">07:41:03 PM     0      6521 1596.23    1.89    0.00 1598.11    27  java</div><div class="line">07:41:03 PM     0      6564 1571.70    7.55    0.00 1579.25    28  java</div><div class="line">07:41:03 PM 60004     60154    0.94    4.72    0.00    5.66     9  pidstat</div><div class="line">07:41:03 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line">07:41:04 PM     0      4214    6.00    2.00    0.00    8.00    15  mesos-slave</div><div class="line">07:41:04 PM     0      6521 1590.00    1.00    0.00 1591.00    27  java07:41:04 PM     0      6564 1573.00   10.00    0.00 1583.00    28  java</div><div class="line">07:41:04 PM   108      6718    1.00    0.00    0.00    1.00     0  snmp-pass</div><div class="line">07:41:04 PM 60004     60154    1.00    4.00    0.00    5.00     9  pidstat</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>pidstat命令输出进程的CPU占用率，该命令会持续输出，并且不会覆盖之前的数据，可以方便观察系统动态。如上的输出，可以看见两个JAVA进程占用了将近1600%的CPU时间，既消耗了大约16个CPU核心的运算资源。</p>
<hr>
<h2 id="iostat-xz-1"><a href="#iostat-xz-1" class="headerlink" title="iostat-xz 1"></a>iostat-xz 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ iostat -xz 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)</div><div class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</div><div class="line">          73.96    0.00    3.73    0.03    0.06   22.21</div><div class="line">Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</div><div class="line">xvda        0.00     0.23    0.21    0.18     4.52     2.08    34.37     0.00    9.98   13.80    5.42   2.44   0.09</div><div class="line">xvdb        0.01     0.00    1.02    8.94   127.97   598.53   145.79     0.00    0.43    1.78    0.28   0.25   0.25</div><div class="line">xvdc        0.01     0.00    1.02    8.86   127.79   595.94   146.50     0.00    0.45    1.82    0.30   0.27   0.26</div><div class="line">dm-0        0.00     0.00    0.69    2.32    10.47    31.69    28.01     0.01    3.23    0.71    3.98   0.13   0.04</div><div class="line">dm-1        0.00     0.00    0.00    0.94     0.01     3.78     8.00     0.33  345.84    0.04  346.81   0.01   0.00</div><div class="line">dm-2        0.00     0.00    0.09    0.07     1.35     0.36    22.50     0.00    2.55    0.23    5.62   1.78   0.03</div><div class="line">[...]</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>iostat命令主要用于查看机器磁盘IO情况。该命令输出的列，主要含义是：</p>
<ul>
<li>r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。</li>
<li>await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。</li>
<li>avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。</li>
<li>%util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。<br>如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。</li>
</ul>
<hr>
<h2 id="free-m"><a href="#free-m" class="headerlink" title="free -m"></a>free -m</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ free -m</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:        245998      24545     221453         83         59        541</div><div class="line">-/+ buffers/cache:      23944     222053</div><div class="line">Swap:            0          0          0</div></pre></td></tr></table></figure>
<p>free命令可以查看系统内存的使用情况，-m参数表示按照兆字节展示。最后两列分别表示用于IO缓存的内存数，和用于文件系统页缓存的内存数。需要注意的是，第二行-/+ buffers/cache，看上去缓存占用了大量内存空间。这是Linux系统的内存使用策略，尽可能的利用内存，如果应用程序需要内存，这部分内存会立即被回收并分配给应用程序。因此，这部分内存一般也被当成是可用内存。<br>如果可用内存非常少，系统可能会动用交换区（如果配置了的话），这样会增加IO开销（可以在iostat命令中提现），降低系统性能。</p>
<hr>
<h2 id="sar-n-DEV-1"><a href="#sar-n-DEV-1" class="headerlink" title="sar -n DEV 1"></a>sar -n DEV 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sar -n DEV 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015     _x86_64_    (32 CPU)</div><div class="line">12:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</div><div class="line">12:16:49 AM      eth0  18763.00   5032.00  20686.42    478.30      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM        lo     14.00     14.00      1.36      1.36      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</div><div class="line">12:16:50 AM      eth0  19763.00   5101.00  21999.10    482.56      0.00      0.00      0.00      0.00</div><div class="line">12:16:50 AM        lo     20.00     20.00      3.25      3.25      0.00      0.00      0.00      0.00</div><div class="line">12:16:50 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和。如示例输出中，eth0网卡设备，吞吐率大概在22 Mbytes/s，既176 Mbits/sec，没有达到1Gbit/sec的硬件上限。</p>
<hr>
<h2 id="sar-n-TCP-ETCP-1"><a href="#sar-n-TCP-ETCP-1" class="headerlink" title="sar -n TCP,ETCP 1"></a>sar -n TCP,ETCP 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sar -n TCP,ETCP 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)</div><div class="line">12:17:19 AM  active/s passive/s    iseg/s    oseg/s</div><div class="line">12:17:20 AM      1.00      0.00  10233.00  18846.00</div><div class="line">12:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s</div><div class="line">12:17:20 AM      0.00      0.00      0.00      0.00      0.00</div><div class="line">12:17:20 AM  active/s passive/s    iseg/s    oseg/s</div><div class="line">12:17:21 AM      1.00      0.00   8359.00   6039.00</div><div class="line">12:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s</div><div class="line">12:17:21 AM      0.00      0.00      0.00      0.00      0.00</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>sar命令在这里用于查看TCP连接状态，其中包括：</p>
<ul>
<li>active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；</li>
<li>passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；</li>
<li>retrans/s：每秒TCP重传数量；<br>TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包。</li>
</ul>
<hr>
<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ top</div><div class="line">top - 00:15:40 up 21:56,  1 user,  load average: 31.09, 29.87, 29.92</div><div class="line">Tasks: 871 total,   1 running, 868 sleeping,   0 stopped,   2 zombie</div><div class="line">%Cpu(s): 96.8 us,  0.4 sy,  0.0 ni,  2.7 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:  25190241+total, 24921688 used, 22698073+free,    60448 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   554208 cached Mem</div><div class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line"> 20248 root      20   0  0.227t 0.012t  18748 S  3090  5.2  29812:58 java</div><div class="line">  4213 root      20   0 2722544  64640  44232 S  23.5  0.0 233:35.37 mesos-slave</div><div class="line"> 66128 titancl+  20   0   24344   2332   1172 R   1.0  0.0   0:00.07 top</div><div class="line">  5235 root      20   0 38.227g 547004  49996 S   0.7  0.2   2:02.74 java</div><div class="line">  4299 root      20   0 20.015g 2.682g  16836 S   0.3  1.1  33:14.42 java     1 root      20   0   33620   2920   1496 S   0.0  0.0   0:03.82 init</div><div class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd</div><div class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:05.35 ksoftirqd/0</div><div class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</div><div class="line">     6 root      20   0       0      0      0 S   0.0  0.0   0:06.94 kworker/u256:0</div><div class="line">     8 root      20   0       0      0      0 S   0.0  0.0   2:38.05 rcu_sched</div></pre></td></tr></table></figure>
<p>top命令包含了前面好几个命令的检查的内容。比如系统负载情况（uptime）、系统内存使用情况（free）、系统CPU使用情况（vmstat）等。因此通过这个命令，可以相对全面的查看系统负载的来源。同时，top命令支持排序，可以按照不同的列排序，方便查找出诸如内存占用最多的进程、CPU占用率最高的进程等。<br>但是，top命令相对于前面一些命令，输出是一个瞬间值，如果不持续盯着，可能会错过一些线索。这时可能需要暂停top命令刷新，来记录和比对数据。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>排查Linux服务器性能问题还有很多工具，上面介绍的一些命令，可以帮助我们快速的定位问题。例如前面的示例输出，多个证据证明有JAVA进程占用了大量CPU资源，之后的性能调优就可以针对应用程序进行。</p>
<hr>
<p>文章出自<a href="http://chuansong.me/n/2293468" target="_blank" rel="external">InfoQ</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Song F]]></title>
      <url>http://yoursite.com/2016/09/17/song3/</url>
      <content type="html"><![CDATA[<p>居然由于版权保护，无法生成外链。<br>达达的黄金时代，一整张专辑都很好，怎么说呢，就是年轻逼人。隔着耳机你都能感觉彭坦的喉结在随着歌曲，像一只没长毛的老鼠，在蠕动。<br>我这么比喻可能有点恶心，或者说有点GAY?毕竟一个一脸痘的粗犷老爷们听着唧唧歪歪的情歌，想想男主唱的喉结，是很奇怪的一件事。但是那所谓的阳光，真的，难以掩盖。歌曲鼓点响起来的时候，你就是感觉在青春的校园，男孩得意洋洋的打着爵士鼓，仿佛司马相如和卓文君的凤求凰，在向下面一样青春、阳光的女孩示爱。你甚至可以感受得到，女孩穿的是运动鞋，不是那些个庸脂俗粉的各路妖魔鬼怪的也称之为鞋的东西；圆圆的脸蛋，不是那种看起来审美疲劳的瓜子脸，白洗干净，黑色镜框，头发整齐的扎在后面，阳光在侧面打过来，肉肉的脸蛋上的绒毛都一清二楚；穿着干净简洁的衬衫，穿着同样干净简洁的牛仔裤。这样一个午后，一个青春的校园爱情故事就要发生了。<br>我大概学了唱这歌，听起来就像我那只不争气的柯基在学狼叫，滑稽。糙。妈的好伤心。看来这辈子想唱点什么是没戏了。毕竟我还是知道回字有四种写法的。是不是该一脸得意呢。</p>
<a id="more"></a>
<blockquote><p>在那些黎明将至的山谷里<br>我急促的甚至奔跑起来<br>生命穿越过苏醒的花丛<br>让我带走这里躁动的希望<br>在那些炙热潮湿的喧嚣里<br>我急促的甚至奔跑起来<br>汗水渗透着城市的睡梦<br>让我带走这里火红的舞蹈<br>在那些插着稻草人的田野里<br>我急促的甚至奔跑起来<br>风吹拂金黄色的大地<br>让我带走这里成熟的消息<br>在那些雪花绽放的日子里<br>我急促的甚至奔跑起来<br>冰雪的花粉在脸上融化<br>让我带走这里所有的回忆<br>谁能够明白<br>爱又是什么<br>谁能告诉我<br>我该去哪里</p>
<p>在那些雪花绽放的日子里<br>我急促的甚至奔跑起来<br>冰雪的花粉在脸上融化<br>让我带走这里所有的回忆<br>在那些插着稻草人的田野里<br>我急促的甚至奔跑起来<br>风吹拂金黄色的大地<br>让我带走这里成熟的消息<br>在那些炙热潮湿的喧嚣里<br>我急促的甚至奔跑起来<br>汗水渗透着城市的睡梦<br>让我带走这里火红的舞蹈<br>在那些黎明将至的山谷里<br>我急促的甚至奔跑起来<br>生命穿越过苏醒的花丛<br>让我带走这里躁动的希望<br>你告诉我 爱就是森林<br>我向森林奔去<br>你告诉我 爱就是海湾<br>我向海湾骑行<br>你告诉我 爱就是云朵,<br>我向云朵飞翔<br>你告诉我 爱就在你心中<br>我轻轻吻你</p>
<p>让我带走 这里躁动的希望<br>让我带走 这里火红的舞蹈<br>让我带走 这里成熟的消息<br>让我带走 这里所有的回忆<br>Ah~</p>
<footer><strong>达达</strong><cite>Song F</cite></footer></blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django]]></title>
      <url>http://yoursite.com/2016/09/17/something4/</url>
      <content type="html"><![CDATA[<p> 中秋节，利用Django做一个数据库后台，数据库是现成的，结果由于建库不太规范，各种奇怪的问题，网络上一顿找资料。稀里糊涂的还是。无外乎建库的主键设置，元组的一些详细参数，防止MySQL出错column名称的选择，找来找去还是官方文档和stackoverflow比较靠谱些。妈的代码都用不了搞个毛线啊。什么时候编程就应该像搭积木一样，我什么需求，拼到一起来，不关心底层的实现。</p>
<p> 数据库的东西要接着看，接着整理资料。Django还是老老实实的把官方文档看的明白点。其实那些queryset什么东西的，国际化序列化都挺乱的。或者是我笨。数据结构和算法还是得继续敲。</p>
<p> 感觉时间不够用呢怎么。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-3]]></title>
      <url>http://yoursite.com/2016/09/15/mongodb2/</url>
      <content type="html"><![CDATA[<h2 id="MongoDB实战3"><a href="#MongoDB实战3" class="headerlink" title="MongoDB实战3"></a>MongoDB实战3</h2><hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[中秋节]]></title>
      <url>http://yoursite.com/2016/09/15/something3/</url>
      <content type="html"><![CDATA[<p>中秋节回家。中午迷迷糊糊做梦，大概就是喜欢的姑娘心里住着前男友。醒来一脸水。莫名的悲伤。<br>回去好好治治脸，特么一脸痘我也烦躁了。看来指望系统自动修复是不行了。就去中日友好吧。<br>洗心革面了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-2]]></title>
      <url>http://yoursite.com/2016/09/15/mongodb1/</url>
      <content type="html"><![CDATA[<h2 id="MongoDB实战2"><a href="#MongoDB实战2" class="headerlink" title="MongoDB实战2"></a>MongoDB实战2</h2><hr>
<h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>类似于MySQL的<code>group by</code>,做统计工作。Map函数调用<code>emit(key,value)</code>,遍历集合中记录，将参数传递给Reduce函数处理。<br>使用<code>db.runCommand</code>或mapReduce命令执行。</p>
<p>格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">db.runCommand(</div><div class="line">    &#123;mapreduce:&lt;collection&gt;,</div><div class="line">     map:&lt;mapfunction&gt;,</div><div class="line">     reduce:&lt;reducefunction&gt;,</div><div class="line">     [,query:&lt;query filter object]</div><div class="line">     [,sort:&lt;sorts the input objects using this key.Useful for optimization,like sorting by the emit key for fewer reduces&gt;]</div><div class="line">     [,limit:&lt;number of objects to return from collection&gt;]</div><div class="line">     [,out:&lt;output collections&gt;]</div><div class="line">     [,keeptemp:&lt;true|false&gt;]</div><div class="line">     [,finalize:&lt;finalizefunction&gt;]</div><div class="line">     [,scope:&lt;object where fields go into javascript global scope&gt;]</div><div class="line">     [,verbose:true]</div><div class="line">    &#125;</div><div class="line">);</div></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>mapreduce</td>
<td>指定数据集</td>
</tr>
<tr>
<td>map</td>
<td>指定映射函数（生成键值对序列，作为统计函数输入参数）</td>
</tr>
<tr>
<td>reduce</td>
<td>指定统计函数</td>
</tr>
<tr>
<td>query</td>
<td>目标过滤</td>
</tr>
<tr>
<td>sort</td>
<td>目标记录排序</td>
</tr>
<tr>
<td>limit</td>
<td>限制目标记录数量</td>
</tr>
<tr>
<td>out</td>
<td>统计结果存放集合，不指定则使用临时集合，客户端断开自动删除</td>
</tr>
<tr>
<td>keeptemp</td>
<td>是否保留临时集合</td>
</tr>
<tr>
<td>finalize</td>
<td>最终处理函数</td>
</tr>
<tr>
<td>scope</td>
<td>向map、reduce和finalize导入外部变量</td>
</tr>
<tr>
<td>verbose</td>
<td>显示详细的时间统计信息</td>
</tr>
</tbody>
</table>
<h3 id="MapReduce实例"><a href="#MapReduce实例" class="headerlink" title="MapReduce实例"></a>MapReduce实例</h3><p><strong>准备数据</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt; for(var i=1;i&lt;10;i++)db.students.insert(&#123;class:1,age:i&#125;);</div><div class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class="line">&gt; for(var i=1;i&lt;10;i++)db.students.insert(&#123;class:2,age:i&#125;);</div><div class="line">WriteResult(&#123; &quot;nInserted&quot; : 1 &#125;)</div><div class="line">&gt; db.students.find();</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe1&quot;), &quot;class&quot; : 1, &quot;age&quot; : 1 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe2&quot;), &quot;class&quot; : 1, &quot;age&quot; : 2 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe3&quot;), &quot;class&quot; : 1, &quot;age&quot; : 3 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe4&quot;), &quot;class&quot; : 1, &quot;age&quot; : 4 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe5&quot;), &quot;class&quot; : 1, &quot;age&quot; : 5 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe6&quot;), &quot;class&quot; : 1, &quot;age&quot; : 6 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe7&quot;), &quot;class&quot; : 1, &quot;age&quot; : 7 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe8&quot;), &quot;class&quot; : 1, &quot;age&quot; : 8 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8340279c0ecac9b96fe9&quot;), &quot;class&quot; : 1, &quot;age&quot; : 9 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96fea&quot;), &quot;class&quot; : 2, &quot;age&quot; : 1 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96feb&quot;), &quot;class&quot; : 2, &quot;age&quot; : 2 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96fec&quot;), &quot;class&quot; : 2, &quot;age&quot; : 3 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96fed&quot;), &quot;class&quot; : 2, &quot;age&quot; : 4 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96fee&quot;), &quot;class&quot; : 2, &quot;age&quot; : 5 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96fef&quot;), &quot;class&quot; : 2, &quot;age&quot; : 6 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96ff0&quot;), &quot;class&quot; : 2, &quot;age&quot; : 7 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96ff1&quot;), &quot;class&quot; : 2, &quot;age&quot; : 8 &#125;</div><div class="line">&#123; &quot;_id&quot; : ObjectId(&quot;57da8990279c0ecac9b96ff2&quot;), &quot;class&quot; : 2, &quot;age&quot; : 9 &#125;</div></pre></td></tr></table></figure></p>
<p><strong>分别指定函数及运行结果</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&gt; m = function()&#123;emit(this.class,1)&#125;</div><div class="line">&gt; r = function(key,value)&#123;var x = 0;values.forEach(function(v)&#123;x += v&#125;);return x;&#125;</div><div class="line">&gt; f = function(key,value)&#123;return &#123;class:key,count:value&#125;;&#125;</div><div class="line">&gt; re = db.runCommand(&#123; mapreduce:&quot;students&quot;, map:m, reduce:r, out:&quot;students_res&quot;,finalize:f,query:&#123;age:&#123;$lt:5&#125;&#125;&#125;);</div><div class="line">&#123;</div><div class="line">    &quot;result&quot; : &quot;students_res&quot;,</div><div class="line">    &quot;timeMillis&quot; : 148,</div><div class="line">    &quot;counts&quot; : &#123;</div><div class="line">        &quot;input&quot; : 8,</div><div class="line">        &quot;emit&quot; : 8,</div><div class="line">        &quot;reduce&quot; : 2,</div><div class="line">        &quot;output&quot; : 2</div><div class="line">    &#125;,</div><div class="line">    &quot;ok&quot; : 1</div><div class="line">&#125;</div><div class="line">&gt; db.students_res.find();</div><div class="line">&#123; &quot;_id&quot; : 1, &quot;value&quot; : &#123; &quot;class&quot; : 1, &quot;count&quot; : 4 &#125; &#125;</div><div class="line">&#123; &quot;_id&quot; : 2, &quot;value&quot; : &#123; &quot;class&quot; : 2, &quot;count&quot; : 4 &#125; &#125;</div></pre></td></tr></table></figure></p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>索引信息保存在<code>system.indexes</code>中，默认为<code>_id</code>创建索引，并且不可删除，创建索引可以后台执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">//创建索引</div><div class="line">&gt; db.students.ensureIndex(&#123;age:1&#125;);     //1升序，-1降序</div><div class="line">&#123;</div><div class="line">    &quot;createdCollectionAutomatically&quot; : false,</div><div class="line">    &quot;numIndexesBefore&quot; : 1,</div><div class="line">    &quot;numIndexesAfter&quot; : 2,</div><div class="line">    &quot;ok&quot; : 1</div><div class="line">&#125;</div><div class="line">//查看索引</div><div class="line">&gt; db.students.getIndexes();</div><div class="line">[</div><div class="line">    &#123;</div><div class="line">        &quot;v&quot; : 1,</div><div class="line">        &quot;key&quot; : &#123;</div><div class="line">            &quot;_id&quot; : 1</div><div class="line">        &#125;,</div><div class="line">        &quot;name&quot; : &quot;_id_&quot;,</div><div class="line">        &quot;ns&quot; : &quot;test.students&quot;</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        &quot;v&quot; : 1,</div><div class="line">        &quot;key&quot; : &#123;</div><div class="line">            &quot;age&quot; : 1</div><div class="line">        &#125;,</div><div class="line">        &quot;name&quot; : &quot;age_1&quot;,</div><div class="line">        &quot;ns&quot; : &quot;test.students&quot;</div><div class="line">    &#125;</div><div class="line">]</div><div class="line">//后台执行创建索引</div><div class="line">&gt; db.students.ensureIndex(&#123;class:1&#125;,&#123;background:true&#125;);</div><div class="line">&#123;</div><div class="line">    &quot;createdCollectionAutomatically&quot; : false,</div><div class="line">    &quot;numIndexesBefore&quot; : 2,</div><div class="line">    &quot;numIndexesAfter&quot; : 3,</div><div class="line">    &quot;ok&quot; : 1</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>索引可以是任何类型的字段，甚至是文档<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&gt; db.factories.insert(&#123;name:&quot;wwl&quot;,addr:&#123;city:&quot;BJ&quot;,state:&quot;BJ&quot;&#125;&#125;);</div><div class="line">//在addr列创建索引</div><div class="line">&gt; db.factories.ensureIndex(&#123;addr:1&#125;);</div><div class="line">//查询一会用到索引，查询二不会用到(顺序不一致)</div><div class="line">查询一:db.factories.find(&#123;addr:&#123;city:&quot;BJ&quot;,state:&quot;BJ&quot;&#125;&#125;);</div><div class="line">查询二:db.factories.find(&#123;addr:&#123;state:&quot;BJ&quot;,city:&quot;BJ&quot;&#125;&#125;);</div></pre></td></tr></table></figure></p>
<p>组合索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.factories.ensureIndex(&#123;&quot;addr.city&quot;:1,&quot;addr.state&quot;:-1&#125;);</div></pre></td></tr></table></figure></p>
<p>唯一索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.factories.ensureIndex(&#123;name:&quot;wwl&quot;&#125;,&#123;unique:true&#125;);</div></pre></td></tr></table></figure></p>
<p>强制索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.t5.find(&#123;age:&#123;$lt:5&#125;&#125;).hint(&#123;name:1,age:1&#125;).explain();</div></pre></td></tr></table></figure></p>
<p>删除索引<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//删除所有索引</div><div class="line">db.factories.dropIndexes();</div><div class="line">//指定删除</div><div class="line">db.factories.drop(&#123;addr:1&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[揪心的玩笑与漫长的白日梦]]></title>
      <url>http://yoursite.com/2016/09/13/song2/</url>
      <content type="html"><![CDATA[<p>万青的歌似乎都还可以，倒不是说音乐性有多好，我也不是专业的，品味可能是差了点，好在无人问津。这首歌主要就是<code>记起我曾身藏利刃,是谁来自山川湖海,却囿于昼夜厨房与爱</code>,让我联想起了朴树的平凡之路，感觉上似乎是经历了人情百态世间冷暖后的彻悟，其实是狗屁不通的。好像有同感的少年，为赋新词强说愁，你特么那里穿过山河大海，穿过人山人海了，你特么有哪里身藏利刃，哪里来自山川湖海了。一条泥鳅，滚了一身世俗的泥巴，洋洋自得的在一片小水洼里，指着龙门说，我不喜欢追求功利，不像那些个鲤鱼跃跃欲试的去变成龙，我和龙也就差那一个门的距离呢，众所周知我是能跳的，你们这些小锦鲤，sometimes naive！<br>刚可耻的看了你的名字，新海诚的作品。着实的不太感冒，甚至说本能的抵触这类作品。原因很简单，我既没有一个与之对应的心灵相通的人，所以所谓的代入感也只是意淫而已。我无法，也无法体会，有一个与你相爱的人，不是因为钱，不是因为你好看，更不是要和你做羞羞的事（当然，这只是一部分），就是单纯的像在摩挲自己的身体一样，爱惜，这简直就是一个成年男人在唧唧歪歪的想想一具具年轻的肉体，是多麽纯粹啊。如果有这么一个人的话，或者说真的有这样一对人的话。上帝还真是眷顾他们呢。<br>我可怜我自己。因为我感到难受。</p>
<a id="more"></a>
<blockquote><p>溜出时代银行的后门<br>撕开夜幕和喑哑的平原<br>越过淡季森林和电<br>牵引我们黑暗的心<br>在愿望的最后一个季节<br>解散清晨还有黄昏<br>在愿望的最后一个季节<br>记起我曾身藏利刃<br>是谁来自山川湖海<br>却囿于昼夜厨房与爱<br>来到自我意识的边疆<br>看到父亲坐在云端抽烟<br>他说孩子去和昨天和解吧<br>就像我们从前那样<br>用无限适用于未来的方法<br>置换体内星辰河流<br>用无限适用于未来的方法<br>热爱聚合又离散的鸟群<br>是谁来自山川湖海<br>却囿于昼夜厨房与爱<br>是谁来自山川湖海<br>却囿于昼夜厨房与爱<br>就在一瞬间<br>就在一瞬间握紧我矛盾密布的手</p>
<footer><strong>万能青年旅店</strong><cite>揪心的玩笑与漫长的白日梦</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=386829&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[南澜掌]]></title>
      <url>http://yoursite.com/2016/09/13/song1/</url>
      <content type="html"><![CDATA[<p>我依稀记得很久之前看过一部电视剧，是讲知青下乡，留情留种后，留下的子女返程寻找亲人的故事。这歌本来其实跟这个没什么关系，只不过那个电视剧片尾会唱‘美丽的西双版纳，留不住我的爸爸，上海那么大，有没有我的家，爸爸一个家，妈妈一个家，剩下我自己，好像是多余的。’<br>我虽然不是这种家庭，说起来也感觉惭愧。但是<code>好像是多余的</code>，这种情绪真的是，怎么说，<code>于我有戚戚焉</code>。</p>
<a id="more"></a>
<blockquote><p>傣语旁白：很久很久以前 有一条河流<br>河流边上住着勤劳质朴的傣族人民<br>他们在这里繁衍生息 并把这条河称之为“南澜掌”。</p>
<p>你可知道有个很远 很远 很远 很远的地方<br>那里的人儿很善良 那里是我的故乡<br>蓝的天 白的云<br>一条河将村村寨寨 轻轻柔柔地怀抱</p>
<p>风带走了沙 雨带来花 看江水慢慢的流呀<br>走了很久很久的路 想看看那个地方<br>蓝蓝的天 白的云<br>还有依咩向我注视 充满温暖的眼光</p>
<p>星星它会照亮我 回家的路<br>星星静静守护着 流淌的河<br>幸福可让你仰望 遥不可得<br>我把心愿种在了 这个地方</p>
<p>星星它会照亮我 回家的路<br>星星静静守护着 流淌的河<br>幸福可让你仰望 遥不可得<br>幸福其实在身旁 在南澜掌</p>
<p>星星它会照亮我 回家的路<br>星星静静守护着 流淌的河<br>幸福可让你仰望 遥不可得<br>幸福其实在身旁 在南澜掌</p>
<footer><strong>曹方</strong><cite>南澜掌</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=208904&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MongoDB-1]]></title>
      <url>http://yoursite.com/2016/09/12/mangodb0/</url>
      <content type="html"><![CDATA[<h2 id="MongoDB实战1"><a href="#MongoDB实战1" class="headerlink" title="MongoDB实战1"></a>MongoDB实战1</h2><hr>
<p>传统关系数据库,难以定义表结构：</p>
<ul>
<li>先定义最低限度必要字段，需要再添加（更改表结构）：反复变更表结构</li>
<li>事先定义魔术字段，按需采用</li>
<li>数据序列化：序列化和反序列化带来额外开销，序列化的数据无法直接读取</li>
</ul>
<p>MongoDB（面向文档型数据库）:</p>
<ul>
<li>不需要定义表结构，以BSON形式保存数据</li>
<li>表：集合；记录：文档</li>
<li>变更时无需考虑程序和表结构不一直问题</li>
<li>容易扩展（数据库升级-买更好的机器；扩展-数据分散到更多的机器上）可以自动在多台服务器间分散数据，并且可以平衡集群和负载</li>
<li>支持更多的功能：通用辅助索引（多种快速查询，复合的地理空间索引）；存储JavaScript；支持MapReduce等聚合工具；固定集合（大小有上限）；文件存储（支持一种易用的协议存储大型文件和元数据）</li>
<li>性能卓越，使用自带的传输协议，对文档动态填充，用空间换取性能</li>
<li>管理简单</li>
<li><strong>不支持JOIN和事务处理</strong></li>
<li><strong>创建和更新数据不会实时写入硬盘</strong></li>
<li><strong>保存数据预留很大空间，对硬盘空间需求呈逐渐增大趋势</strong></li>
</ul>
<p>安装要求</p>
<ul>
<li>Linux要求glibc版本为2.5以上</li>
<li>32bit版本数据库文件不得超过2G</li>
<li>偶数为稳定版本，奇数为开发版本</li>
</ul>
<p>安装 </p>
<ul>
<li><a href="www.mongodb.org">下载</a></li>
<li>设置存放目录：<code>tar zxvf</code>,<code>mkdir</code>,<code>mv</code></li>
<li>设置数据文件目录和日至目录：<code>mkdir -p /data/db</code>,<code>mkdir -p /Apps/mongo/logs/</code>,<code>touch /Apps/mongo/logs/mongodb.log</code></li>
<li>启动服务：<code>/Apps/mongo/bin/mongod --dbpath=/data/db --logpath=/Apps/mongo/logs/mongodb.log</code>,服务默认端口为27017,默认HTTP接口28017</li>
<li>设置开机启动：<code>vi /etc/rc.local</code>,添加<code>/Apps/mongo/bin/mongod --dbpath=/data/db --logpath=/Apps/mongo/logs/mongodb.log</code></li>
<li>客户端连接验证：打开中端，输入<code>/Apps/mongo/bin/mongo</code>;查看日志：<code>cd /Apps/mongo/logs</code></li>
<li>配置文件方式启动：<code>cat /etc/mongodb.cnf</code>,<code>dbpath=/data/db/</code>,<code>./mongod -f /etc/mongodb.cnf</code></li>
<li>Daemon方式启动：加上<code>--fork</code>参数，并且加上该参数必须也启用<code>--logpath</code></li>
</ul>
<p>源代码中，参数分为一般参数、windows参数、replication参数、replica set参数及隐含参数。隐含参数不建议生产使用。MongoDB使用os mmap机制缓存数据文件，自身不提供缓存机制。数据量超过内存写入不太稳定。<br>主要参数：</p>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>内容</th>
</tr>
</thead>
<tbody>
<tr>
<td>dbpath</td>
<td>数据文件存放目录，每个数据库会在该目录下创建子目录，确保目录存在且有访问权限</td>
</tr>
<tr>
<td>Logpath</td>
<td>错误日志文件</td>
</tr>
<tr>
<td>logappend</td>
<td>错误日志采用追加方式</td>
</tr>
<tr>
<td>bind_ip</td>
<td>对外服务绑定IP，一般为空</td>
</tr>
<tr>
<td>port</td>
<td>对外服务端口，Web管理端口在此数值基础上加1000</td>
</tr>
<tr>
<td>fork</td>
<td>后台方式运行服务</td>
</tr>
<tr>
<td>journal</td>
<td>开启日志功能保存操作日志</td>
</tr>
<tr>
<td>syncdelay</td>
<td>系统同步刷新硬盘时间，单位为秒，默认60</td>
</tr>
<tr>
<td>directoryperdb</td>
<td>每个db存放单独目录，与MySql独立表空间类似</td>
</tr>
<tr>
<td>maxConns</td>
<td>最大连接数</td>
</tr>
<tr>
<td>repairpath</td>
<td>执行repair时的临时目录，若未开启journal，异常重启必须执行repair</td>
</tr>
</tbody>
</table>
<p>停止数据库</p>
<ul>
<li>若处在连接状态：<code>use admin;</code>,<code>db.shutdownServer();</code></li>
<li><code>kill -2 PID</code>,或者<code>kill -15 PID</code>（<code>kill -9 PID</code>可能导致数据损坏）</li>
</ul>
<p>增删改查(JavaScript Shell)</p>
<ul>
<li><code>./mongo --help</code>查看连接参数，默认连接本机localhost上的test库</li>
<li><code>use mydb;</code></li>
<li>创建对象<code>j = {name:&quot;mongo&quot;};</code>,保存对象db.things.save(j);查看对象<code>db.things.find();</code>,<code>find</code>只显示10条，想继续查看，输入<code>it</code></li>
<li>不需要预先创建集合，文档可以存任一结构数据插入数据会有一个ID：<code>_id</code>,主键，默认为<code>ObjectId</code>,可自定义，`db.c1.insert({_id:3,name:”bill”,age:”22”}),MongoDB原生不支持自增主键</li>
<li>修改：<code>db.things.update({name:&quot;bill&quot;},{$set:{name:&quot;billnew&quot;}});</code></li>
<li>删除：<code>db.things.remove({name:&quot;bill&quot;});</code></li>
<li>插入数据支持<code>for</code>:<code>for ( var i = 1;i &lt; 10; i++) db.things.save({x:4,j:i});</code></li>
<li>查询：<code>var cursor = db.things.find();while (cursor.hasNext()) printjson(cursor.next());</code></li>
<li><code>db.things.find().forEach(printjson);</code>:注意内存溢出</li>
<li>迭代方式查询：<code>var arr = db.things.find().toArray();arr[5];</code></li>
<li>条件查询：<code>db.things.find({name:&quot;bill&quot;}).forEach(printjson);</code>,<code>db.things.find({name:&quot;bill&quot;},{j:true}).forEach(printjson);</code></li>
<li>findOne():<code>printjson(db.things.findOne({name:&quot;bill&quot;}));</code></li>
<li>限制结果集数量：<code>db.things.find().limit(3);</code></li>
</ul>
<p>高级查询</p>
<table>
<thead>
<tr>
<th>查询</th>
<th>代码</th>
</tr>
</thead>
<tbody>
<tr>
<td>条件查询(&gt; &lt; &gt;= &lt;=)</td>
<td><code>db.collection.find({&quot;field&quot;:{$gt:value}}); lt,gte,lte,支持链式</code></td>
</tr>
<tr>
<td>匹配所有</td>
<td><code>db.users.find({age:{$all:[6,8]}});</code></td>
</tr>
<tr>
<td>判断是否存在</td>
<td><code>db.users.find({age:{$exists:true}});</code></td>
</tr>
<tr>
<td>Null处理</td>
<td><code>db.c2.find({age:{&quot;$in&quot;:[null],&quot;exists&quot;:true}});</code></td>
</tr>
<tr>
<td>取模运算</td>
<td><code>db.student.find({age:{$mod:[10,1]}});</code></td>
</tr>
<tr>
<td>不等于</td>
<td><code>db.things.find({x:{$ne:3}});</code></td>
</tr>
<tr>
<td>包含</td>
<td><code>db.c1.find({age:{$in:[2,3,4]}});</code></td>
</tr>
<tr>
<td>不包含</td>
<td><code>db.c1.find({age:{$nin:[2,3,4]}});</code></td>
</tr>
<tr>
<td>数组元素个数</td>
<td><code>db.users.find({favorite:{$size:3}});</code></td>
</tr>
<tr>
<td>正则匹配</td>
<td><code>db.users.find({name:{$not:/^B.*/}});</code></td>
</tr>
<tr>
<td>JavaScript查询</td>
<td><code>db.c1.find({a:{$gt:3}});</code>,<code>db.c1.find({$where:&quot;this.a&gt;3&quot;});</code>,<code>db.c1.find(&quot;this.a&gt;3&quot;);</code>,<code>f=func(){return this.a&gt;3;} db.c1.find(f);</code></td>
</tr>
<tr>
<td>查询记录数</td>
<td><code>db.users.find().count();</code>,<code>db.users.find().skip(10).limit(5).count();</code></td>
</tr>
<tr>
<td>限制返回记录起点</td>
<td><code>db.users.find().skip(3).limit(3);</code></td>
</tr>
<tr>
<td>排序</td>
<td><code>db.users.find().sort({age:1});</code>,<code>db.users.find().sort({age:-1});</code></td>
</tr>
<tr>
<td>游标</td>
<td><code>for(var c=db.t3.find();c.hasNext();){printjson(c.next());}</code>,<code>db.t3.find().forEach(function(u){printjson(u);});</code></td>
</tr>
</tbody>
</table>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[NOT BRAVE ANY MORE]]></title>
      <url>http://yoursite.com/2016/09/09/song0/</url>
      <content type="html"><![CDATA[<p>所谓的过生活 一辈子他都在躲。一直在躲一直在躲 没有出口没有出口。</p>
<p>讽刺的是，这歌是我喜欢的姑娘推荐的。<br>我一想到我喜欢的姑娘在想另外一个野汉子，心都碎了。</p>
<a id="more"></a>
<blockquote><p>又忍着失望的不解的痛恨的 又只用空瓶把今天砸碎<br>然后又哭着对离开了自己的影子道歉<br>别气了没有谁再跟你作对 别哭了没有谁会心碎<br>没有勇敢的人</p>
<p>你卖光了一切 你的肝和你的肺<br>他们扔了你的世界 去成为更好的人类<br>那廉价的眼泪就别挂在嘴边<br>什么也没改变 什么也不改变</p>
<p>请别举起手枪 这里没有反抗的人<br>不用再围墙 这里没有反抗的人<br>反抗的人</p>
<p>你卖光了一切 你的肝和你的肺<br>他们扔了你的世界 去成为更好的人类<br>那廉价的眼泪就别挂在嘴边<br>什么也没改变 什么也不改变</p>
<footer><strong>草东没有派对</strong><cite>勇敢的人</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=410801745&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一个人]]></title>
      <url>http://yoursite.com/2016/09/09/poetry1/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<blockquote><p>一个人<br>就这么一人<br>一夜又一夜<br>走在路上<br>我把最快的那部份<br>写信寄给你<br>你有了新的吃穿你可以忘了他<br>当对岸灯火昏黄的小酒馆打烊的时候<br>喜拉雅山南麓的丛林里<br>千百万片树叶正在缓缓滑落<br>你熟悉它们的每道伤口<br>你熟悉它们的每道伤口<br>一个人<br>就这么一人<br>一夜又一夜<br>走在路上<br>我把最快的那部份<br>写信寄给你<br>你有了新的吃穿你可以忘了他<br>当对岸灯火昏黄的小酒馆打烊的时候<br>喜拉雅山南麓的丛林里<br>千百万片树叶正在缓缓滑落<br>你熟悉它们的每道伤口<br>你熟悉它们的每道伤口<br>每道伤口<br>从明天起<br>雨季来临<br>一天又一天<br>没有太阳</p>
<footer><strong>张玮玮和郭龙</strong><cite>一个人</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=26494705&auto=1&height=66"></iframe>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[片刻的闲暇]]></title>
      <url>http://yoursite.com/2016/09/09/something2/</url>
      <content type="html"><![CDATA[<h2 id="不见不问不听不想"><a href="#不见不问不听不想" class="headerlink" title="不见不问不听不想"></a>不见不问不听不想</h2><hr>
<p>牙疼，终于拔了。<br>陶笛一直吹不好，不熟练是一方面，总感觉没有情感。吹出来的声音像是机械的，听着让人燥热。理想的声音应该是风，不是干冷的风，是那种你想感受又抓不着的，眯着眼睛的时候，她会轻轻抚摸你的那种，只触碰到你的毛发，并不会解渴。<br>我吹的是温暖而幼稚的玩意，确让自己不安定，着实难过。吐音和节奏把握不好，腹式呼吸也不行。看来还是一项长期工程。<br>素描好歹是开始画调子了。起码不在画，或者说只画几何体了。想到我曾将傻乎乎的四四方方的玩意给姑娘看，隔着屏幕我都感到了对方的不屑与嘲笑，尤其还是一个我喜欢的姑娘。上次有这种感觉，还是小时候被别人扒裤子的时候。以后绝不轻易给别人说，看某些东西。真是廉价的孤芳自赏呢。</p>
<p>打电话给母亲，明显感觉到一丝急促，匆匆了事，‘我儿子，搁北京呢。’</p>
<p>文字永远跟不上思想。<br>身边的人，包括我在内，都在慢慢变得干瘪，死气沉沉，偶尔的亢奋也像是回光返照一样。<br>最可笑的是笑到最后那个人，可笑的笑了那么久。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[域名CNAME解析设置]]></title>
      <url>http://yoursite.com/2016/09/08/domain0/</url>
      <content type="html"><![CDATA[<h2 id="域名CNAME解析"><a href="#域名CNAME解析" class="headerlink" title="域名CNAME解析"></a>域名CNAME解析</h2><hr>
<p>别名（<strong>CNAME</strong>）解析允许你将多个域名映射到同一台计算机。例如你在Github上搭建的静态博客，地址为<code>yourusername.github.io</code>,你可以将自己的域名（假设为<code>www.yourusername.com</code>,）映射到这个地址上,别人访问<code>www.yourusername.com</code>时就直接访问到你的博客了。</p>
<p>一般一个域名记录在申请后有两个服务(均指向<code>host.yourdomain.com</code>)：</p>
<ul>
<li>WWW: www.yourdomain.com</li>
<li>Mail: mail.yourdomain.com </li>
</ul>
<a id="more"></a>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><ol>
<li>登陆管理控制台（我的是万网）</li>
<li>找到你的云解析或者域名栏目，进入记录页</li>
<li>点击要解析的域名，进入解析记录页</li>
<li>添加解析</li>
<li>类型为CNAME，主机记录任意填写（空着最好），记录值填写你要解析的地址：</li>
</ol>
<ul>
<li>如你的Github博客地址，你可以<code>ping</code>以下获得IP，之后把IP填写到这</li>
<li>或者你自己搭建了VPS，则填写你的VPS对外服务的地址</li>
</ul>
<ol>
<li>解析线路TTL默认</li>
<li>在自己的Github博客里添加文件，名称CNAME，内容为你的域名地址，万事俱备了</li>
<li>稍等片刻（说是片刻，万网说需要48小时）测试一下吧。</li>
</ol>
<hr>
<p>内容来源于<a href="https://help.aliyun.com/knowledge_detail/39788.html" target="_blank" rel="external">阿里云（万网）</a>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hexo 自定义主题样式]]></title>
      <url>http://yoursite.com/2016/09/07/hexo0/</url>
      <content type="html"><![CDATA[<h2 id="Hexo博客主题NexT使用自定义的CSS样式"><a href="#Hexo博客主题NexT使用自定义的CSS样式" class="headerlink" title="Hexo博客主题NexT使用自定义的CSS样式"></a>Hexo博客主题NexT使用自定义的CSS样式</h2><hr>
<h2 id="添加样式支持"><a href="#添加样式支持" class="headerlink" title="添加样式支持"></a>添加样式支持</h2><p>为了不吧原先的像是文件搞得太乱，这里，添加子集的样式文件。<br>首先，在next主题目录下样式文件的<code>source</code>文件夹下找到<code>css</code>文件夹，打开<code>main.styl</code>文件，在最后添加：</p>
<a id="more"></a>
<figure class="highlight plain"><figcaption><span>css</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">//My Layer</div><div class="line">//--------------------------------------------------</div><div class="line">@import &quot;_my/mycss&quot;;</div></pre></td></tr></table></figure>
<h2 id="新建自定义样式"><a href="#新建自定义样式" class="headerlink" title="新建自定义样式"></a>新建自定义样式</h2><p>找到样式文件夹<code>css</code>新建_my文件夹，在其中新建<code>mycss.styl</code>文件，之后就可以按照stylus的格式自定义样式了。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>例如：我想在文章中添加个自定义样式的按钮，怎么做呢？？？</p>
<p>打开新建的<code>mycss.styl</code>文件，在其中添加样式：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.myButton</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#0f94bd</span>;</div><div class="line">    <span class="attribute">-moz-border-radius</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">-webkit-border-radius</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">border-radius</span>:<span class="number">15px</span>;</div><div class="line">    <span class="attribute">display</span>:inline-block;</div><div class="line">    <span class="attribute">cursor</span>:pointer;</div><div class="line">    <span class="attribute">color</span>:<span class="number">#ffffff</span>;</div><div class="line">    <span class="attribute">font-family</span>:Arial;</div><div class="line">    <span class="attribute">font-size</span>:<span class="number">17px</span>;</div><div class="line">    <span class="attribute">padding</span>:<span class="number">11px</span> <span class="number">27px</span>;</div><div class="line">    <span class="attribute">text-decoration</span>:none;</div><div class="line">    <span class="attribute">text-shadow</span>:<span class="number">0px</span> <span class="number">1px</span> <span class="number">0px</span> <span class="number">#2f6627</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.myButton</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">    <span class="attribute">background-color</span>:<span class="number">#5cbf2a</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.myButton</span><span class="selector-pseudo">:active</span> &#123;</div><div class="line">    <span class="attribute">position</span>:relative;</div><div class="line">    <span class="attribute">top</span>:<span class="number">1px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>(ps:这里直接使用的css的格式写的，因为css的代码在网上很好找到，而stylus预处理器的就不那么容易找到了，stylus一样支持css格式，所以在这里直接使用了css文件，没有写成stylus语法。其实让我写我也不会，哈哈！)<br>引用：在想要引用的时候添加<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"myButton"</span>&gt;</span>MyButton<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><p>推荐一个css button样式的生成网站：<a href="http://www.bestcssbuttongenerator.com/" target="_blank" rel="external">Button Generator</a></p>
<hr>
<p>文章转载自<a href="http://blog.magicer.xyz/2015/10/hexo-custom-style/" target="_blank" rel="external">Magicer</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[琐碎]]></title>
      <url>http://yoursite.com/2016/09/07/something1/</url>
      <content type="html"><![CDATA[<h2 id="标题是什么鬼，都说了是琐事"><a href="#标题是什么鬼，都说了是琐事" class="headerlink" title="标题是什么鬼，都说了是琐事"></a>标题是什么鬼，都说了是琐事</h2><p>最开始是想用Jekyll自己搞一个静态博客的，无奈才疏学浅，搞了半天，很丑陋，像一个待字闺中的老姑娘，惆怅的紧。不过好歹是自己亲生的，修修补补，就是不舍得删掉，或者东拼西凑，这个主题COPY点，那个主题COPY点，这心情就像是姑娘家学别人打扮，各种化学试剂，瓶瓶罐罐，毫不含糊的往家搬，除了获得了些许的‘外交胜利’式的错觉，没有任何改观（其实是底子薄）。不过我还是不愿意承认是因为自己审美差导致的，嗯，是我技术不行，谁让我笨呢是吧，一定是我生孩子的方式不对。<br>这其中我就邂逅了几个，美观有余，优雅不足。或者中看不中用，或者庸脂俗粉，充分体现了人民群众的低俗乐趣。反观我自己弄的破玩意，对比之下似乎还有那么一丝朴素在里面（这真的不是敝帚自珍）。<br>扭头我就把她抛弃了（始乱终弃，这次第，怎一个愁字了得），投入了Hexo的怀抱当中，调教调教，其实也不是啥难事儿。好歹搞得稍微不同一点（虽然只有那么一丁点），省的我有种隔壁老王的错觉。<br>最近几个月说来并不开心，我就是个别扭的人，既瞧不起大部分人，庸庸碌碌，然而我却是他们的一份子。既看不上大部分人浪费了自己的天分，把时间浇灌在人情往来中，沉迷于破烂的虚假繁荣的嬉戏中，沉迷于貌似漫无边际实则空洞干涸网络中，自己又无可奈何的害怕逃离，无法远离人群，即便是克制，自省，也做不成那深林里细嗅蔷薇的猛虎。了不起是条土狗，中华田园犬，没有血统，不值钱。侬晓得回字有四种写法呢。<br>健身花费了大部分时间，自己的Evernote也零零散散的做着笔记，大部分内容短小的，这个死了，那个没了的。偶尔也发几句牢骚。莺莺燕燕的事真是没有，可遇不可求，求之不得寤寐思服啊。<br>或者该上进一点，该多学些东西，起码要画要唱吧。我至今还记得我小学毕业的时候，班主任给我的评价是多面手。<br>这个评价现在想想，还真是高。</p>
<p>PS：我特别喜欢落网的一期音乐 <a href="http://www.luoo.net/music/840?sid=16658" target="_blank" rel="external"><strong>停下来看看世界的风景</strong></a>,听着真年轻啊。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 3]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme2/</url>
      <content type="html"><![CDATA[<h2 id="Part-3-Wrapping-up-with-Disqus-comments-Google-Analytics-and-the-widgets"><a href="#Part-3-Wrapping-up-with-Disqus-comments-Google-Analytics-and-the-widgets" class="headerlink" title="Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets"></a>Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</h2><hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 2]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme1/</url>
      <content type="html"><![CDATA[<h2 id="Part-2-Finishing-up-the-remaining-pages"><a href="#Part-2-Finishing-up-the-remaining-pages" class="headerlink" title="Part 2: Finishing up the remaining pages"></a>Part 2: Finishing up the remaining pages</h2><hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Create a Hexo Theme 1]]></title>
      <url>http://yoursite.com/2016/09/07/hexotheme0/</url>
      <content type="html"><![CDATA[<h2 id="Part-1-Setting-up-the-project-and-creating-the-blog’s-main-index-page"><a href="#Part-1-Setting-up-the-project-and-creating-the-blog’s-main-index-page" class="headerlink" title="Part 1: Setting up the project and creating the blog’s main index page"></a>Part 1: Setting up the project and creating the blog’s main index page</h2><hr>
<p>In this multi part tutorial, you will learn how to create an Hexo Theme from scratch. I really love Hexo and use it everyday; unfortunately, as of today, the documentation for theme creation is pretty slim. Here is my attempt at fixing that.</p>
<a id="more"></a>
<h3 id="LINKS-TO-OTHER-SECTIONS"><a href="#LINKS-TO-OTHER-SECTIONS" class="headerlink" title="LINKS TO OTHER SECTIONS"></a>LINKS TO OTHER SECTIONS</h3><hr>
<ul>
<li>Part 1: Setting up the project and creating the blog’s main index pages</li>
<li>Part 2: Finishing up the remaining pages</li>
<li>Part 3: Wrapping up with Disqus comments, Google Analytics and the widgets</li>
</ul>
<h3 id="PREREQUISITES"><a href="#PREREQUISITES" class="headerlink" title="PREREQUISITES"></a>PREREQUISITES</h3><hr>
<ul>
<li>The very basics of blogging with hexo. If you are completely new, check the getting started guide on hexo.io.</li>
<li>Some knowledge of Bootstrap</li>
<li>Some knowledge of a JavaScript templating engine (we will use EJS)</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[小巷]]></title>
      <url>http://yoursite.com/2016/09/07/poetry0/</url>
      <content type="html"><![CDATA[<h2 id="小巷"><a href="#小巷" class="headerlink" title="小巷"></a>小巷</h2><hr>
<a id="more"></a>
<blockquote><p>小巷<br>又弯又长<br>没有门<br>没有窗<br>我拿把旧钥匙<br>敲着厚厚的墙</p>
<footer><strong>顾城</strong><cite>小巷</cite></footer></blockquote>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL5.7.9密码重置]]></title>
      <url>http://yoursite.com/2016/09/07/database1/</url>
      <content type="html"><![CDATA[<h2 id="MySQL忘记密码"><a href="#MySQL忘记密码" class="headerlink" title="MySQL忘记密码"></a>MySQL忘记密码</h2><hr>
<ol>
<li>修改my.cnf</li>
</ol>
<ul>
<li><code>vi /etc/my.cnf</code>,添加<code>skip-grant-tables</code></li>
</ul>
<ol>
<li>重启数据库</li>
</ol>
<ul>
<li><code>service mysqld restart</code></li>
</ul>
<a id="more"></a>
<ol>
<li>连接数据库</li>
</ol>
<ul>
<li><code>mysql -u root</code></li>
</ul>
<ol>
<li>修改MySQL root用户的密码<br>三行命令分别如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">update mysql.user set authentication_string = password(&apos;123456&apos;) where user=&apos;root&apos; and Host = &apos;localhost&apos;;</div><div class="line">flush privileges;</div><div class="line">quit;</div></pre></td></tr></table></figure></li>
<li>恢复第一步中的修改</li>
</ol>
<ul>
<li><code>vi /etc/my.cnf</code>，删除<code>skip-grant-tables</code></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[MySQL数据库错误]]></title>
      <url>http://yoursite.com/2016/09/07/database0/</url>
      <content type="html"><![CDATA[<h2 id="OperationalError-1366"><a href="#OperationalError-1366" class="headerlink" title="OperationalError 1366"></a>OperationalError 1366</h2><hr>
<p>在 <strong>Django</strong>连接数据库时发生这样的错误，此异常是 <strong>MySQL</strong>问题，而非 <strong>Python</strong>的问题，因类 <strong>MySQL</strong>的字段类型是<code>utf-xxx</code>，而在 <strong>MySQL</strong>中这些<code>utf-8</code>数据类型只能存储最多三个字节的字符，而存不了包含四个字节的字符。类似这样的错误，应该是数据库表的 <em>charset</em>和 <em>collation</em>问题。尝试把所有表的 <em>charset</em>改为<code>utf-8</code>,  <em>collation</em>改为<code>utf8-unicode-ci</code>。<br>如果还是不能解决，最好是重建数据库，然后设置数据库的属性，选择 <em>charset</em>为<code>utf-8</code>, <em>collation</em>为<code>utf8-unicode-ci</code>。<br>或者在MySQL命令行模式下，执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">create database cc default charset utf8 collate utf8_unicode_ci;</div></pre></td></tr></table></figure></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Django后台admin密码重置]]></title>
      <url>http://yoursite.com/2016/09/07/django0/</url>
      <content type="html"><![CDATA[<h2 id="Django管理控制台密码重置"><a href="#Django管理控制台密码重置" class="headerlink" title="Django管理控制台密码重置"></a>Django管理控制台密码重置</h2><hr>
<ol>
<li>进入到Django项目根目录，执行<code>python manage.py shell</code>(进入到Django Shell环境)</li>
<li>导入模块：<code>from django.contrib.auth.models import User</code></li>
<li>获取相应的用户名：<code>user = User.objects.get(username=&#39;admin&#39;)</code>(默认为admin，若在创建超级用户(<code>python manage.py createsuperuser</code>)时做过更改，则输入更改的用户名)</li>
<li>重置密码：<code>user.set_password(&#39;new_password&#39;)</code></li>
<li>保存更改:<code>user.save()</code></li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[影的告别]]></title>
      <url>http://yoursite.com/2016/09/06/something0/</url>
      <content type="html"><![CDATA[<h2 id="影的告别"><a href="#影的告别" class="headerlink" title="影的告别"></a>影的告别</h2><a id="more"></a>
<blockquote><p>影的告别<br>人睡到不知道时候的时候，就会有影来告别，说出那些话——<br>有我所不乐意的在天堂里，我不愿去；有我所不乐意的在地狱里，我不愿去；<br>有我所不乐意的在你们将来的黄金世界里，我不愿去。<br>然而你就是我所不乐意的。<br>朋友，我不想跟随你了，我不愿住。<br>我不愿意！<br>呜乎呜乎，我不愿意，我不如彷徨于无地。<br>我不过一个影，要别你而沉没在黑暗里了。<br>然而黑暗又会吞并我，然而光明又会使我消失。<br>然而我不愿彷徨于明暗之间，我不如在黑暗里沉没。<br>然而我终于彷徨于明暗之间，我不知道是黄昏还是黎明。我姑且举灰黑的手装作喝干一杯酒，我将在不知道时候的时候独自远行。<br>呜乎呜乎，倘若黄昏，黑夜自然会来沉没我，否则我要被白天消失，如果现是黎明。<br>朋友，时候近了。<br>我将向黑暗里彷徨于无地。<br>你还想我的赠品。我能献你甚么呢？无已，则仍是黑暗和虚空而已。<br>但是，我愿意只是黑暗，或者会消失于你的白天；我愿意只是虚空，决不占你的心地。<br>我愿意这样，朋友——<br>我独自远行，不但没有你，并且再没有别的影在黑暗里。只有我被黑暗沉没，那世界全属于我自己。</p>
<footer><strong>鲁迅</strong><cite>一九二四年九月二十四日</cite></footer></blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript复制]]></title>
      <url>http://yoursite.com/2016/09/06/JavaScript0/</url>
      <content type="html"><![CDATA[<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>看到网上的JavaScript代码带一个复制的小按键，好奇就把相关的代码段整理了一下。</p>
<a id="more"></a>
<ol>
<li>复制文本框内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function jsCopy()&#123;</div><div class="line">        var e = document.getElementById('content');</div><div class="line">        e.select();</div><div class="line">        document.execCommand('Copy');</div><div class="line">        alert('已复制内容到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'content'</span> <span class="attr">cols</span>=<span class="string">'50'</span> <span class="attr">rows</span>=<span class="string">'5'</span>&gt;</span></div><div class="line">Your fucking content.</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>复制网络地址 </li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>点击文本框复制内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>代码段来源于互联网,作者1： <a href="http://my.csdn.net/jin367411763,&#39;作者的CSDN博客地址&#39;" target="_blank" rel="external"><em>jin367411763</em></a>，作者2: <a href="http://www.cnblogs.com/tylerdonet/,&#39;作者的cnblogs地址&#39;" target="_blank" rel="external"><em>Tyler’s Blog</em></a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优先队列的堆实现]]></title>
      <url>http://yoursite.com/2016/09/06/PrioQueue1/</url>
      <content type="html"><![CDATA[<h2 id="优先队列的堆实现"><a href="#优先队列的堆实现" class="headerlink" title="优先队列的堆实现"></a>优先队列的堆实现</h2><hr>
<h3 id="堆及其性质"><a href="#堆及其性质" class="headerlink" title="堆及其性质"></a>堆及其性质</h3><ol>
<li>采用树形结构实现优先队列的一种有效技术成为 <strong>堆</strong>，节点数据的存储满足堆序。<ul>
<li>从根到任何一个叶节点，节点数据优先级递减</li>
<li>堆顶元素优先级最高，O(1)时间即可得到</li>
<li>位于不同路径上的元素，这里不关心其顺序</li>
</ul>
</li>
<li>几个重要性质<ul>
<li>在一个堆最后追加一个元素，依然是完全二叉树，但未必是堆</li>
<li>去掉堆顶，两个子堆上堆序不变</li>
<li>去掉堆顶的两个子堆加入根元素，未必是堆（堆序无法保证）</li>
<li>去掉堆中最后的元素，不破坏堆序</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueue</span><span class="params">()</span>:</span></div><div class="line">	<span class="string">'''</span></div><div class="line">	Implementing priority queues using heaps.</div><div class="line">	'''</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)</div><div class="line">		<span class="keyword">if</span> elist:</div><div class="line">			self.buildheap()</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in peek.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">0</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		self._elems.append(<span class="keyword">None</span>)</div><div class="line">		self.siftup(e,len(self._elems)<span class="number">-1</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftup</span><span class="params">(self,e,last)</span>:</span></div><div class="line">		elems,i,j = self._elems,last,(last<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		<span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; elems[j]:</div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j,(j<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in dequeue.'</span>)</div><div class="line">		elems  = self._elems</div><div class="line">		e0 = elems[<span class="number">0</span>]</div><div class="line">		e = elems.pop()</div><div class="line">		<span class="keyword">if</span> len(elems) &gt; <span class="number">0</span>:</div><div class="line">			self.siftdown(e,<span class="number">0</span>,len(elems))</div><div class="line">		<span class="keyword">return</span> e0</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftdown</span><span class="params">(self,e,begin,end)</span>:</span></div><div class="line">		elems,i,j = self._elems,begin,begin*<span class="number">2</span>+<span class="number">1</span></div><div class="line">		<span class="keyword">while</span> j &lt; end:</div><div class="line">			<span class="keyword">if</span> j+<span class="number">1</span> &lt; end <span class="keyword">and</span> elems[j+<span class="number">1</span>] &lt; elems[j]:</div><div class="line">				j += <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> e &lt; elems[j]:</div><div class="line">				<span class="keyword">break</span></div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j, <span class="number">2</span>*j+<span class="number">1</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">buildheap</span><span class="params">(self)</span>:</span></div><div class="line">		end = len(self._elems)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(end//<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">			self.siftdown(self._elems[i],i,end)</div></pre></td></tr></table></figure>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建操作</td>
<td>O(n)</td>
</tr>
<tr>
<td>插入和弹出元素</td>
<td>O(log n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[优先队列的连续列表实现]]></title>
      <url>http://yoursite.com/2016/09/06/PrioQueue0/</url>
      <content type="html"><![CDATA[<h2 id="优先队列的连续列表实现"><a href="#优先队列的连续列表实现" class="headerlink" title="优先队列的连续列表实现"></a>优先队列的连续列表实现</h2><hr>
<h3 id="两种实现方案"><a href="#两种实现方案" class="headerlink" title="两种实现方案"></a>两种实现方案</h3><ol>
<li>存储数据时保证元素的优先顺序，任何时候取元素都可以得到最高优先级（存入操作效率低，访问和弹出方便）</li>
<li>存入简单（顺序表存入表尾，链接表存入表头），取用时检索（存入效率高，访问弹出不便），如许多次访问统一元素但不弹出，则不采用此法，避免重复检索，或者记录要访问的元素位置。</li>
</ol>
<a id="more"></a>
<h3 id="代码（第一种方案）"><a href="#代码（第一种方案）" class="headerlink" title="代码（第一种方案）"></a>代码（第一种方案）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQue</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)           <span class="comment">#使用list转换：对实参拷贝防止共享；实参可以是任一迭代对象</span></div><div class="line">		self._elems = sort(reversed=<span class="keyword">True</span>)	  <span class="comment">#设置为较小的优先级高</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		i = len(self._elems) - <span class="number">1</span></div><div class="line">		<span class="keyword">while</span> i &gt;= <span class="number">0</span>:                       <span class="comment">#优先级相同的元素先进先出</span></div><div class="line">			<span class="keyword">if</span> self._elems[i] &lt;= e:</div><div class="line">				i -= <span class="number">1</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">break</span></div><div class="line">		self._elems.insert(i+<span class="number">1</span>,e)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in top.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">-1</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'No elem to pop.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems.pop()</div></pre></td></tr></table></figure>
<hr>
<h3 id="操作效率（复杂度）"><a href="#操作效率（复杂度）" class="headerlink" title="操作效率（复杂度）"></a>操作效率（复杂度）</h3><p><strong>方案1</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(n)</td>
</tr>
<tr>
<td>其他</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p><strong>方案2</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(1)，替换表存储空间需要O(n)时间</td>
</tr>
<tr>
<td>其他</td>
<td>O(n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[其他]]></title>
      <url>http://yoursite.com/2016/09/05/meeting/</url>
      <content type="html"><![CDATA[<h2 id="了解点概念"><a href="#了解点概念" class="headerlink" title="了解点概念"></a>了解点概念</h2><hr>
<ul>
<li>DNS流量分发</li>
<li>容器调度:HP Ku8 Mannager</li>
<li>功能测试，性能测试</li>
<li>资源需求，项目时间节点</li>
<li>WEB应用层，能力服务器，数据库，高可用</li>
</ul>
<hr>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[背包问题]]></title>
      <url>http://yoursite.com/2016/09/05/bagproblem/</url>
      <content type="html"><![CDATA[<h2 id="栈的应用其二：背包问题"><a href="#栈的应用其二：背包问题" class="headerlink" title="栈的应用其二：背包问题"></a>栈的应用其二：背包问题</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><ol>
<li><code>knap(weight,n)</code>表示n件物品的重量<ul>
<li>若不选最后一件物品(重量为W(n-1))，<code>knap(weight,n-1)</code>的解即为<code>knap(weight,n)</code>的解</li>
<li>若选择最后一件物品，若<code>knap(weight-W(n-1),n-1)</code>有解，其解加上最后一件物品就是<code>kanp(weight,n)</code>的解，即前者有解后者也有解</li>
</ul>
</li>
<li><p>递归的考虑问题，n件物品的背包问题可归结为两个n-1件物品的背包问题：</p>
<ul>
<li>同样重量，物品数量减一</li>
<li>减少重量，物品数量减一<a id="more"></a>
</li>
</ul>
</li>
<li><p>几种最简单的情况</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>重量</th>
<th>解情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于0</td>
<td>有解</td>
</tr>
<tr>
<td>小于0</td>
<td>无解</td>
</tr>
<tr>
<td>大于0且无物品可用</td>
<td>无解</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knap_rec</span><span class="params">(weight,wlist,n)</span>:</span></div><div class="line">    <span class="keyword">if</span> weight == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> weight &lt; <span class="number">0</span> <span class="keyword">or</span> (weight &gt;<span class="number">1</span> <span class="keyword">and</span> n&lt;<span class="number">1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight - wlist[n<span class="number">-1</span>], wlist, n - <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">'Item'</span> + str(n) + <span class="string">':'</span>,wlist[n - <span class="number">1</span>]</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight, wlist, n<span class="number">-1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">wlist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,]</div><div class="line">n = len(wlist)</div><div class="line">weight = <span class="number">10</span></div><div class="line"></div><div class="line">knap_rec(weight,wlist,n)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[简单的括号匹配]]></title>
      <url>http://yoursite.com/2016/09/05/stack/</url>
      <content type="html"><![CDATA[<h2 id="栈的应用其一：括号匹配"><a href="#栈的应用其一：括号匹配" class="headerlink" title="栈的应用其一：括号匹配"></a>栈的应用其一：括号匹配</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><p>未考虑引号和注释中的括号情况</p>
<ul>
<li>顺序扫描正文字符串，跳过无关字符</li>
<li>遇到开括号<code>(,[,{</code>则入栈</li>
<li>遇到闭括号<code>),],}</code>则弹出栈顶元素与之匹配</li>
<li>匹配成功则继续，否则失败结束</li>
</ul>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> stack_ <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkParens</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''括号配对检查函数，text为被检查的正文串'''</span></div><div class="line">    parens = <span class="string">'()[]&#123;&#125;'</span></div><div class="line">    openParens = <span class="string">'([&#123;'</span></div><div class="line">    opposite = &#123;<span class="string">')'</span>:<span class="string">'('</span>,<span class="string">']'</span>:<span class="string">'['</span>,<span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>&#125;        <span class="comment">#配对关系的字典</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parenstheses</span><span class="params">(text)</span>:</span></div><div class="line">        i,textLen = <span class="number">0</span>,len(text)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">while</span> i &lt; textLen <span class="keyword">and</span> text[i] <span class="keyword">not</span> <span class="keyword">in</span> parens:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i &gt;= textLen:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">yield</span> text[i],i</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">    st = SStack()                       <span class="comment">#保存括号的栈</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> pr,i <span class="keyword">in</span> parenstheses(text):     <span class="comment">#对text里各括号和位置迭代</span></div><div class="line">        <span class="keyword">if</span> pr <span class="keyword">in</span> openParens:            <span class="comment">#开括号压栈</span></div><div class="line">            st.push(pr)</div><div class="line">        <span class="keyword">elif</span> st.pop() != opposite[pr]:  <span class="comment">#不匹配退出</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'Unmatching is found at'</span>,i,<span class="string">'for'</span>,pr</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'All parentheses are correctly matched.'</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    </entry>
    
  
  
</search>
