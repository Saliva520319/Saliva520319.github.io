<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saliva&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-05-17T08:32:56.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Saliva</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>strace</title>
    <link href="http://yoursite.com/2017/05/12/linux2/"/>
    <id>http://yoursite.com/2017/05/12/linux2/</id>
    <published>2017-05-12T02:57:49.000Z</published>
    <updated>2017-05-17T08:32:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>strace命令是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。 strace的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值。</p>
<p>来自: <a href="http://man.linuxde.net/strace" target="_blank" rel="external">http://man.linuxde.net/strace</a><br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;strace命令是一个集诊断、调试、统计与一体的工具，我们可以使用strace对应用的系统调用和信号传递的跟踪结果来对应用进行分析，以达到解决问题或者是了解应用工作过程的目的。当然strace与专业的调试工具比如说gdb之类的是没法相比的，因为它不是一个专业的调试器。 strace的最简单的用法就是执行一个指定的命令，在指定的命令结束之后它也就退出了。在命令执行的过程中，strace会记录和解析命令进程的所有系统调用以及这个进程所接收到的所有的信号值。&lt;/p&gt;
&lt;p&gt;来自: &lt;a href=&quot;http://man.linuxde.net/strace&quot;&gt;http://man.linuxde.net/strace&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python 模块之 Click</title>
    <link href="http://yoursite.com/2017/02/13/click/"/>
    <id>http://yoursite.com/2017/02/13/click/</id>
    <published>2017-02-13T13:15:11.000Z</published>
    <updated>2017-02-14T00:16:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>与optparse和argparse类似，使用更方便，采用装饰器的方式生效。</p>
<a id="more"></a>
<h2 id="示例一"><a href="#示例一" class="headerlink" title="示例一"></a>示例一</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#! _*_coding:utf-8_*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> click</div><div class="line"></div><div class="line"><span class="comment">#为函数提供命令行接口</span></div><div class="line"><span class="meta">@click.command()</span></div><div class="line"><span class="comment">#选项参数，默认值，帮助文档</span></div><div class="line"><span class="meta">@click.option('--count',default=1,help='Number of greetings.')</span></div><div class="line"><span class="comment">#prompt为不提供参数时的提示</span></div><div class="line"><span class="meta">@click.option('--name',prompt='Your name',help='The person to greet.')</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(count,name)</span>:</span></div><div class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> range(count):</div><div class="line"><span class="comment">#click.echo为了获取更好的兼容性</span></div><div class="line">        click.echo(<span class="string">'Hello %s!'</span> % name)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    hello()</div></pre></td></tr></table></figure>
<h2 id="示例二"><a href="#示例二" class="headerlink" title="示例二"></a>示例二</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与optparse和argparse类似，使用更方便，采用装饰器的方式生效。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python获取文件路径</title>
    <link href="http://yoursite.com/2017/01/02/file-path/"/>
    <id>http://yoursite.com/2017/01/02/file-path/</id>
    <published>2017-01-02T06:31:56.000Z</published>
    <updated>2017-01-02T12:32:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sys-argv-0"><a href="#sys-argv-0" class="headerlink" title="sys.argv[0]"></a>sys.argv[0]</h2><p>返回值可能是一个相对路径，所以再取一下<code>abspath</code>是保险的做法。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"><span class="keyword">import</span> os</div><div class="line"><span class="keyword">import</span> sys</div><div class="line">path_to_script, filename = os.path.split(os.path.abspath(sys.argv[<span class="number">0</span>]))</div><div class="line"><span class="keyword">print</span> <span class="string">"running from"</span>, path_to_script</div><div class="line"><span class="keyword">print</span> <span class="string">"file is"</span>, filename</div></pre></td></tr></table></figure>
<h2 id="file"><a href="#file" class="headerlink" title="__file__"></a>__file__</h2><ul>
<li>按相对路径./test.py来执行，则打印得到的是相对路径;</li>
<li>按绝对路径执行则得到的是绝对路径;</li>
<li>而按用户目录来执行（~/practice/test.py），则得到的也是绝对路径（~被展开）;</li>
<li>所以为了得到绝对路径，我们需要 os.path.realpath(<strong>file</strong>)。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;sys-argv-0&quot;&gt;&lt;a href=&quot;#sys-argv-0&quot; class=&quot;headerlink&quot; title=&quot;sys.argv[0]&quot;&gt;&lt;/a&gt;sys.argv[0]&lt;/h2&gt;&lt;p&gt;返回值可能是一个相对路径，所以再取一下&lt;code&gt;abspath&lt;/code&gt;是保险的做法。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python optparse</title>
    <link href="http://yoursite.com/2017/01/02/CLI/"/>
    <id>http://yoursite.com/2017/01/02/CLI/</id>
    <published>2017-01-02T02:06:50.000Z</published>
    <updated>2017-01-02T03:30:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>一些python程序需要在命令行执行，并接收参数，选项，optparse和argparse就是Python标准库提供的用于编写CLI执行的应用程序的工具。</p>
<h2 id="optparse"><a href="#optparse" class="headerlink" title="optparse"></a>optparse</h2><p>适用范围：全部Python版本（Python2.6、Python3.0 ~ Python3.2只有optparse,2.7和3.3以上才有argparse）。<br>optparse已经不会有后续开发，所以应尽早迁移到argparse当中。</p>
<h3 id="示例一："><a href="#示例一：" class="headerlink" title="示例一："></a>示例一：</h3><a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="string">"""该脚本接收任意数量的参数，并转换成大写，参数之间添加空格"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"><span class="comment">#模块直接运行的时候__name__的值为__main__</span></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    <span class="comment">#创建一个实例</span></div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    <span class="comment">#调用方法，选项（以-或者--开头）被置于options中，剩下的为位置参数</span></div><div class="line">    <span class="comment">#置于args中。类型为列表，以连字符开头的都被识别为选项，无法识别时会</span></div><div class="line">    <span class="comment">#导致异常，并且无法捕获</span></div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">print</span> <span class="string">' '</span>.join(args).upper()</div></pre></td></tr></table></figure>
<h3 id="示例二：带有选项的脚本"><a href="#示例二：带有选项的脚本" class="headerlink" title="示例二：带有选项的脚本"></a>示例二：带有选项的脚本</h3><p>位置参数太多时候，信息并不直观，选项是一个很好的方案。并且：</p>
<ul>
<li>可以设置为可选，默认值</li>
<li>选项可以设置名称，说明，提升可读性</li>
<li>多个选项可以任意顺序排列组合</li>
</ul>
<p>选项有两种类型</p>
<ol>
<li>开关（标记）如–verbose和–quiet，这种类型不需要接收值</li>
<li>参数赋值，如–host，–port等</li>
</ol>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    <span class="comment">#使用add_option为实例添加选项，分别追加了长格式和短格式选项；</span></div><div class="line">    <span class="comment">#action不设置则脚本接收值，设置为store_true或者store_false则意味不需要值</span></div><div class="line">    <span class="comment">#如果提供了值，则为True或者False；</span></div><div class="line">    <span class="comment">#dest设置选项的名称；help设置帮助文本，默认自动添加了--help选项，可以查看帮助信息</span></div><div class="line">    parser.add_option(<span class="string">'-q'</span>,<span class="string">'--quiet'</span>,</div><div class="line">                      action=<span class="string">'store_true'</span>,</div><div class="line">                      dest=<span class="string">'quiet'</span>,</div><div class="line">                      help=<span class="string">'Suppress output.'</span>,</div><div class="line">                     )</div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">print</span> <span class="string">' '</span>.join(args).upper()</div></pre></td></tr></table></figure>
<h3 id="另一个例子"><a href="#另一个例子" class="headerlink" title="另一个例子"></a>另一个例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    parser.add_option(<span class="string">'-H'</span>,<span class="string">'--host'</span>,default=<span class="string">'localhost'</span>,dest=<span class="string">'host'</span>,help=<span class="string">'The host to connect to.Defaults to localhost.'</span>,type=str,)</div><div class="line">    parser.add_option(<span class="string">'-p'</span>,<span class="string">'--port'</span>,default=<span class="number">5432</span>,dest=<span class="string">'port'</span>,help=<span class="string">'The port to connect to.Defaults to 5432.'</span>,type=int,)</div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">print</span> <span class="string">'The host is %s.\nThe port is %d.'</span> % (options.host,options.port)</div></pre></td></tr></table></figure>
<h3 id="短格式和长格式语法"><a href="#短格式和长格式语法" class="headerlink" title="短格式和长格式语法"></a>短格式和长格式语法</h3><p><em>短格式</em> 值和选项可以紧挨着也可以有空格，并且可以把值包在引号内。<br>以下四种都是合法的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python script.py -H localhost</div><div class="line">$ python script.py -H <span class="string">"localhost"</span></div><div class="line">$ python script.py -Hlocalhost</div><div class="line">$ python script.py -H<span class="string">"localhost"</span></div></pre></td></tr></table></figure></p>
<p><em>长格式</em> 选项和值之间必须有分隔符（空格或者等号）。<br>以下四种都是合法的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ python script.py --host localhost</div><div class="line">$ python script.py --host=localhost</div><div class="line">$ python script.py --host <span class="string">"localhost"</span></div><div class="line">$ python script.py --host=<span class="string">"localhost"</span></div></pre></td></tr></table></figure></p>
<h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>没有附加选项的参数均被认为是位置参数。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="string">"""对所有提供的位置参数求和"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">print</span> <span class="string">'The sum of the numbers sent is : %d '</span> % sum([int(i) <span class="keyword">for</span> i <span class="keyword">in</span> args])</div></pre></td></tr></table></figure>
<h3 id="计数器"><a href="#计数器" class="headerlink" title="计数器"></a>计数器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="string">"""计算特定选项的次数"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    <span class="comment">#-c -c 和-cc是一样的</span></div><div class="line">    parser.add_option(<span class="string">'-c'</span>,action=<span class="string">'count'</span>,default=<span class="number">0</span>,dest=<span class="string">'count'</span>,help=<span class="string">'Just count the numbers of the options "-c".'</span>)</div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">print</span> <span class="string">'The total number is %d'</span> % options.count</div></pre></td></tr></table></figure>
<h3 id="列表值"><a href="#列表值" class="headerlink" title="列表值"></a>列表值</h3><p>对同一个选项，接收多个值并以列表方式提供给脚本。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="string">"""打印用户名，每次一个"""</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> optparse</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    parser = optparse.OptionParser()</div><div class="line">    parser.add_option(<span class="string">'-u'</span>,<span class="string">'--user'</span>,action=<span class="string">'append'</span>,default=[],dest=<span class="string">'users'</span>,help=<span class="string">'The username to printed.Provide this multiple times to print the username for multiple users.'</span>)</div><div class="line">    options,args = parser.parse_args()</div><div class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> options.users:</div><div class="line">        <span class="keyword">print</span> <span class="string">'Username: %s'</span> % user</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一些python程序需要在命令行执行，并接收参数，选项，optparse和argparse就是Python标准库提供的用于编写CLI执行的应用程序的工具。&lt;/p&gt;
&lt;h2 id=&quot;optparse&quot;&gt;&lt;a href=&quot;#optparse&quot; class=&quot;headerlink&quot; title=&quot;optparse&quot;&gt;&lt;/a&gt;optparse&lt;/h2&gt;&lt;p&gt;适用范围：全部Python版本（Python2.6、Python3.0 ~ Python3.2只有optparse,2.7和3.3以上才有argparse）。&lt;br&gt;optparse已经不会有后续开发，所以应尽早迁移到argparse当中。&lt;/p&gt;
&lt;h3 id=&quot;示例一：&quot;&gt;&lt;a href=&quot;#示例一：&quot; class=&quot;headerlink&quot; title=&quot;示例一：&quot;&gt;&lt;/a&gt;示例一：&lt;/h3&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Nginx基本配置</title>
    <link href="http://yoursite.com/2017/01/01/nginx/"/>
    <id>http://yoursite.com/2017/01/01/nginx/</id>
    <published>2017-01-01T14:32:10.000Z</published>
    <updated>2017-01-02T03:21:07.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="高层配置"><a href="#高层配置" class="headerlink" title="高层配置"></a>高层配置</h2><p>这部分处在配置文件模块前方，属于全局配置</p>
<ul>
<li><code>user</code>和<code>pid</code>基本不修改;</li>
<li><code>worker_processes</code>,设置为自动，最优值取决于许多因素（CPU核的数量、存储数据的硬盘数量及负载模式）等。<br>可将其设置为可用的CPU内核数（设置为“auto”将尝试自动检测它）;</li>
<li><code>worker_rlimit_nofile</code>更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的默认值。设置后Nginx可以处理更多的文件，这样nginx就不会有“too many open files”问题了。<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">user www-data;</div><div class="line">pid /var/run/nginx.pid;</div><div class="line">worker_processes auto;</div><div class="line">worker_rlimit_nofile 100000;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="events"><a href="#events" class="headerlink" title="events"></a>events</h2><ul>
<li><code>worker_connections</code>设置可由一个worker进程同时打开的最大连接数。如果设置了上面提到的worker_rlimit_nofile，我们可以将这个值设得很高,但是该数值也由系统的可用socket连接数限制（~ 64K），所以设置不切实际的高没有用处；</li>
<li><code>multi_accept</code>告诉nginx收到一个新连接通知后接受尽可能多的连接。</li>
<li><code>use</code>设置用于复用客户端线程的轮询方法。如果你使用Linux 2.6+，你应该使用<code>epoll</code>。如果你使用*BSD，你应该使用<code>kqueue</code>。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">worker_connections 2048;</div><div class="line">multi_accept on;</div><div class="line">use epoll;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><ul>
<li><code>server_tokens</code> `并不会让nginx执行的速度更快，它会关闭在错误页面中的nginx版本数字，这样对于安全性是有好处的；</li>
<li><code>sendfile</code>可以让sendfile()发挥作用。sendfile()可以在磁盘和TCP socket之间互相拷贝数据(或任意两个文件描述符)。Pre-sendfile是传送数据之前在用户空间申请数据缓冲区。之后用read()将数据从文件拷贝到这个缓冲区，write()将缓冲区数据写入网络。sendfile()是立即将数据从磁盘读到OS缓存。因为这种拷贝是在内核完成的，sendfile()要比组合read()和write()以及打开关闭丢弃缓冲更加有效;</li>
<li><p><code>tcp_nopush</code>使得nginx在一个数据包里发送所有头文件，而不一个接一个的发送;</p>
</li>
<li><p><code>tcp_nodelay</code>告诉nginx不要缓存数据，而是一段一段的发送：当需要及时发送数据时，就应该给应用设置这个属性，这样发送一小块数据信息时就不能立即得到返回值。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">server_tokens off;</div><div class="line">sendfile on;</div><div class="line">tcp_nopush on;</div><div class="line">tcp_nodelay on;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><code>access_log</code>设置nginx是否将存储访问日志。关闭这个选项可以让读取磁盘IO操作更快;</li>
<li><code>error_log</code>告诉nginx只能记录严重的错误。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">access_log off;</div><div class="line">error_log /var/log/nginx/error.log crit;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><code>keepalive_timeout</code>给客户端分配keep-alive链接超时时间。服务器将在这个超时时间过后关闭链接。我们将它设置低些可以让ngnix持续工作的时间更长;</li>
<li><code>client_header_timeout</code>和<code>client_body_timeout</code>设置请求头和请求体(各自)的超时时间。我们也可以把这个设置低些;</li>
<li><code>reset_timeout_connection</code>告诉nginx关闭不响应的客户端连接。这将会释放那个客户端所占有的内存空间;</li>
<li><code>send_timeout</code>指定客户端的响应超时时间。这个设置不会用于整个转发器，而是在两次客户端读取操作之间。如果在这段时间内，客户端没有读取任何数据，nginx就会关闭连接。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">keepalive_timeout 10;</div><div class="line">client_header_timeout 10;</div><div class="line">client_body_timeout 10;</div><div class="line">reset_timedout_connection on;</div><div class="line">send_timeout 10;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<p>limit_conn为给定的key设置最大连接数。这里key是addr，我们设置的值是100，也就是说我们允许每一个IP地址最多同时打开有100个连接。</p>
<p>limit_conn_zone设置用于保存各种key（比如当前连接数）的共享内存的参数。5m就是5兆字节，这个值应该被设置的足够大以存储（32K<em>5）32byte状态或者（16K</em>5）64byte状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">limit_conn_zone $binary_remote_addr zone=addr:5m;</div><div class="line">limit_conn addr 100;</div></pre></td></tr></table></figure></p>
<hr>
<ul>
<li><code>include</code>只是一个在当前文件中包含另一个文件内容的指令。这里我们使用它来加载稍后会用到的一系列的MIME类型;</li>
<li><code>default_type</code>设置文件使用的默认的MIME-type;</li>
<li><code>charset</code>设置我们的头文件中的默认的字符集。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">include /etc/nginx/mime.types;</div><div class="line">default_type text/html;</div><div class="line">charset UTF-8;</div></pre></td></tr></table></figure>
<hr>
<ul>
<li><code>gzip</code>是告诉nginx采用gzip压缩的形式发送数据,这将会减少发送的数据量;</li>
<li><code>gzip_disable</code>为指定的客户端禁用gzip功能。我们设置成IE6或者更低版本以使我们的方案能够广泛兼容;</li>
<li><code>gzip_static</code>告诉nginx在压缩资源之前，先查找是否有预先gzip处理过的资源。这要求你预先压缩你的文件（在这个例子中被注释掉了）,这样nginx就不用再压缩这些文件了;(static_gzip模块的作用就是在接到请求后，会到url相同的路径的文件系统去找扩展名为“.gz”的文件比如<code>http://www.chufengze.cn/stylesheets/homepage.css</code>,nginx就会先查找stylesheets/homepage.css.gz 这个文件，如果存在直接把它发送出去，如果不存在，再将stylesheets/homepage.css文件进行gzip压缩，再发送出去，这样可以避免重复的压缩无谓的消耗资源，这个模块不受gzip_types限制，会对所有请求有效。所以建议不要在全局上使用，因为一般来说大部分都是动态请求，是不会有.gz这个文件的，建议只在局部我们确认有.gz的目录中使用。Nginx不会自动的将压缩结果写入文件系统，这点不同于lighttpd，所以如果想使用static_gzip模块，需要自己写脚本生成.gz文件。)</li>
<li><code>gzip_proxied</code>允许或者禁止压缩基于请求和响应的响应流。我们设置为any，意味着将会压缩所有的请求;</li>
<li><code>gzip_min_length</code>设置对数据启用压缩的最少字节数。如果一个请求小于1000字节，我们最好不要压缩它，小于1k可能会越压越大,压缩这些小的数据会降低处理此请求的所有进程的速度;</li>
<li><code>gzip_comp_level</code>设置数据的压缩等级。这个等级可以是1-9之间的任意数值，9是最慢但是压缩比最大的。我们设置为4，这是一个比较折中的设置;</li>
<li><code>gzip_type</code>匹配MIME类型,设置需要压缩的数据格式。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">gzip_disable &quot;msie6&quot;;</div><div class="line"># gzip_static on;</div><div class="line">gzip_proxied any;</div><div class="line">gzip_min_length 1000;</div><div class="line">gzip_comp_level 4;</div><div class="line">gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><code>open_file_cache</code>打开缓存的同时也指定了缓存最大数目，以及缓存的时间。我们可以设置一个相对高的最大时间，这样我们可以在它们不活动超过20秒后清除掉;</li>
<li><code>open_file_cache_valid</code>在open_file_cache中指定检测正确信息的间隔时间;</li>
<li><code>open_file_cache_min_uses</code>定义了open_file_cache中指令参数不活动时间期间里最小的文件数;</li>
<li><code>open_file_cache_errors</code>指定了当搜索一个文件时是否缓存错误信息，也包括再次给配置中添加文件。我们也包括了服务器模块，这些是在不同文件中定义的。如果你的服务器模块不在这些位置，你就得修改这一行来指定正确的位置。<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"># cache informations about file descriptors, frequently accessed files</div><div class="line"># can boost performance, but you need to test those values</div><div class="line">open_file_cache max=100000 inactive=20s;</div><div class="line">open_file_cache_valid 30s;</div><div class="line">open_file_cache_min_uses 2;</div><div class="line">open_file_cache_errors on;</div><div class="line">##</div><div class="line"># Virtual Host Configs</div><div class="line"># aka our settings for specific servers</div><div class="line">##</div><div class="line">include /etc/nginx/conf.d/*.conf;</div><div class="line">include /etc/nginx/sites-enabled/*;</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;高层配置&quot;&gt;&lt;a href=&quot;#高层配置&quot; class=&quot;headerlink&quot; title=&quot;高层配置&quot;&gt;&lt;/a&gt;高层配置&lt;/h2&gt;&lt;p&gt;这部分处在配置文件模块前方，属于全局配置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;user&lt;/code&gt;和&lt;code&gt;pid&lt;/code&gt;基本不修改;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker_processes&lt;/code&gt;,设置为自动，最优值取决于许多因素（CPU核的数量、存储数据的硬盘数量及负载模式）等。&lt;br&gt;可将其设置为可用的CPU内核数（设置为“auto”将尝试自动检测它）;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;worker_rlimit_nofile&lt;/code&gt;更改worker进程的最大打开文件数限制。如果没设置的话，这个值为操作系统的默认值。设置后Nginx可以处理更多的文件，这样nginx就不会有“too many open files”问题了。
    
    </summary>
    
      <category term="服务器" scheme="http://yoursite.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Python copy和deepcopy</title>
    <link href="http://yoursite.com/2017/01/01/python2/"/>
    <id>http://yoursite.com/2017/01/01/python2/</id>
    <published>2017-01-01T13:52:30.000Z</published>
    <updated>2017-01-02T02:09:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>面试总是问，所以记录一下。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> copy</div><div class="line"><span class="comment">#分别查看赋值，copy,deepcopy和切片</span></div><div class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="number">6</span>,<span class="number">7</span>]]</div><div class="line"><span class="keyword">print</span> <span class="string">'原始的a\t\t'</span>,a,<span class="string">'\t'</span>,id(a)</div><div class="line">b = a</div><div class="line">c = copy.copy(a)</div><div class="line">d = copy.deepcopy(a)</div><div class="line">e = a[:]</div><div class="line"><span class="comment">#更改原始a</span></div><div class="line">a.append(<span class="string">'BINGO!'</span>)</div><div class="line">a[<span class="number">5</span>].append(<span class="string">'BINGO!'</span>)</div><div class="line"><span class="comment">#输出显示</span></div><div class="line"><span class="keyword">print</span> <span class="string">'改变的a\t\t'</span>,a,<span class="string">'\t'</span>,id(a)</div><div class="line"><span class="keyword">print</span> <span class="string">'赋值操作\t'</span>,b,<span class="string">'\t'</span>,id(b)</div><div class="line"><span class="keyword">print</span> <span class="string">'copy操作\t'</span>,c,<span class="string">'\t'</span>,id(c)</div><div class="line"><span class="keyword">print</span> <span class="string">'deepcopy\t'</span>,d,<span class="string">'\t'</span>,id(d)</div><div class="line"><span class="keyword">print</span> <span class="string">'切片操作\t'</span>,e,<span class="string">'\t'</span>,id(e)</div></pre></td></tr></table></figure>
<p><strong>赋值</strong> 的操作，ID是一样的；<br><strong>deepcopy</strong> 会保留最初始的a的信息，包括a的子对象（内嵌的list）；<br><strong>切片</strong> 与 <strong>copy</strong> 相同，子对象的信息会和原始列表a保持一致，也就是说会随之改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">原始的a         [1, 2, 3, 4, 5, [6, 7]]         4303299432</div><div class="line">改变的a         [1, 2, 3, 4, 5, [6, 7, &apos;BINGO!&apos;], &apos;BINGO!&apos;]     4303299432</div><div class="line">赋值操作        [1, 2, 3, 4, 5, [6, 7, &apos;BINGO!&apos;], &apos;BINGO!&apos;]     4303299432</div><div class="line">copy操作        [1, 2, 3, 4, 5, [6, 7, &apos;BINGO!&apos;]]       4303300944</div><div class="line">deepcopy        [1, 2, 3, 4, 5, [6, 7]]         4303300800</div><div class="line">切片操作        [1, 2, 3, 4, 5, [6, 7, &apos;BINGO!&apos;]]       4303301160</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;面试总是问，所以记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python生成器生产者消费者</title>
    <link href="http://yoursite.com/2017/01/01/python1/"/>
    <id>http://yoursite.com/2017/01/01/python1/</id>
    <published>2017-01-01T13:16:59.000Z</published>
    <updated>2017-01-01T13:51:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>通过生成器实现的生产者消费者模型。<br>没有用到多线程与多进程，协程异步就更没用到了。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">consumer</span><span class="params">()</span>:</span></div><div class="line">    msg = <span class="string">'Here'</span></div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        info = <span class="keyword">yield</span> msg</div><div class="line">        <span class="keyword">if</span> <span class="keyword">not</span> info:</div><div class="line">            <span class="keyword">return</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'[顾客] 吃第%s个煎饼，RUA！RUA!RUA!'</span> % info</div><div class="line">        time.sleep(<span class="number">2</span>)</div><div class="line">        msg = <span class="string">'吃完第%s个了。。'</span> % str(info)</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">producer</span><span class="params">(c)</span>:</span></div><div class="line">  start_consumer = c.next()</div><div class="line">  n = <span class="number">0</span></div><div class="line">  <span class="keyword">while</span> n &lt; <span class="number">5</span>:</div><div class="line">    n = n + <span class="number">1</span></div><div class="line">    <span class="keyword">if</span> n == <span class="number">5</span>:</div><div class="line">        <span class="keyword">print</span> <span class="string">'[厨师] 有完没完啊。不玩了！'</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'[厨师] 开始做第%s个煎饼...'</span> % n</div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'小伙子等一会啊。。。'</span></div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">    <span class="keyword">print</span> <span class="string">'做好嘞！接着！'</span></div><div class="line">    time.sleep(<span class="number">1</span>)</div><div class="line">    info = c.send(n)</div><div class="line">    <span class="keyword">print</span> <span class="string">'[顾客]说: %s'</span> % info</div><div class="line">    time.sleep(<span class="number">2</span>)</div><div class="line">  c.close()</div><div class="line">producer(consumer())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通过生成器实现的生产者消费者模型。&lt;br&gt;没有用到多线程与多进程，协程异步就更没用到了。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>莲花</title>
    <link href="http://yoursite.com/2016/12/27/song7/"/>
    <id>http://yoursite.com/2016/12/27/song7/</id>
    <published>2016-12-27T12:46:46.000Z</published>
    <updated>2016-12-27T12:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>好时光正在和你分享。<br>一种奇怪的味道。<br>组合粉碎了之后发展并不理想。<br>辨识度很高的嗓音，我非常喜欢，有点土，听起来感觉她像不会唱歌一样，但是听着就是很舒服。<br>与之相比，歌词是什么意味，到不重要了。</p>
<p>千万个人穿梭在我眼前，有点艾泽拉庞德的意思。</p>
<p><em>The apparition of these faces in the crowd;<br>Petals on a wet, black bough.</em><br><strong>人群中的脸忽隐忽现，湿漉漉的树干上花瓣点点。</strong></p>
<a id="more"></a>
<blockquote><p>千万颗星  飘向遥远天边<br>千万个人 穿梭在我的眼前<br>总不能说 感觉到了什么　什么<br>都不能说 我只有独自感觉<br>打开 莲花快打开<br>宝珠 就在它的里面<br>打开 莲花快打开<br>好时光正在和你分享<br>谁知道你要去向何方<br>好时光正在和你分享<br>到天亮你要去向何方<br>哦 这冲动 像花朵开向天空<br>没人能够体会 只有我看到那无限光辉<br>打开 莲花快打开<br>宝珠 就在它的里面<br>打开 莲花快打开<br>宝珠 你将要会看见<br>打开 莲花快打开<br>宝珠 你将要去发现<br>好时光正在和你分享<br>谁知道你要去向何方<br>好时光正在和你分享<br>到天亮你要去向何方</p>
<footer><strong>龙宽九段</strong><cite>莲花</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=363231&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好时光正在和你分享。&lt;br&gt;一种奇怪的味道。&lt;br&gt;组合粉碎了之后发展并不理想。&lt;br&gt;辨识度很高的嗓音，我非常喜欢，有点土，听起来感觉她像不会唱歌一样，但是听着就是很舒服。&lt;br&gt;与之相比，歌词是什么意味，到不重要了。&lt;/p&gt;
&lt;p&gt;千万个人穿梭在我眼前，有点艾泽拉庞德的意思。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The apparition of these faces in the crowd;&lt;br&gt;Petals on a wet, black bough.&lt;/em&gt;&lt;br&gt;&lt;strong&gt;人群中的脸忽隐忽现，湿漉漉的树干上花瓣点点。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python魔术方法</title>
    <link href="http://yoursite.com/2016/12/26/magicmethod/"/>
    <id>http://yoursite.com/2016/12/26/magicmethod/</id>
    <published>2016-12-26T12:12:12.000Z</published>
    <updated>2016-12-26T12:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python生成器</title>
    <link href="http://yoursite.com/2016/12/26/generator/"/>
    <id>http://yoursite.com/2016/12/26/generator/</id>
    <published>2016-12-26T12:11:50.000Z</published>
    <updated>2016-12-28T02:39:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<p>生成器只在需要时才计算序列中的值，节省了内存空间。<br>生成器是一个函数，单次执行，直到迭代终止，可以表示无限序列（通过一个while true语句）。<br>生成器通常是通过yield语句实现。yield不会终止函数执行，而是暂停函数，当调用next或者send方法触发生成器时，生成器则从暂停位置继续执行。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#无限斐波那契数列,如果你像我一样无聊的话，可以</span></div><div class="line"><span class="comment">#for i in fibonacci():print i 试一下刷屏的快感</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">()</span>:</span></div><div class="line">    numbers = []</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">      <span class="comment">#序列初始化，list里少于两个数就扔个1进去</span></div><div class="line">        <span class="keyword">if</span> len(numbers) &lt; <span class="number">2</span>:</div><div class="line">            numbers.append(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="comment">#求出下一个值</span></div><div class="line">            numbers.append(sum(numbers))</div><div class="line">            <span class="comment">#弹出前一个，保证numbers中只有两个值</span></div><div class="line">            numbers.pop(<span class="number">0</span>)</div><div class="line">        <span class="comment">#每次输出序列尾部的值，程序顺序执行，当遇到的第一个yield语句后，输出yield语句</span></div><div class="line">        <span class="comment">#输出值，然后就暂停了，yield之后的语句（该处为下次循环）直到下次用next者send</span></div><div class="line">        <span class="comment">#启动生成器才会执行（详见下一个例子）</span></div><div class="line">        <span class="keyword">yield</span> numbers[<span class="number">-1</span>]</div><div class="line"><span class="comment">#赋值指定两个生成器</span></div><div class="line">f = fibonacci()</div><div class="line">a = fibonacci()</div><div class="line"><span class="comment">#查看类型：generator，可以看出生成器还没有初始化，所以没有产生数值</span></div><div class="line"><span class="keyword">print</span> type(f)</div><div class="line"><span class="comment">#查看方法，我们只关心next,send,throw</span></div><div class="line"><span class="keyword">print</span> dir(f)</div><div class="line"><span class="comment">#这句与f.next()效果等同，都是相当于初始化生成器</span></div><div class="line"><span class="comment">#但是初始化生成器时，不能send一个no-None的值，否则会报出</span></div><div class="line"><span class="comment">#TypeError: can't send non-None value to a just-started generator</span></div><div class="line"><span class="keyword">print</span> f.send(<span class="keyword">None</span>)</div><div class="line"><span class="comment">#连续输出几个值看看</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</div><div class="line">  <span class="keyword">print</span> f.next(),</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="comment">#next不接受参数，否则会报</span></div><div class="line"><span class="comment">#TypeError: expected 0 arguments, got 1</span></div><div class="line"><span class="keyword">print</span> f.next()</div><div class="line"><span class="comment">#效果和上面一样</span></div><div class="line"><span class="keyword">print</span> f.send(<span class="keyword">None</span>)</div><div class="line"><span class="comment">#初始化后就可以随便send了（由于我们在生成器中没有接收传递进来的值，所以send什么都一样）</span></div><div class="line"><span class="keyword">print</span> f.send(<span class="number">1</span>)</div><div class="line"><span class="comment">#这句输出看得出来a,f是分开的</span></div><div class="line"><span class="keyword">print</span> a.next()</div><div class="line"><span class="keyword">print</span> f.next()</div></pre></td></tr></table></figure>
<p>尽量写了个能看出yield语句暂停位置的东西：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line">j = <span class="number">1</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fibonacci</span><span class="params">()</span>:</span></div><div class="line">    numbers = []</div><div class="line">    <span class="keyword">global</span> j</div><div class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">        <span class="keyword">if</span> len(numbers) &lt; <span class="number">2</span>:</div><div class="line">            numbers.append(<span class="number">1</span>)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            numbers.append(sum(numbers))</div><div class="line">            last = numbers.pop(<span class="number">0</span>)</div><div class="line">        j += <span class="number">1</span></div><div class="line">        <span class="keyword">print</span> <span class="string">'Before yield: '</span>,</div><div class="line">        <span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> numbers[:]],<span class="string">'yield output:'</span>,</div><div class="line">        <span class="keyword">yield</span> numbers[<span class="number">-1</span>]</div><div class="line">        <span class="keyword">print</span> <span class="string">'After yield:'</span>,</div><div class="line">        <span class="keyword">print</span> [i <span class="keyword">for</span> i <span class="keyword">in</span> numbers[:]]</div><div class="line">        <span class="comment">#print 'last number is %s' % numbers[-1]</span></div><div class="line"></div><div class="line">f = fibonacci()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</div><div class="line">    <span class="keyword">print</span> <span class="string">'\nOutput %s '</span> % j</div><div class="line">    <span class="keyword">print</span> f.next()</div></pre></td></tr></table></figure>
<p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">Output 1</div><div class="line">Before yield:  [1] yield output: 1</div><div class="line"></div><div class="line">Output 2</div><div class="line">After yield: [1]</div><div class="line">Before yield:  [1, 1] yield output: 1</div><div class="line"></div><div class="line">Output 3</div><div class="line">After yield: [1, 1]</div><div class="line">Before yield:  [1, 2] yield output: 2</div><div class="line"></div><div class="line">Output 4</div><div class="line">After yield: [1, 2]</div><div class="line"></div><div class="line">Before yield:  [2, 3] yield output: 3</div><div class="line"></div><div class="line">Output 5</div><div class="line">After yield: [2, 3]</div><div class="line">Before yield:  [3, 5] yield output: 5</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="http://yoursite.com/2016/12/26/contextmanager/"/>
    <id>http://yoursite.com/2016/12/26/contextmanager/</id>
    <published>2016-12-26T06:39:15.000Z</published>
    <updated>2016-12-27T13:40:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器的使用2---类装饰器</title>
    <link href="http://yoursite.com/2016/12/26/decorator0/"/>
    <id>http://yoursite.com/2016/12/26/decorator0/</id>
    <published>2016-12-26T00:55:28.000Z</published>
    <updated>2016-12-26T08:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<p>装饰器接受一个可调用的对象（函数，类）作为参数，返回一个可调用的对象（函数，类），所即既可以装饰类返回类，也可以装饰函数返回类。<br>类装饰器可以与被装饰类的属性交互，修改类的方法(包括私有方法)等。</p>
<p>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortable_by_creation_time</span><span class="params">(cls)</span>:</span></div><div class="line">  <span class="comment">#保留原始__init__方法，并追加_created属性</span></div><div class="line">  origin_init = cls.__init__</div><div class="line"><span class="meta">  @functools.wraps(origin_init)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_init</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    origin_init(self,*args,**kwargs)</div><div class="line">    <span class="comment">#仅设置该值没有用处，因为sort等函数无法识别。所以还要添加相应的方法</span></div><div class="line">    self._created = time.time()</div><div class="line">  cls.__init__ = new_init</div><div class="line">  <span class="comment">#添加小于和大于方法，如果cls本身已经拥有了__lt__和__gt__方法，则这两个方法</span></div><div class="line">  <span class="comment">#会被覆盖</span></div><div class="line">  cls.__lt__ = <span class="keyword">lambda</span> self,other:self._created &lt; other._created</div><div class="line">  cls.__gt__ = <span class="keyword">lambda</span> self,other:self._created &gt; other._created</div><div class="line">  <span class="keyword">return</span> cls</div><div class="line"><span class="comment">#有了__lt__和__gt__方法后，可以比较数值大小，也就可以被相关函数操作了。</span></div><div class="line"><span class="meta">@sortable_by_creation_time</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sortable</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,identifier)</span>:</span></div><div class="line">    self.identifier = identifier</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.identifier</div><div class="line">first = Sortable(<span class="string">'The first one.'</span>)</div><div class="line">second = Sortable(<span class="string">'The second one.'</span>)</div><div class="line">third = Sortable(<span class="string">'The third one.'</span>)</div><div class="line"><span class="comment">#开始是乱序</span></div><div class="line">sortables = [third,second,first]</div><div class="line"><span class="keyword">print</span> <span class="string">'Before =&gt; '</span>,sortables</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="comment">#排序后是升序</span></div><div class="line"><span class="keyword">print</span> <span class="string">'After =&gt; '</span>,sorted(sortables)</div></pre></td></tr></table></figure></p>
<p>上述装饰器的方法可以用mixin来实现，也很简单。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#定义mixin类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedByCreationTime</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self._created = time.time()</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self,other)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._created &lt; other._created</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self,other)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._created &gt; other._created</div><div class="line"><span class="comment">#使用多重继承为类添加方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sortable</span><span class="params">(SortedByCreationTime)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,identifier)</span>:</span></div><div class="line">    <span class="comment">#如果不添加这部分内容，私有属性将无法继承</span></div><div class="line">    <span class="comment">#SortedByCreationTime.__init__(self)</span></div><div class="line">    super(Sortable,self).__init__()</div><div class="line">    self.identifier = identifier</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.identifier</div><div class="line"><span class="comment">#测试</span></div><div class="line">first = Sortable(<span class="string">'The first one.'</span>)</div><div class="line">second = Sortable(<span class="string">'The second one.'</span>)</div><div class="line">third = Sortable(<span class="string">'The third one.'</span>)</div><div class="line">sortables = [third,second,first]</div><div class="line"><span class="keyword">print</span> <span class="string">'Before =&gt; '</span>,sortables</div><div class="line"><span class="keyword">print</span> dir(first)</div><div class="line"><span class="keyword">print</span> second &gt; third</div><div class="line"><span class="keyword">print</span> <span class="string">'After =&gt; '</span>,sorted(sortables)</div></pre></td></tr></table></figure></p>
<p>装饰器可以装饰一个函数，但是返回一个类，因为两者都是可调用的，并且可以将类理解为函数的更高层次。<br>类可以比函数定义更多内容。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'Subclasses must implement `run`.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'I am task .'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">TaskSubclass</span><span class="params">(Task)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="keyword">return</span> TaskSubclass</div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="number">4</span></div><div class="line">f = foo()</div><div class="line"><span class="keyword">print</span> f.run()</div><div class="line"><span class="comment">#调用变麻烦了</span></div><div class="line"><span class="keyword">print</span> foo().run()</div><div class="line"><span class="keyword">print</span> foo.identify()</div><div class="line"><span class="comment">#查看类型</span></div><div class="line"><span class="keyword">print</span> type(foo),type(foo())</div><div class="line"><span class="comment">#无法直接调用类，因为类中没有添加__call__方法</span></div><div class="line"><span class="keyword">print</span> foo()</div></pre></td></tr></table></figure>
<p>上述装饰器的改进版：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="comment">#追加了__call__方法，使得生成的类也可以直接调用，看起来更像函数了</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.run(*args,**kwargs)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'Subclasses must implement `run`.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'I am task .'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">TaskSubclass</span><span class="params">(Task)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="comment">#返回的是调用，即类的实例</span></div><div class="line">  <span class="keyword">return</span> TaskSubclass()</div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="number">4</span></div><div class="line">f = foo()</div><div class="line"><span class="comment">#可以像函数一样直接调用了</span></div><div class="line"><span class="keyword">print</span> foo()</div><div class="line"><span class="keyword">print</span> foo.identify()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python在Windows下编码错误</title>
    <link href="http://yoursite.com/2016/12/25/python0/"/>
    <id>http://yoursite.com/2016/12/25/python0/</id>
    <published>2016-12-25T02:35:58.000Z</published>
    <updated>2016-12-25T02:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows平台下，安装python模块时，报如下错误：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">UnicodeDecodeError: '<span class="title">ascii</span>' <span class="title">codec</span> <span class="title">can</span>'<span class="title">t</span> <span class="title">decode</span> <span class="title">byte</span> 0<span class="title">xd7</span> <span class="title">in</span> <span class="title">position</span> 9: <span class="title">ordinal</span> <span class="title">not</span> <span class="title">in</span> <span class="title">range</span>(128)</span></div></pre></td></tr></table></figure></p>
<p>解决办法：<br>修改 <em>mimetypes.py</em> 文件，路径位于python的安装路径下的 <em>Lib\mimetypes.py</em> 文件。<br>在 <em>import</em> 下添加如下几行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">'gbk'</span>:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(<span class="string">'gbk'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows平台下，安装python模块时，报如下错误：&lt;br&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Longing</title>
    <link href="http://yoursite.com/2016/12/24/song6/"/>
    <id>http://yoursite.com/2016/12/24/song6/</id>
    <published>2016-12-24T13:44:43.000Z</published>
    <updated>2017-01-01T13:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>应该是翻译做渴望吧。</p>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应该是翻译做渴望吧。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器的使用</title>
    <link href="http://yoursite.com/2016/12/24/decorator/"/>
    <id>http://yoursite.com/2016/12/24/decorator/</id>
    <published>2016-12-24T03:05:14.000Z</published>
    <updated>2016-12-25T15:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<h2 id="理解语法"><a href="#理解语法" class="headerlink" title="理解语法"></a>理解语法</h2><p>添加文档说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#书写装饰器，为函数添加说明</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_by</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="comment">#在函数文档说明后添加指定字段</span></div><div class="line">    func.__doc__ += <span class="string">'\nDecorated by decorated_by.'</span></div><div class="line">    <span class="keyword">return</span> func</div><div class="line"><span class="comment">#书写函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="comment">#文档说明，通过.__doc__方法查看</span></div><div class="line">    <span class="string">'''I'm add...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="string">'''I'm add_...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#分别测试</span></div><div class="line"><span class="comment">#原始add</span></div><div class="line">help(add)</div><div class="line"><span class="comment">#添加了装饰器的add_</span></div><div class="line">help(add_)</div><div class="line"><span class="comment">#修改了名称为add0，分别查看add和add0</span></div><div class="line">add0 = decorated_by(add)</div><div class="line">help(add0)</div><div class="line">help(add)</div></pre></td></tr></table></figure></p>
<p>获取被装饰函数相关参数，详见<a href="https://docs.python.org/2/reference/datamodel.html" target="_blank" rel="external">Python官方文档</a>-Code objects<br>这部分内容我也不是很理解。可以边看文档边用ipython之类的工具配合查看理解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#书写装饰器，为函数添加说明</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_by</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="comment">#在函数文档说明后添加指定字段</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'函数文档:'</span>,func.func_doc</div><div class="line">    <span class="keyword">print</span> <span class="string">'函数名称:'</span>,func.func_name</div><div class="line">    <span class="keyword">print</span> <span class="string">'参数个数'</span>,func.func_code.co_argcount</div><div class="line">    <span class="keyword">print</span> <span class="string">'函数code对象名称:'</span>,func.func_code.co_name</div><div class="line">    <span class="keyword">print</span> <span class="string">'code对象常量？'</span>,func.func_code.co_consts</div><div class="line">    <span class="keyword">print</span> <span class="string">'参数元组:'</span>,func.func_code.co_varnames</div><div class="line"><span class="comment">#书写函数</span></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="comment">#文档说明，通过.__doc__方法查看</span></div><div class="line">    <span class="string">'''I'm add...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">add(<span class="number">4</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>装饰器应用的顺序，自下而上(因为函数的解析是自内而外的)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="meta">@also_decorated_by</span></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="string">"""Return the sum of x and y."""</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#上面的表达方式与下面相同</span></div><div class="line">add = also_decorated_by(decorated_by(add))</div></pre></td></tr></table></figure></p>
<h2 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h2><p>例如静态方法<code>@staticmethod</code>和类方法<code>@classmethod</code>，单元测试mock模块的<code>@mock.path</code>和<code>@mock.path.object</code>。Web框架Django的<code>@login_required</code>(用户必须登录才能查看特定页面)和<code>@permission_required</code>(权限限制),Flask的<code>@app.route</code>,Celery的<code>@task</code>等。<br>装饰器显示的对函数进行前置和收尾工作，减少了代码的重复，并且增加了可读性。它主要应用在以下几个地方（<strong>主要</strong> 说的可能有些草率）：</p>
<ul>
<li>在被装饰函数之前或之后追加功能，如合法性检查，权限验证，记录函数结果等</li>
<li>预处理函数的参数（如改变格式），处理函数的返回值（如格式化输出JSON或XML等），附加参数等</li>
<li>函数的注册</li>
</ul>
<h2 id="装饰器的编写"><a href="#装饰器的编写" class="headerlink" title="装饰器的编写"></a>装饰器的编写</h2><p>函数装饰器（这里说函数装饰器是因为还有类装饰器）通常接受一个callable函数作为参数，返回一个可调用函数（注意，返回的可能不是那个函数了呦）。<br>示例一：函数注册表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line">registry = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(decorated)</span>:</span></div><div class="line">    <span class="comment">#注意列表添加的是函数对象，类型为fuction object</span></div><div class="line">    registry.append(decorated)</div><div class="line">    <span class="keyword">return</span> decorated</div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x,y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x * y</div><div class="line"><span class="comment">#确认列表里的对象是函数不是函数返回结果</span></div><div class="line"><span class="keyword">print</span> registry</div><div class="line"><span class="comment">#结果列表</span></div><div class="line">answers = []</div><div class="line"><span class="comment">#分别调用，批量执行注册表内的函数，并将结果追加到结果列表</span></div><div class="line"><span class="keyword">for</span> func <span class="keyword">in</span> registry:</div><div class="line">    answers.append(func(<span class="number">5</span>,<span class="number">3</span>))</div><div class="line"><span class="keyword">print</span> answers</div></pre></td></tr></table></figure></p>
<p>另一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Registry</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      self._functions = []</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self,decorated)</span>:</span></div><div class="line">      self._functions.append(decorated)</div><div class="line">      <span class="keyword">return</span> decorated</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_all</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      return_values = []</div><div class="line">      <span class="keyword">for</span> func <span class="keyword">in</span> self._functions:</div><div class="line">        return_values.append(func(*args,**kwargs))</div><div class="line">      <span class="keyword">return</span> return_values</div><div class="line"><span class="comment">#人机分离！</span></div><div class="line">a = Registry()</div><div class="line">b = Registry()</div><div class="line"></div><div class="line"><span class="meta">@a.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x=<span class="number">3</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="meta">@b.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x=<span class="number">5</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="meta">@a.register</span></div><div class="line"><span class="meta">@b.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span><span class="params">(x=<span class="number">7</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="comment">#查看各自结果</span></div><div class="line"><span class="keyword">print</span> a.run_all()</div><div class="line"><span class="keyword">print</span> b.run_all()</div><div class="line"><span class="comment">#赋值</span></div><div class="line"><span class="keyword">print</span> a.run_all(<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>示例二：类型检查<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#装饰器检查函数参数是否为整形</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_ints</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">replace_of_func</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#获取字典方式传入的参数</span></div><div class="line">    kwarg_values = [i <span class="keyword">for</span> i <span class="keyword">in</span> kwargs.values()]</div><div class="line">    <span class="comment">#判断所有参数值是不是整数</span></div><div class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> list(args) + kwarg_values:</div><div class="line">      <span class="keyword">if</span> <span class="keyword">not</span> isinstance(arg,int):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'%s only accepts intergers as arguments.'</span> % func.__name__)</div><div class="line">    <span class="comment">#参数没问题的话要返回func的计算值</span></div><div class="line">    <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="comment">#原始函数func已经被替换了</span></div><div class="line">  <span class="keyword">return</span> replace_of_func</div><div class="line"><span class="meta">@requires_ints</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#help命令已经暴露了，这个装饰器其实已经把原始func替换掉了，只不过是计算结果一致而已</span></div><div class="line">help(foo)</div><div class="line"><span class="comment">#查看错误输入和正确输入</span></div><div class="line"><span class="keyword">print</span> foo(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">foo(<span class="string">'1'</span>,<span class="string">'2'</span>)</div></pre></td></tr></table></figure></p>
<p>另一个例子，在上述代码的基础上,追加了<code>@functools.wraps(func)</code>,<code>help(foo)</code>返回结果则不同了，没有暴露出我们的狸猫换太子。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_ints</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="comment">#functools.wraps(func)接受了一个参数即func，并保存了帮助和文档字符串等内容</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">replace_of_func</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>示例三：用户验证</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#区分普通用户和匿名用户，并用__nonzero__私有方法做标识（返回False）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,username,email)</span>:</span></div><div class="line">    self.username = username</div><div class="line">    self.email = email</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousUser</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.username = <span class="keyword">None</span></div><div class="line">    self.email = <span class="keyword">None</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__nonzero__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_user</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(user,*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#判断非零和用户类型</span></div><div class="line">    <span class="keyword">if</span> user <span class="keyword">and</span> isinstance(user,User):</div><div class="line">    <span class="comment">#原书这里写的是func(user,*args,**kwargs)，我认为应该是func(*args,**kwargs),</span></div><div class="line">    <span class="comment">#因为原始func只接受两个参数，并不包含user。</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">return</span> ValueError(<span class="string">'A valid user is required to run this.'</span>)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#创建函数，并用help(foo)发现函数已经增加了一个参数</span></div><div class="line"><span class="meta">@requires_user</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">help(foo)</div><div class="line"><span class="comment">#创建类实例，来验证参数个数和异常</span></div><div class="line">usr1 = User(<span class="string">'name'</span>,<span class="string">'email'</span>)</div><div class="line"><span class="keyword">print</span> foo(usr1,<span class="number">7</span>,<span class="number">8</span>)</div><div class="line"><span class="keyword">print</span> foo(<span class="number">7</span>,<span class="number">8</span>)</div></pre></td></tr></table></figure>
<p>示例四：输出格式化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="comment">#序列化输出函数结果</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    result = func(*args,**kwargs)</div><div class="line">    <span class="keyword">return</span> json.dumps(result)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"><span class="comment">#测试</span></div><div class="line"><span class="keyword">print</span> do_nothing(),type(do_nothing())</div></pre></td></tr></table></figure>
<p>另一个例子:捕获特定异常并JSON输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment">#定义异常</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      result = func(*args,**kwargs)</div><div class="line">    <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">      result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">    <span class="keyword">return</span> json.dumps(result)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#可以针对特定异常进行处理（本处为JSONOutputError）</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">raise</span> JSONOutputError(<span class="string">'This function is erratic.'</span>)</div><div class="line"><span class="comment">#打印输出</span></div><div class="line"><span class="keyword">print</span> error()</div><div class="line"><span class="comment">#查看其他类型异常</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">other_error</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">raise</span> ValueError(<span class="string">'What is this.'</span>)</div><div class="line"><span class="keyword">print</span> other_error()</div></pre></td></tr></table></figure></p>
<p>示例五：日志管理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment">#配置默认日志输出目录和格式,日志位于/tmp/test.log</span></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">                    datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">                    filename=<span class="string">'/tmp/test.log'</span>,</div><div class="line">                    filemode=<span class="string">'w'</span>)</div><div class="line"><span class="comment">#定义装饰器函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#记录开始时间</span></div><div class="line">    start = time.time()</div><div class="line">    <span class="comment">#记录结果</span></div><div class="line">    return_value = func(*args,**kwargs)</div><div class="line">    <span class="comment">#记录结束时间并计算</span></div><div class="line">    end = time.time()</div><div class="line">    delta = end - start</div><div class="line">    <span class="comment">#使用默认的日志设置</span></div><div class="line">    logger = logging.getLogger()</div><div class="line">    logger.warn(<span class="string">'Called method %s at %.2f;execution time %.2f seconds;result %r.'</span> % (func.__name__,start,delta,return_value))</div><div class="line">    <span class="comment">#返回原始func的返回值</span></div><div class="line">    <span class="keyword">return</span> return_value</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="meta">@logged</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep_and_return</span><span class="params">(return_value)</span>:</span></div><div class="line">  time.sleep(<span class="number">2</span>)</div><div class="line">  <span class="keyword">return</span> return_value</div><div class="line"><span class="comment">#查看输出</span></div><div class="line"><span class="keyword">print</span> sleep_and_return(<span class="number">10</span>)</div><div class="line">os.system(<span class="string">'cat /tmp/test.log'</span>)</div></pre></td></tr></table></figure>
<h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>废话少说，放码过来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="comment">#添加参数的装饰器就是比普通的装饰器多了一层，外层负责接收参数，内层接收函数作为参数</span></div><div class="line"><span class="comment">#我的理解是，外层函数（这里是json_output）接收参数后，定向的返回了</span></div><div class="line"><span class="comment">#一个装饰器（这里是actual_decorator），这里定向是指针对所给的</span></div><div class="line"><span class="comment">#参数（indent=4）生成一个缩进4格的装饰器，然后actual_decorator就和普通装饰器</span></div><div class="line"><span class="comment">#做的工作一样，用另一个函数（这里是inner）去替代原始函数func，从而实现了带参数的效果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(indent=None,sort_keys=False)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">actual_decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        result = func(*args,**kwargs)</div><div class="line">      <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">        result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">      <span class="keyword">return</span> json.dumps(result,indent=indent,sort_keys=sort_keys)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">  <span class="keyword">return</span> actual_decorator</div><div class="line"><span class="comment">#注意，此时应用装饰器时，没有参数也必须调用（即@json_output()）,前文说了，这里调用相当于生成了</span></div><div class="line"><span class="comment">#actual_decorator装饰器，否则@json_output会报错,附加参数的效果</span></div><div class="line"><span class="comment">#相当于 json_output(参数)(do_nothing)，即actual_decorator(do_nothing)</span></div><div class="line"><span class="meta">@json_output(indent=4)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> do_nothing()，type(do_nothing())</div></pre></td></tr></table></figure></p>
<p>理想的装饰器应该是这样的：</p>
<ul>
<li><code>@json_output</code></li>
<li><code>@json_output()</code></li>
<li><code>@json_output(参数)</code><br>所以对上述代码作如下修改：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="comment">#前面都一样</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(decorated_=None,indent=None,sort_keys=False)</span>:</span></div><div class="line">  <span class="comment">#加了一层判断，不应该同时函数func和参数都给json_output,即json_output(func,indent,sort_keys)</span></div><div class="line">  <span class="keyword">if</span> decorated_ <span class="keyword">and</span> (indent <span class="keyword">or</span> sort_keys):</div><div class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">'Unexpected arguments.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">actual_decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        result = func(*args,**kwargs)</div><div class="line">      <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">        result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">      <span class="keyword">return</span> json.dumps(result,indent=indent,sort_keys=sort_keys)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">  <span class="comment">#加了一层判断，获得的参数是函数（即直接@json_output,相当于json_output(func)），</span></div><div class="line">  <span class="comment">#是函数则直接返回内层装饰器inner，否则照常返回actual_decorator</span></div><div class="line">  <span class="keyword">if</span> decorated_:</div><div class="line">    <span class="keyword">return</span> actual_decorator(decorated_)</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> actual_decorator</div><div class="line"></div><div class="line"><span class="comment">#仅测试不带调用,注意@json_output无括号调用，相当于decorated_ = do_nothing</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"><span class="keyword">print</span> do_nothing()，type(do_nothing())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://yoursite.com/2016/10/10/Graph0/"/>
    <id>http://yoursite.com/2016/10/10/Graph0/</id>
    <published>2016-10-10T00:46:20.000Z</published>
    <updated>2017-03-02T06:40:56.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念-amp-性质-amp-实现"><a href="#概念-amp-性质-amp-实现" class="headerlink" title="概念&amp;性质&amp;实现"></a>概念&amp;性质&amp;实现</h2><p>一个图是一个二元组<code>G=(V,E)</code>,其中：</p>
<ul>
<li>V是顶点集合，E是边集合， E ⊆ V × V</li>
<li><em>有向图</em>的边有方向，是顶点的有序对，<em>无向图</em>边无方向。（之后的 <em>有向边</em> 表示为尖括号，&lt; v<sub>i</sub>,v<sub>j</sub> &gt; 表示v<sub>i</sub>到v<sub>j</sub>的边，<em>无向边</em>用圆括号表示）</li>
<li>&lt; v<sub>i</sub>,v<sub>j</sub> &gt; ∈ E,v<sub>j</sub>为v<sub>i</sub>的邻接点(无向图的邻接点是双向的)，不考虑顶点到自身的边，无重复的边。</li>
<li><strong>完全图</strong>：任意两顶点之间都有边（有向图<code>n×(n-1)</code>,无向图<code>n×(n-1)/2</code>）|E|≦|V|<sup>2</sup>,即|E|=O(|V|<sup>2</sup>)</li>
<li>度：一个顶点邻接边的条数，有向图有入度和出度,边数等于所有顶点度数和的一半（有向图要同时算入度和出度）</li>
<li><strong>路径</strong>：沿着边（有向图边有方向）从一顶点v<sub>i</sub>到另一顶点v<sub>j</sub>的通路称为v<sub>i</sub>到v<sub>j</sub>的一条路径，长度为边的条数，环路指起点终点相同，若环路除了起点终点外都不同则称为<strong>简单回路</strong>，<strong>简单路径</strong>。</li>
<li><strong>有根图</strong>：图里的某一顶点到任意其他顶点都有路径，则该图为有根图，该顶点称为根</li>
</ul>
<table>
<thead>
<tr>
<th>ADT Graph</th>
<th>一个图的抽象数据类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>Graph(self)</td>
<td>图构造操作，创建一个新图</td>
</tr>
<tr>
<td>is_empty(self)</td>
<td></td>
</tr>
</tbody>
</table>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念-amp-性质-amp-实现&quot;&gt;&lt;a href=&quot;#概念-amp-性质-amp-实现&quot; class=&quot;headerlink&quot; title=&quot;概念&amp;amp;性质&amp;amp;实现&quot;&gt;&lt;/a&gt;概念&amp;amp;性质&amp;amp;实现&lt;/h2&gt;&lt;p&gt;一个图是一个二元组&lt;code&gt;G=(V,E)&lt;/code&gt;,其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V是顶点集合，E是边集合， E ⊆ V × V&lt;/li&gt;
&lt;li&gt;&lt;em&gt;有向图&lt;/em&gt;的边有方向，是顶点的有序对，&lt;em&gt;无向图&lt;/em&gt;边无方向。（之后的 &lt;em&gt;有向边&lt;/em&gt; 表示为尖括号，&amp;lt; v&lt;sub&gt;i&lt;/sub&gt;,v&lt;sub&gt;j&lt;/sub&gt; &amp;gt; 表示v&lt;sub&gt;i&lt;/sub&gt;到v&lt;sub&gt;j&lt;/sub&gt;的边，&lt;em&gt;无向边&lt;/em&gt;用圆括号表示）&lt;/li&gt;
&lt;li&gt;&amp;lt; v&lt;sub&gt;i&lt;/sub&gt;,v&lt;sub&gt;j&lt;/sub&gt; &amp;gt; ∈ E,v&lt;sub&gt;j&lt;/sub&gt;为v&lt;sub&gt;i&lt;/sub&gt;的邻接点(无向图的邻接点是双向的)，不考虑顶点到自身的边，无重复的边。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完全图&lt;/strong&gt;：任意两顶点之间都有边（有向图&lt;code&gt;n×(n-1)&lt;/code&gt;,无向图&lt;code&gt;n×(n-1)/2&lt;/code&gt;）|E|≦|V|&lt;sup&gt;2&lt;/sup&gt;,即|E|=O(|V|&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;度：一个顶点邻接边的条数，有向图有入度和出度,边数等于所有顶点度数和的一半（有向图要同时算入度和出度）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;路径&lt;/strong&gt;：沿着边（有向图边有方向）从一顶点v&lt;sub&gt;i&lt;/sub&gt;到另一顶点v&lt;sub&gt;j&lt;/sub&gt;的通路称为v&lt;sub&gt;i&lt;/sub&gt;到v&lt;sub&gt;j&lt;/sub&gt;的一条路径，长度为边的条数，环路指起点终点相同，若环路除了起点终点外都不同则称为&lt;strong&gt;简单回路&lt;/strong&gt;，&lt;strong&gt;简单路径&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;有根图&lt;/strong&gt;：图里的某一顶点到任意其他顶点都有路径，则该图为有根图，该顶点称为根&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;ADT Graph&lt;/th&gt;
&lt;th&gt;一个图的抽象数据类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Graph(self)&lt;/td&gt;
&lt;td&gt;图构造操作，创建一个新图&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is_empty(self)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>SED命令</title>
    <link href="http://yoursite.com/2016/10/04/linux1/"/>
    <id>http://yoursite.com/2016/10/04/linux1/</id>
    <published>2016-10-04T02:12:25.000Z</published>
    <updated>2016-10-10T00:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed [-nefri] &apos;command&apos; input_file  #注意，是单引号</div></pre></td></tr></table></figure>
<h2 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h2><table>
<thead>
<tr>
<th>选项</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>使用安静(silent)模式。在一般sed的用法中，所有来自STDIN的资料一般都会被列出到萤幕上。但如果加上该 参数后，则只有经过sed特殊处理的那一行(或者动作)才会被列出来。</td>
</tr>
<tr>
<td>-e</td>
<td>直接在指令列模式上进行 sed 的动作编辑</td>
</tr>
<tr>
<td>-f</td>
<td>直接将 sed 的动作写在一个档案内，-f filename 则可以执行filename内的sed动作</td>
</tr>
<tr>
<td>-r</td>
<td>sed的动作支援的是延伸型正则表示法的语法。</td>
</tr>
<tr>
<td>-i</td>
<td>直接修改读取的档案内容，而不是由萤幕输出。 </td>
</tr>
</tbody>
</table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>新增，a的后面可以接字串，而这些字串会在新的一行出现(当前行的下一行)</td>
</tr>
<tr>
<td>c</td>
<td>取代，c的后面可以接字串，这些字串可以取代n1,n2之间的行</td>
</tr>
<tr>
<td>d</td>
<td>删除，d后面通常不接任何内容</td>
</tr>
<tr>
<td>i</td>
<td>插入，i的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)</td>
</tr>
<tr>
<td>p</td>
<td>列印，亦即将某个选择的资料印出。通常p会与参数<code>-n</code>选项一起运作</td>
</tr>
<tr>
<td>s</td>
<td>取代，通常这个 s 的动作可以搭配正规表示法</td>
</tr>
</tbody>
</table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设当前目录下要操作的文件名为test：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">删除</div><div class="line">$ sed &apos;15d&apos; test             #删除15行内容</div><div class="line">$ sed &apos;$d&apos; test              #删除最后一行</div><div class="line">$ sed &apos;1,2d&apos; test              #删除第一行到第二行，</div><div class="line">$ sed &apos;2,$d&apos; test              #删除第二行到最后一行</div><div class="line">$ sed &apos;/My/,10d&apos; datafile     #删除包含&quot;My&quot;的行到第10行</div><div class="line"></div><div class="line">显示</div><div class="line">$ sed -n &apos;1p&apos; test             #显示第一行</div><div class="line">$ sed -n &apos;$p&apos; test             #显示最后一行</div><div class="line">$ sed -n &apos;1,2p&apos; test           #显示第一行和第二行，包含关系，即[1,2]f非(1，2]</div><div class="line">$ sed -n &apos;2,$p&apos; test           #显示第二行到最后一行</div><div class="line">查询</div><div class="line">$ sed -n &apos;/root/p&apos; test        #查询包括关键字root所在所有行</div><div class="line">$ sed -n &apos;/\$/p&apos; test          #查询包括关键字$所在所有行，使用反斜线转义</div><div class="line">增加</div><div class="line">$ sed &apos;1a something&apos; test               #第一行后增加字符串something，注意前面有空格</div><div class="line">$ sed &apos;1,3a something&apos; test             #第一行到第三行每行后都增加字符串something</div><div class="line">$ sed &apos;1a something\nor anothor&apos; test   #使用换行符\n追加多行</div><div class="line">替代</div><div class="line">$ sed &apos;1c Hi&apos; test                #第一行代替为Hi</div><div class="line">$ sed &apos;1,2c Hi&apos; test              #第一行到第二行的内容用Hi替代，即两行的内容现为一行</div><div class="line">$ sed &apos;s/ruby/bird/g&apos; test          #替换ruby为bird，会替换所有</div><div class="line">插入</div><div class="line">$ sed -i &apos;1a bye&apos; test            #在文件test中第一行后插入直接输入&quot;bye&quot;，会写入文件</div><div class="line">$ sed -i &apos;/matched_string/d&apos;  test      #删除匹配行，也就是说/matched_string/匹配结果是一整行</div><div class="line">$ sed -i &apos;/matchedstring/s/source_string/changed_string/g&apos; test #替换匹配行字串</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>反唱西游</title>
    <link href="http://yoursite.com/2016/10/03/song5/"/>
    <id>http://yoursite.com/2016/10/03/song5/</id>
    <published>2016-10-03T13:57:53.000Z</published>
    <updated>2017-01-01T13:01:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>我很喜欢这里面的乐器。</p>
<a id="more"></a>
<blockquote><p>男：唐僧取经西天还<br>一番阴谋归长安<br>棋盘为地子为天<br>唯独这猴王本性难缠</p>
<p>女：山高自有客行路<br>水深自有渡人船<br>辱者定碌碌<br>荣者自安安</p>
<p>男：八戒沙僧做神仙<br>悟空被如来的小鞋穿<br>五行山下五百年<br>水深自有渡他的船</p>
<p>合：山高自有客行路<br>水深自有渡人船<br>辱者定碌碌<br>荣者自安安</p>
<p>男：悟空怒打天宫乱<br>灰心拜师菩提仙<br>求得菩提解惑端<br>归隐花果山<br>化一石头了尘缘<br>不会机谋巧算<br>没荣辱步步生白莲</p>
<footer><strong>游园惊梦乐队</strong><cite>反唱西游</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29719520&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我很喜欢这里面的乐器。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python 批量生成变量</title>
    <link href="http://yoursite.com/2016/09/22/python/"/>
    <id>http://yoursite.com/2016/09/22/python/</id>
    <published>2016-09-22T01:41:37.000Z</published>
    <updated>2016-10-03T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本思想就是利用<code>locals()</code>字典生成特定的变量,如列表，字典等。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p,i <span class="keyword">in</span> enumerate(range(<span class="number">1</span>,<span class="number">11</span>)):</div><div class="line">    locals()[<span class="string">'l%i'</span>%(p+<span class="number">1</span>)] = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    locals()[<span class="string">'list'</span>+str(i)] = []</div><div class="line">    </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    a=<span class="string">'list%d=[]'</span>%i </div><div class="line"><span class="keyword">exec</span> a</div></pre></td></tr></table></figure>
<p>另小九九</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dict_ = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">    dict_[i]=<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</div><div class="line">        tmp = str(j)+<span class="string">'*'</span>+str(i)+<span class="string">'='</span>+str(j*i)</div><div class="line">        dict_[i] = dict_[i]+<span class="string">' '</span>+tmp</div><div class="line">    <span class="keyword">print</span> dict_[i]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本思想就是利用&lt;code&gt;locals()&lt;/code&gt;字典生成特定的变量,如列表，字典等。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>那朵花</title>
    <link href="http://yoursite.com/2016/09/21/song4/"/>
    <id>http://yoursite.com/2016/09/21/song4/</id>
    <published>2016-09-21T12:54:28.000Z</published>
    <updated>2016-09-21T13:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>实在是没什么说的。</p>
<a id="more"></a>
<blockquote><p>费了好几页<br>终于写完我们的心情<br>却不知为何<br>弥补不了空白的一行<br>夹上花样书签<br>和你乘着用完就扔的自行车<br>堆起快被人遗忘的砖头<br>却突然倒塌了</p>
<p>那逐渐将人拖向对等的<br>蓝得可怕的天空<br>玩累了的我们<br>一定不会再想起<br>现在就这样朝我这边<br>一束束阳光倾注而来<br>两个人明明仍近在咫尺<br>而我却祈求「愿能再次相遇」<br>好像脑袋短路了</p>
<p>在翻开新一页的手掌<br>用嘴唇绑结上纸手圈<br>今天也是一成不变的今天<br>下雨的话也能打电话<br>现在就这样朝你那边<br>(手圈不知不觉间断开了)<br>传递出我的温柔<br>(但不知为何总是难以开口)<br>好像真的脑袋短路了</p>
<p>只要从中选一<br>便会传出崩溃的声音<br>我说那就是爱<br>你却真的笑了<br>能赶上太好了<br>整条街默认不知道陷入沉睡<br>前往用被人遗忘的砖头<br>堆积而成的地方吧</p>
<p>攀上可以遥望大海的山坡<br>头上是蓝得可怕的天空<br>右手拿着汽水<br>而左手却一直在找寻你</p>
<p>就这样用这双紧密的手<br>拥抱着春日之风<br>时间仍然归属于我们<br>「总有一天，会把今天遗忘」什么的<br>希望你不要说出口</p>
<p>“现在”就这样<br>你也再没追问我什么<br>两个人依然停留在那里吧<br>「没错，弥补空白的语言」<br>不，还是先别说吧</p>
<p>翻开新一页的手掌<br>用嘴唇解开的手带<br>首班电车零散的幸福<br>呐，今天也是一成不变的日子呢</p>
<p>好像真的脑袋短路了</p>
<footer><strong>Galileo Galilei</strong><cite>青い栞</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=417613399&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实在是没什么说的。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
