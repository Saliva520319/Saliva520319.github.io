<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saliva&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-09-06T14:52:52.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Saliva</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>杂</title>
    <link href="http://yoursite.com/2016/09/06/something0/"/>
    <id>http://yoursite.com/2016/09/06/something0/</id>
    <published>2016-09-06T14:42:40.000Z</published>
    <updated>2016-09-06T14:52:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>知乎上看到的鲁迅的东西。</p>
<a id="more"></a>
<blockquote><p>我独自远行，不但没有你，并且再没有别的影在黑暗里。<br>只有我被黑暗吞没，那世界全属于我自己。</p>
<footer><strong>鲁迅</strong></footer></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知乎上看到的鲁迅的东西。&lt;/p&gt;
    
    </summary>
    
      <category term="无关紧要" scheme="http://yoursite.com/categories/%E6%97%A0%E5%85%B3%E7%B4%A7%E8%A6%81/"/>
    
    
      <category term="随想" scheme="http://yoursite.com/tags/%E9%9A%8F%E6%83%B3/"/>
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript复制</title>
    <link href="http://yoursite.com/2016/09/06/JavaScript0/"/>
    <id>http://yoursite.com/2016/09/06/JavaScript0/</id>
    <published>2016-09-06T07:53:50.000Z</published>
    <updated>2016-09-06T14:17:10.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="代码段"><a href="#代码段" class="headerlink" title="代码段"></a>代码段</h3><p>看到网上的JavaScript代码带一个复制的小按键，好奇就把相关的代码段整理了一下。</p>
<a id="more"></a>
<ol>
<li>复制文本框内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function jsCopy()&#123;</div><div class="line">        var e = document.getElementById('content');</div><div class="line">        e.select();</div><div class="line">        document.execCommand('Copy');</div><div class="line">        alert('已复制内容到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">'content'</span> <span class="attr">cols</span>=<span class="string">'50'</span> <span class="attr">rows</span>=<span class="string">'5'</span>&gt;</span></div><div class="line">Your fucking content.</div><div class="line"><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>复制网络地址 </li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>点击文本框复制内容</li>
</ol>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    function urlCopy()&#123;</div><div class="line">        var clipboardContent = this.location.href;</div><div class="line">        window.clipboardData.setData('Text',clipboardContent);</div><div class="line">        alert('已将网络地址复制到剪切板')</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onClick</span>=<span class="string">"jsCopy();"</span> <span class="attr">value</span>=<span class="string">"COPY URL"</span> /&gt;</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>代码段来源于互联网,作者1： <a href="http://my.csdn.net/jin367411763,&#39;作者的CSDN博客地址&#39;" target="_blank" rel="external"><em>jin367411763</em></a>，作者2: <a href="http://www.cnblogs.com/tylerdonet/,&#39;作者的cnblogs地址&#39;" target="_blank" rel="external"><em>Tyler’s Blog</em></a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;代码段&quot;&gt;&lt;a href=&quot;#代码段&quot; class=&quot;headerlink&quot; title=&quot;代码段&quot;&gt;&lt;/a&gt;代码段&lt;/h3&gt;&lt;p&gt;看到网上的JavaScript代码带一个复制的小按键，好奇就把相关的代码段整理了一下。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript代码段" scheme="http://yoursite.com/tags/JavaScript%E4%BB%A3%E7%A0%81%E6%AE%B5/"/>
    
  </entry>
  
  <entry>
    <title>优先队列的堆实现</title>
    <link href="http://yoursite.com/2016/09/06/PrioQueue1/"/>
    <id>http://yoursite.com/2016/09/06/PrioQueue1/</id>
    <published>2016-09-06T02:53:30.000Z</published>
    <updated>2016-09-06T07:09:05.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先队列的堆实现"><a href="#优先队列的堆实现" class="headerlink" title="优先队列的堆实现"></a>优先队列的堆实现</h2><hr>
<h3 id="堆及其性质"><a href="#堆及其性质" class="headerlink" title="堆及其性质"></a>堆及其性质</h3><ol>
<li>采用树形结构实现优先队列的一种有效技术成为 <strong>堆</strong>，节点数据的存储满足堆序。<ul>
<li>从根到任何一个叶节点，节点数据优先级递减</li>
<li>堆顶元素优先级最高，O(1)时间即可得到</li>
<li>位于不同路径上的元素，这里不关心其顺序</li>
</ul>
</li>
<li>几个重要性质<ul>
<li>在一个堆最后追加一个元素，依然是完全二叉树，但未必是堆</li>
<li>去掉堆顶，两个子堆上堆序不变</li>
<li>去掉堆顶的两个子堆加入根元素，未必是堆（堆序无法保证）</li>
<li>去掉堆中最后的元素，不破坏堆序</li>
</ul>
</li>
</ol>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueue</span><span class="params">()</span>:</span></div><div class="line">	<span class="string">'''</span></div><div class="line">	Implementing priority queues using heaps.</div><div class="line">	'''</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)</div><div class="line">		<span class="keyword">if</span> elist:</div><div class="line">			self.buildheap()</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in peek.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">0</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		self._elems.append(<span class="keyword">None</span>)</div><div class="line">		self.siftup(e,len(self._elems)<span class="number">-1</span>)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftup</span><span class="params">(self,e,last)</span>:</span></div><div class="line">		elems,i,j = self._elems,last,(last<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		<span class="keyword">while</span> i &gt; <span class="number">0</span> <span class="keyword">and</span> e &lt; elems[j]:</div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j,(j<span class="number">-1</span>)//<span class="number">2</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in dequeue.'</span>)</div><div class="line">		elems  = self._elems</div><div class="line">		e0 = elems[<span class="number">0</span>]</div><div class="line">		e = elems.pop()</div><div class="line">		<span class="keyword">if</span> len(elems) &gt; <span class="number">0</span>:</div><div class="line">			self.siftdown(e,<span class="number">0</span>,len(elems))</div><div class="line">		<span class="keyword">return</span> e0</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">siftdown</span><span class="params">(self,e,begin,end)</span>:</span></div><div class="line">		elems,i,j = self._elems,begin,begin*<span class="number">2</span>+<span class="number">1</span></div><div class="line">		<span class="keyword">while</span> j &lt; end:</div><div class="line">			<span class="keyword">if</span> j+<span class="number">1</span> &lt; end <span class="keyword">and</span> elems[j+<span class="number">1</span>] &lt; elems[j]:</div><div class="line">				j += <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> e &lt; elems[j]:</div><div class="line">				<span class="keyword">break</span></div><div class="line">			elems[i] = elems[j]</div><div class="line">			i,j = j, <span class="number">2</span>*j+<span class="number">1</span></div><div class="line">		elems[i] = e</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">buildheap</span><span class="params">(self)</span>:</span></div><div class="line">		end = len(self._elems)</div><div class="line">		<span class="keyword">for</span> i <span class="keyword">in</span> range(end//<span class="number">2</span>,<span class="number">-1</span>,<span class="number">-1</span>):</div><div class="line">			self.siftdown(self._elems[i],i,end)</div></pre></td></tr></table></figure>
<h3 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h3><table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>创建操作</td>
<td>O(n)</td>
</tr>
<tr>
<td>插入和弹出元素</td>
<td>O(log n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优先队列的堆实现&quot;&gt;&lt;a href=&quot;#优先队列的堆实现&quot; class=&quot;headerlink&quot; title=&quot;优先队列的堆实现&quot;&gt;&lt;/a&gt;优先队列的堆实现&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;堆及其性质&quot;&gt;&lt;a href=&quot;#堆及其性质&quot; class=&quot;headerlink&quot; title=&quot;堆及其性质&quot;&gt;&lt;/a&gt;堆及其性质&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;采用树形结构实现优先队列的一种有效技术成为 &lt;strong&gt;堆&lt;/strong&gt;，节点数据的存储满足堆序。&lt;ul&gt;
&lt;li&gt;从根到任何一个叶节点，节点数据优先级递减&lt;/li&gt;
&lt;li&gt;堆顶元素优先级最高，O(1)时间即可得到&lt;/li&gt;
&lt;li&gt;位于不同路径上的元素，这里不关心其顺序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;几个重要性质&lt;ul&gt;
&lt;li&gt;在一个堆最后追加一个元素，依然是完全二叉树，但未必是堆&lt;/li&gt;
&lt;li&gt;去掉堆顶，两个子堆上堆序不变&lt;/li&gt;
&lt;li&gt;去掉堆顶的两个子堆加入根元素，未必是堆（堆序无法保证）&lt;/li&gt;
&lt;li&gt;去掉堆中最后的元素，不破坏堆序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
      <category term="二叉树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
    
      <category term="堆" scheme="http://yoursite.com/tags/%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>优先队列的连续列表实现</title>
    <link href="http://yoursite.com/2016/09/06/PrioQueue0/"/>
    <id>http://yoursite.com/2016/09/06/PrioQueue0/</id>
    <published>2016-09-06T02:03:03.000Z</published>
    <updated>2016-09-06T07:10:34.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="优先队列的连续列表实现"><a href="#优先队列的连续列表实现" class="headerlink" title="优先队列的连续列表实现"></a>优先队列的连续列表实现</h2><hr>
<h3 id="两种实现方案"><a href="#两种实现方案" class="headerlink" title="两种实现方案"></a>两种实现方案</h3><ol>
<li>存储数据时保证元素的优先顺序，任何时候取元素都可以得到最高优先级（存入操作效率低，访问和弹出方便）</li>
<li>存入简单（顺序表存入表尾，链接表存入表头），取用时检索（存入效率高，访问弹出不便），如许多次访问统一元素但不弹出，则不采用此法，避免重复检索，或者记录要访问的元素位置。</li>
</ol>
<a id="more"></a>
<h3 id="代码（第一种方案）"><a href="#代码（第一种方案）" class="headerlink" title="代码（第一种方案）"></a>代码（第一种方案）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQueueError</span><span class="params">(ValueError)</span>:</span></div><div class="line">	<span class="keyword">pass</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PrioQue</span><span class="params">()</span>:</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,elist=[])</span>:</span></div><div class="line">		self._elems = list(elist)           <span class="comment">#使用list转换：对实参拷贝防止共享；实参可以是任一迭代对象</span></div><div class="line">		self._elems = sort(reversed=<span class="keyword">True</span>)	  <span class="comment">#设置为较小的优先级高</span></div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">enqueue</span><span class="params">(self,e)</span>:</span></div><div class="line">		i = len(self._elems) - <span class="number">1</span></div><div class="line">		<span class="keyword">while</span> i &gt;= <span class="number">0</span>:                       <span class="comment">#优先级相同的元素先进先出</span></div><div class="line">			<span class="keyword">if</span> self._elems[i] &lt;= e:</div><div class="line">				i -= <span class="number">1</span></div><div class="line">			<span class="keyword">else</span>:</div><div class="line">				<span class="keyword">break</span></div><div class="line">		self._elems.insert(i+<span class="number">1</span>,e)</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">is_empty</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">return</span> <span class="keyword">not</span> self._elems</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">peek</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'Already in top.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems[<span class="number">-1</span>]</div><div class="line">	<span class="function"><span class="keyword">def</span> <span class="title">dequeue</span><span class="params">(self)</span>:</span></div><div class="line">		<span class="keyword">if</span> self.is_empty():</div><div class="line">			<span class="keyword">raise</span> PrioQueueError(<span class="string">'No elem to pop.'</span>)</div><div class="line">		<span class="keyword">return</span> self._elems.pop()</div></pre></td></tr></table></figure>
<hr>
<h3 id="操作效率（复杂度）"><a href="#操作效率（复杂度）" class="headerlink" title="操作效率（复杂度）"></a>操作效率（复杂度）</h3><p><strong>方案1</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(n)</td>
</tr>
<tr>
<td>其他</td>
<td>O(1)</td>
</tr>
</tbody>
</table>
<p><strong>方案2</strong></p>
<table>
<thead>
<tr>
<th>操作</th>
<th>复杂度</th>
</tr>
</thead>
<tbody>
<tr>
<td>插入元素</td>
<td>O(1)，替换表存储空间需要O(n)时间</td>
</tr>
<tr>
<td>其他</td>
<td>O(n)</td>
</tr>
</tbody>
</table>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;优先队列的连续列表实现&quot;&gt;&lt;a href=&quot;#优先队列的连续列表实现&quot; class=&quot;headerlink&quot; title=&quot;优先队列的连续列表实现&quot;&gt;&lt;/a&gt;优先队列的连续列表实现&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;两种实现方案&quot;&gt;&lt;a href=&quot;#两种实现方案&quot; class=&quot;headerlink&quot; title=&quot;两种实现方案&quot;&gt;&lt;/a&gt;两种实现方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;存储数据时保证元素的优先顺序，任何时候取元素都可以得到最高优先级（存入操作效率低，访问和弹出方便）&lt;/li&gt;
&lt;li&gt;存入简单（顺序表存入表尾，链接表存入表头），取用时检索（存入效率高，访问弹出不便），如许多次访问统一元素但不弹出，则不采用此法，避免重复检索，或者记录要访问的元素位置。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>其他</title>
    <link href="http://yoursite.com/2016/09/05/meeting/"/>
    <id>http://yoursite.com/2016/09/05/meeting/</id>
    <published>2016-09-05T03:15:32.000Z</published>
    <updated>2016-09-06T13:52:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="了解点概念"><a href="#了解点概念" class="headerlink" title="了解点概念"></a>了解点概念</h2><hr>
<ul>
<li>DNS流量分发</li>
<li>容器调度:HP Ku8 Mannager</li>
<li>功能测试，性能测试</li>
<li>资源需求，项目时间节点</li>
<li>WEB应用层，能力服务器，数据库，高可用</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;了解点概念&quot;&gt;&lt;a href=&quot;#了解点概念&quot; class=&quot;headerlink&quot; title=&quot;了解点概念&quot;&gt;&lt;/a&gt;了解点概念&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;DNS流量分发&lt;/li&gt;
&lt;li&gt;容器调度:HP Ku8 Mannager&lt;/li&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="其他" scheme="http://yoursite.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="其他" scheme="http://yoursite.com/tags/%E5%85%B6%E4%BB%96/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="http://yoursite.com/2016/09/05/bagproblem/"/>
    <id>http://yoursite.com/2016/09/05/bagproblem/</id>
    <published>2016-09-05T03:12:15.000Z</published>
    <updated>2016-09-06T07:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的应用其二：背包问题"><a href="#栈的应用其二：背包问题" class="headerlink" title="栈的应用其二：背包问题"></a>栈的应用其二：背包问题</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><ol>
<li><code>kanp(weight,n)</code>表示n件物品的重量<ul>
<li>若不选最后一件物品(重量为W(n-1))，<code>kanp(weight,n-1)</code>的解即为<code>kanp(weight,n)</code>的解</li>
<li>若选择最后一件物品，若<code>kanp(weight-W(n-1),n-1)</code>有解，其解加上最后一件物品就是<code>kanp(weight,n)</code>的解，即前者有解后者也有解</li>
</ul>
</li>
<li><p>递归的考虑问题，n件物品的背包问题可归结为两个n-1件物品的背包问题：</p>
<ul>
<li>同样重量，物品数量减一</li>
<li>减少重量，物品数量减一<a id="more"></a>
</li>
</ul>
</li>
<li><p>几种最简单的情况</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>重量</th>
<th>解情况</th>
</tr>
</thead>
<tbody>
<tr>
<td>等于0</td>
<td>有解</td>
</tr>
<tr>
<td>小于0</td>
<td>无解</td>
</tr>
<tr>
<td>大于0且无物品可用</td>
<td>无解</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">knap_rec</span><span class="params">(weight,wlist,n)</span>:</span></div><div class="line">    <span class="keyword">if</span> weight == <span class="number">0</span>:</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> weight &lt; <span class="number">0</span> <span class="keyword">or</span> (weight &gt;<span class="number">1</span> <span class="keyword">and</span> n&lt;<span class="number">1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight - wlist[n<span class="number">-1</span>], wlist, n - <span class="number">1</span>):</div><div class="line">        <span class="keyword">print</span> <span class="string">'Item'</span> + str(n) + <span class="string">':'</span>,wlist[n - <span class="number">1</span>]</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">if</span> knap_rec(weight, wlist, n<span class="number">-1</span>):</div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">    <span class="keyword">else</span>:<span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">wlist = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,]</div><div class="line">n = len(wlist)</div><div class="line">weight = <span class="number">10</span></div><div class="line"></div><div class="line">knap_rec(weight,wlist,n)</div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的应用其二：背包问题&quot;&gt;&lt;a href=&quot;#栈的应用其二：背包问题&quot; class=&quot;headerlink&quot; title=&quot;栈的应用其二：背包问题&quot;&gt;&lt;/a&gt;栈的应用其二：背包问题&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;处理逻辑&quot;&gt;&lt;a href=&quot;#处理逻辑&quot; class=&quot;headerlink&quot; title=&quot;处理逻辑&quot;&gt;&lt;/a&gt;处理逻辑&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;kanp(weight,n)&lt;/code&gt;表示n件物品的重量&lt;ul&gt;
&lt;li&gt;若不选最后一件物品(重量为W(n-1))，&lt;code&gt;kanp(weight,n-1)&lt;/code&gt;的解即为&lt;code&gt;kanp(weight,n)&lt;/code&gt;的解&lt;/li&gt;
&lt;li&gt;若选择最后一件物品，若&lt;code&gt;kanp(weight-W(n-1),n-1)&lt;/code&gt;有解，其解加上最后一件物品就是&lt;code&gt;kanp(weight,n)&lt;/code&gt;的解，即前者有解后者也有解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;递归的考虑问题，n件物品的背包问题可归结为两个n-1件物品的背包问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;同样重量，物品数量减一&lt;/li&gt;
&lt;li&gt;减少重量，物品数量减一
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>简单的括号匹配</title>
    <link href="http://yoursite.com/2016/09/05/stack/"/>
    <id>http://yoursite.com/2016/09/05/stack/</id>
    <published>2016-09-05T00:44:51.000Z</published>
    <updated>2016-09-06T07:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="栈的应用其一：括号匹配"><a href="#栈的应用其一：括号匹配" class="headerlink" title="栈的应用其一：括号匹配"></a>栈的应用其一：括号匹配</h2><hr>
<h3 id="处理逻辑"><a href="#处理逻辑" class="headerlink" title="处理逻辑"></a>处理逻辑</h3><p>未考虑引号和注释中的括号情况</p>
<ul>
<li>顺序扫描正文字符串，跳过无关字符</li>
<li>遇到开括号<code>(,[,{</code>则入栈</li>
<li>遇到闭括号<code>),],}</code>则弹出栈顶元素与之匹配</li>
<li>匹配成功则继续，否则失败结束</li>
</ul>
<a id="more"></a>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">from</span> stack_ <span class="keyword">import</span> *</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkParens</span><span class="params">(text)</span>:</span></div><div class="line">    <span class="string">'''括号配对检查函数，text为被检查的正文串'''</span></div><div class="line">    parens = <span class="string">'()[]&#123;&#125;'</span></div><div class="line">    openParens = <span class="string">'([&#123;'</span></div><div class="line">    opposite = &#123;<span class="string">')'</span>:<span class="string">'('</span>,<span class="string">']'</span>:<span class="string">'['</span>,<span class="string">'&#125;'</span>:<span class="string">'&#123;'</span>&#125;        <span class="comment">#配对关系的字典</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parenstheses</span><span class="params">(text)</span>:</span></div><div class="line">        i,textLen = <span class="number">0</span>,len(text)</div><div class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</div><div class="line">            <span class="keyword">while</span> i &lt; textLen <span class="keyword">and</span> text[i] <span class="keyword">not</span> <span class="keyword">in</span> parens:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> i &gt;= textLen:</div><div class="line">                <span class="keyword">return</span></div><div class="line">            <span class="keyword">yield</span> text[i],i</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">    st = SStack()                       <span class="comment">#保存括号的栈</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> pr,i <span class="keyword">in</span> parenstheses(text):     <span class="comment">#对text里各括号和位置迭代</span></div><div class="line">        <span class="keyword">if</span> pr <span class="keyword">in</span> openParens:            <span class="comment">#开括号压栈</span></div><div class="line">            st.push(pr)</div><div class="line">        <span class="keyword">elif</span> st.pop() != opposite[pr]:  <span class="comment">#不匹配退出</span></div><div class="line">            <span class="keyword">print</span> <span class="string">'Unmatching is found at'</span>,i,<span class="string">'for'</span>,pr</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">pass</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'All parentheses are correctly matched.'</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<hr>
<ul>
<li>程序出自 《<strong>数据结构与算法Python语言描述</strong>》</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;栈的应用其一：括号匹配&quot;&gt;&lt;a href=&quot;#栈的应用其一：括号匹配&quot; class=&quot;headerlink&quot; title=&quot;栈的应用其一：括号匹配&quot;&gt;&lt;/a&gt;栈的应用其一：括号匹配&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;处理逻辑&quot;&gt;&lt;a href=&quot;#处理逻辑&quot; class=&quot;headerlink&quot; title=&quot;处理逻辑&quot;&gt;&lt;/a&gt;处理逻辑&lt;/h3&gt;&lt;p&gt;未考虑引号和注释中的括号情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;顺序扫描正文字符串，跳过无关字符&lt;/li&gt;
&lt;li&gt;遇到开括号&lt;code&gt;(,[,{&lt;/code&gt;则入栈&lt;/li&gt;
&lt;li&gt;遇到闭括号&lt;code&gt;),],}&lt;/code&gt;则弹出栈顶元素与之匹配&lt;/li&gt;
&lt;li&gt;匹配成功则继续，否则失败结束&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
