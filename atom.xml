<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Saliva&#39;s Home</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-12-27T12:59:54.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Saliva</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>莲花</title>
    <link href="http://yoursite.com/2016/12/27/song7/"/>
    <id>http://yoursite.com/2016/12/27/song7/</id>
    <published>2016-12-27T12:46:46.000Z</published>
    <updated>2016-12-27T12:59:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>好时光正在和你分享。<br>一种奇怪的味道。<br>组合粉碎了之后发展并不理想。<br>辨识度很高的嗓音，我非常喜欢，有点土，听起来感觉她像不会唱歌一样，但是听着就是很舒服。<br>与之相比，歌词是什么意味，到不重要了。</p>
<p>千万个人穿梭在我眼前，有点艾泽拉庞德的意思。</p>
<p><em>The apparition of these faces in the crowd;<br>Petals on a wet, black bough.</em><br><strong>人群中的脸忽隐忽现，湿漉漉的树干上花瓣点点。</strong></p>
<a id="more"></a>
<blockquote><p>千万颗星  飘向遥远天边<br>千万个人 穿梭在我的眼前<br>总不能说 感觉到了什么　什么<br>都不能说 我只有独自感觉<br>打开 莲花快打开<br>宝珠 就在它的里面<br>打开 莲花快打开<br>好时光正在和你分享<br>谁知道你要去向何方<br>好时光正在和你分享<br>到天亮你要去向何方<br>哦 这冲动 像花朵开向天空<br>没人能够体会 只有我看到那无限光辉<br>打开 莲花快打开<br>宝珠 就在它的里面<br>打开 莲花快打开<br>宝珠 你将要会看见<br>打开 莲花快打开<br>宝珠 你将要去发现<br>好时光正在和你分享<br>谁知道你要去向何方<br>好时光正在和你分享<br>到天亮你要去向何方</p>
<footer><strong>龙宽九段</strong><cite>莲花</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=363231&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好时光正在和你分享。&lt;br&gt;一种奇怪的味道。&lt;br&gt;组合粉碎了之后发展并不理想。&lt;br&gt;辨识度很高的嗓音，我非常喜欢，有点土，听起来感觉她像不会唱歌一样，但是听着就是很舒服。&lt;br&gt;与之相比，歌词是什么意味，到不重要了。&lt;/p&gt;
&lt;p&gt;千万个人穿梭在我眼前，有点艾泽拉庞德的意思。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;The apparition of these faces in the crowd;&lt;br&gt;Petals on a wet, black bough.&lt;/em&gt;&lt;br&gt;&lt;strong&gt;人群中的脸忽隐忽现，湿漉漉的树干上花瓣点点。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python魔术方法</title>
    <link href="http://yoursite.com/2016/12/26/magicmethod/"/>
    <id>http://yoursite.com/2016/12/26/magicmethod/</id>
    <published>2016-12-26T12:12:12.000Z</published>
    <updated>2016-12-26T12:14:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python生成器</title>
    <link href="http://yoursite.com/2016/12/26/generator/"/>
    <id>http://yoursite.com/2016/12/26/generator/</id>
    <published>2016-12-26T12:11:50.000Z</published>
    <updated>2016-12-26T12:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python上下文管理器</title>
    <link href="http://yoursite.com/2016/12/26/contextmanager/"/>
    <id>http://yoursite.com/2016/12/26/contextmanager/</id>
    <published>2016-12-26T06:39:15.000Z</published>
    <updated>2016-12-26T06:40:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器的使用2---类装饰器</title>
    <link href="http://yoursite.com/2016/12/26/decorator0/"/>
    <id>http://yoursite.com/2016/12/26/decorator0/</id>
    <published>2016-12-26T00:55:28.000Z</published>
    <updated>2016-12-26T08:28:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<p>装饰器接受一个可调用的对象（函数，类）作为参数，返回一个可调用的对象（函数，类），所即既可以装饰类返回类，也可以装饰函数返回类。<br>类装饰器可以与被装饰类的属性交互，修改类的方法(包括私有方法)等。</p>
<p>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> time</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sortable_by_creation_time</span><span class="params">(cls)</span>:</span></div><div class="line">  <span class="comment">#保留原始__init__方法，并追加_created属性</span></div><div class="line">  origin_init = cls.__init__</div><div class="line"><span class="meta">  @functools.wraps(origin_init)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">new_init</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    origin_init(self,*args,**kwargs)</div><div class="line">    <span class="comment">#仅设置该值没有用处，因为sort等函数无法识别。所以还要添加相应的方法</span></div><div class="line">    self._created = time.time()</div><div class="line">  cls.__init__ = new_init</div><div class="line">  <span class="comment">#添加小于和大于方法，如果cls本身已经拥有了__lt__和__gt__方法，则这两个方法</span></div><div class="line">  <span class="comment">#会被覆盖</span></div><div class="line">  cls.__lt__ = <span class="keyword">lambda</span> self,other:self._created &lt; other._created</div><div class="line">  cls.__gt__ = <span class="keyword">lambda</span> self,other:self._created &gt; other._created</div><div class="line">  <span class="keyword">return</span> cls</div><div class="line"><span class="comment">#有了__lt__和__gt__方法后，可以比较数值大小，也就可以被相关函数操作了。</span></div><div class="line"><span class="meta">@sortable_by_creation_time</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sortable</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,identifier)</span>:</span></div><div class="line">    self.identifier = identifier</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.identifier</div><div class="line">first = Sortable(<span class="string">'The first one.'</span>)</div><div class="line">second = Sortable(<span class="string">'The second one.'</span>)</div><div class="line">third = Sortable(<span class="string">'The third one.'</span>)</div><div class="line"><span class="comment">#开始是乱序</span></div><div class="line">sortables = [third,second,first]</div><div class="line"><span class="keyword">print</span> <span class="string">'Before =&gt; '</span>,sortables</div><div class="line"><span class="keyword">print</span></div><div class="line"><span class="comment">#排序后是升序</span></div><div class="line"><span class="keyword">print</span> <span class="string">'After =&gt; '</span>,sorted(sortables)</div></pre></td></tr></table></figure></p>
<p>上述装饰器的方法可以用mixin来实现，也很简单。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="comment">#定义mixin类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SortedByCreationTime</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self._created = time.time()</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self,other)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._created &lt; other._created</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self,other)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._created &gt; other._created</div><div class="line"><span class="comment">#使用多重继承为类添加方法</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sortable</span><span class="params">(SortedByCreationTime)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,identifier)</span>:</span></div><div class="line">    <span class="comment">#如果不添加这部分内容，私有属性将无法继承</span></div><div class="line">    <span class="comment">#SortedByCreationTime.__init__(self)</span></div><div class="line">    super(Sortable,self).__init__()</div><div class="line">    self.identifier = identifier</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.identifier</div><div class="line"><span class="comment">#测试</span></div><div class="line">first = Sortable(<span class="string">'The first one.'</span>)</div><div class="line">second = Sortable(<span class="string">'The second one.'</span>)</div><div class="line">third = Sortable(<span class="string">'The third one.'</span>)</div><div class="line">sortables = [third,second,first]</div><div class="line"><span class="keyword">print</span> <span class="string">'Before =&gt; '</span>,sortables</div><div class="line"><span class="keyword">print</span> dir(first)</div><div class="line"><span class="keyword">print</span> second &gt; third</div><div class="line"><span class="keyword">print</span> <span class="string">'After =&gt; '</span>,sorted(sortables)</div></pre></td></tr></table></figure></p>
<p>装饰器可以装饰一个函数，但是返回一个类，因为两者都是可调用的，并且可以将类理解为函数的更高层次。<br>类可以比函数定义更多内容。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'Subclasses must implement `run`.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'I am task .'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">TaskSubclass</span><span class="params">(Task)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="keyword">return</span> TaskSubclass</div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="number">4</span></div><div class="line">f = foo()</div><div class="line"><span class="keyword">print</span> f.run()</div><div class="line"><span class="comment">#调用变麻烦了</span></div><div class="line"><span class="keyword">print</span> foo().run()</div><div class="line"><span class="keyword">print</span> foo.identify()</div><div class="line"><span class="comment">#查看类型</span></div><div class="line"><span class="keyword">print</span> type(foo),type(foo())</div><div class="line"><span class="comment">#无法直接调用类，因为类中没有添加__call__方法</span></div><div class="line"><span class="keyword">print</span> foo()</div></pre></td></tr></table></figure>
<p>上述装饰器的改进版：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Task</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="comment">#追加了__call__方法，使得生成的类也可以直接调用，看起来更像函数了</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__call</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">return</span> self.run(*args,**kwargs)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">raise</span> NotImplementedError(<span class="string">'Subclasses must implement `run`.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">identify</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="string">'I am task .'</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">TaskSubclass</span><span class="params">(Task)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="comment">#返回的是调用，即类的实例</span></div><div class="line">  <span class="keyword">return</span> TaskSubclass()</div><div class="line"><span class="meta">@task</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> <span class="number">4</span></div><div class="line">f = foo()</div><div class="line"><span class="comment">#可以像函数一样直接调用了</span></div><div class="line"><span class="keyword">print</span> foo()</div><div class="line"><span class="keyword">print</span> foo.identify()</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python在Windows下编码错误</title>
    <link href="http://yoursite.com/2016/12/25/python0/"/>
    <id>http://yoursite.com/2016/12/25/python0/</id>
    <published>2016-12-25T02:35:58.000Z</published>
    <updated>2016-12-25T02:42:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>在Windows平台下，安装python模块时，报如下错误：<br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function">UnicodeDecodeError: '<span class="title">ascii</span>' <span class="title">codec</span> <span class="title">can</span>'<span class="title">t</span> <span class="title">decode</span> <span class="title">byte</span> 0<span class="title">xd7</span> <span class="title">in</span> <span class="title">position</span> 9: <span class="title">ordinal</span> <span class="title">not</span> <span class="title">in</span> <span class="title">range</span>(128)</span></div></pre></td></tr></table></figure></p>
<p>解决办法：<br>修改 <em>mimetypes.py</em> 文件，路径位于python的安装路径下的 <em>Lib\mimetypes.py</em> 文件。<br>在 <em>import</em> 下添加如下几行<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> sys.getdefaultencoding() != <span class="string">'gbk'</span>:</div><div class="line">    reload(sys)</div><div class="line">    sys.setdefaultencoding(<span class="string">'gbk'</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在Windows平台下，安装python模块时，报如下错误：&lt;br&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;t
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="问题" scheme="http://yoursite.com/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Longing</title>
    <link href="http://yoursite.com/2016/12/24/song6/"/>
    <id>http://yoursite.com/2016/12/24/song6/</id>
    <published>2016-12-24T13:44:43.000Z</published>
    <updated>2016-12-24T14:22:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>应该是翻译做渴望吧。<br>渴望的是什么呢？<br>今天是平安夜，明天是圣诞节，我在家里练练吉他，没什么起色，手疼得厉害。<br>我天生就是比较笨的，笨手笨脚，脑子也不灵光，有时候感觉自己都可笑，强忍着不笑出来，不然自己笑自己实在是太可怜了。唱也不行，跳也不行，就只能指弹了，手指，尤其是中指和无名指始终分不太开，不过手指的力气大了许多，小指也还好。有些事情着急不了，已然输在起跑线上了。羡慕那些从小就有很多资源的人，起码想玩什么，哪怕是3分钟热度也行，不用担心钱的问题。<br>晚上不知道她去做什么，想什么，和谁在一起。实在是毫无办法的事情。我也知道自己一无是处，但是喜欢一个人总归是没错的吧？只不过我每次照镜子，都感觉在她的眼里的我是这样一副丑陋皮囊，心里还是非常落寞的。每次说的什么，事后也觉得我自己好蠢，她会不会把我想成是个可恶的人呐？总归没有办法，没有办法。<br>我很久之前想过能挺开心得意地为面前的姑娘弹点曲子，轻轻松松的，就好像在用音乐表达情绪一样，寻找一种通性，看来是很难了。<br>孤独是在所难免的。</p>
<p>祝你快乐。哈哈哈反正你也不知道。</p>
<a id="more"></a>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=27588021&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;应该是翻译做渴望吧。&lt;br&gt;渴望的是什么呢？&lt;br&gt;今天是平安夜，明天是圣诞节，我在家里练练吉他，没什么起色，手疼得厉害。&lt;br&gt;我天生就是比较笨的，笨手笨脚，脑子也不灵光，有时候感觉自己都可笑，强忍着不笑出来，不然自己笑自己实在是太可怜了。唱也不行，跳也不行，就只能指弹了，手指，尤其是中指和无名指始终分不太开，不过手指的力气大了许多，小指也还好。有些事情着急不了，已然输在起跑线上了。羡慕那些从小就有很多资源的人，起码想玩什么，哪怕是3分钟热度也行，不用担心钱的问题。&lt;br&gt;晚上不知道她去做什么，想什么，和谁在一起。实在是毫无办法的事情。我也知道自己一无是处，但是喜欢一个人总归是没错的吧？只不过我每次照镜子，都感觉在她的眼里的我是这样一副丑陋皮囊，心里还是非常落寞的。每次说的什么，事后也觉得我自己好蠢，她会不会把我想成是个可恶的人呐？总归没有办法，没有办法。&lt;br&gt;我很久之前想过能挺开心得意地为面前的姑娘弹点曲子，轻轻松松的，就好像在用音乐表达情绪一样，寻找一种通性，看来是很难了。&lt;br&gt;孤独是在所难免的。&lt;/p&gt;
&lt;p&gt;祝你快乐。哈哈哈反正你也不知道。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python装饰器的使用</title>
    <link href="http://yoursite.com/2016/12/24/decorator/"/>
    <id>http://yoursite.com/2016/12/24/decorator/</id>
    <published>2016-12-24T03:05:14.000Z</published>
    <updated>2016-12-25T15:36:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。<br>代码部分经修改可以完整运行，方便理解和直接测试。</p>
<a id="more"></a>
<h2 id="理解语法"><a href="#理解语法" class="headerlink" title="理解语法"></a>理解语法</h2><p>添加文档说明<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#书写装饰器，为函数添加说明</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_by</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="comment">#在函数文档说明后添加指定字段</span></div><div class="line">    func.__doc__ += <span class="string">'\nDecorated by decorated_by.'</span></div><div class="line">    <span class="keyword">return</span> func</div><div class="line"><span class="comment">#书写函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="comment">#文档说明，通过.__doc__方法查看</span></div><div class="line">    <span class="string">'''I'm add...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="string">'''I'm add_...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#分别测试</span></div><div class="line"><span class="comment">#原始add</span></div><div class="line">help(add)</div><div class="line"><span class="comment">#添加了装饰器的add_</span></div><div class="line">help(add_)</div><div class="line"><span class="comment">#修改了名称为add0，分别查看add和add0</span></div><div class="line">add0 = decorated_by(add)</div><div class="line">help(add0)</div><div class="line">help(add)</div></pre></td></tr></table></figure></p>
<p>获取被装饰函数相关参数，详见<a href="https://docs.python.org/2/reference/datamodel.html" target="_blank" rel="external">Python官方文档</a>-Code objects<br>这部分内容我也不是很理解。可以边看文档边用ipython之类的工具配合查看理解。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#书写装饰器，为函数添加说明</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">decorated_by</span><span class="params">(func)</span>:</span></div><div class="line">    <span class="comment">#在函数文档说明后添加指定字段</span></div><div class="line">    <span class="keyword">print</span> <span class="string">'函数文档:'</span>,func.func_doc</div><div class="line">    <span class="keyword">print</span> <span class="string">'函数名称:'</span>,func.func_name</div><div class="line">    <span class="keyword">print</span> <span class="string">'参数个数'</span>,func.func_code.co_argcount</div><div class="line">    <span class="keyword">print</span> <span class="string">'函数code对象名称:'</span>,func.func_code.co_name</div><div class="line">    <span class="keyword">print</span> <span class="string">'code对象常量？'</span>,func.func_code.co_consts</div><div class="line">    <span class="keyword">print</span> <span class="string">'参数元组:'</span>,func.func_code.co_varnames</div><div class="line"><span class="comment">#书写函数</span></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="comment">#文档说明，通过.__doc__方法查看</span></div><div class="line">    <span class="string">'''I'm add...'''</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">add(<span class="number">4</span>,<span class="number">5</span>)</div></pre></td></tr></table></figure>
<p>装饰器应用的顺序，自下而上(因为函数的解析是自内而外的)<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="meta">@also_decorated_by</span></div><div class="line"><span class="meta">@decorated_by</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="string">"""Return the sum of x and y."""</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#上面的表达方式与下面相同</span></div><div class="line">add = also_decorated_by(decorated_by(add))</div></pre></td></tr></table></figure></p>
<h2 id="装饰器的使用"><a href="#装饰器的使用" class="headerlink" title="装饰器的使用"></a>装饰器的使用</h2><p>例如静态方法<code>@staticmethod</code>和类方法<code>@classmethod</code>，单元测试mock模块的<code>@mock.path</code>和<code>@mock.path.object</code>。Web框架Django的<code>@login_required</code>(用户必须登录才能查看特定页面)和<code>@permission_required</code>(权限限制),Flask的<code>@app.route</code>,Celery的<code>@task</code>等。<br>装饰器显示的对函数进行前置和收尾工作，减少了代码的重复，并且增加了可读性。它主要应用在以下几个地方（<strong>主要</strong> 说的可能有些草率）：</p>
<ul>
<li>在被装饰函数之前或之后追加功能，如合法性检查，权限验证，记录函数结果等</li>
<li>预处理函数的参数（如改变格式），处理函数的返回值（如格式化输出JSON或XML等），附加参数等</li>
<li>函数的注册</li>
</ul>
<h2 id="装饰器的编写"><a href="#装饰器的编写" class="headerlink" title="装饰器的编写"></a>装饰器的编写</h2><p>函数装饰器（这里说函数装饰器是因为还有类装饰器）通常接受一个callable函数作为参数，返回一个可调用函数（注意，返回的可能不是那个函数了呦）。<br>示例一：函数注册表<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line">registry = []</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(decorated)</span>:</span></div><div class="line">    <span class="comment">#注意列表添加的是函数对象，类型为fuction object</span></div><div class="line">    registry.append(decorated)</div><div class="line">    <span class="keyword">return</span> decorated</div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line"><span class="meta">@register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply</span><span class="params">(x,y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x * y</div><div class="line"><span class="comment">#确认列表里的对象是函数不是函数返回结果</span></div><div class="line"><span class="keyword">print</span> registry</div><div class="line"><span class="comment">#结果列表</span></div><div class="line">answers = []</div><div class="line"><span class="comment">#分别调用，批量执行注册表内的函数，并将结果追加到结果列表</span></div><div class="line"><span class="keyword">for</span> func <span class="keyword">in</span> registry:</div><div class="line">    answers.append(func(<span class="number">5</span>,<span class="number">3</span>))</div><div class="line"><span class="keyword">print</span> answers</div></pre></td></tr></table></figure></p>
<p>另一个例子：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Registry</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">      self._functions = []</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self,decorated)</span>:</span></div><div class="line">      self._functions.append(decorated)</div><div class="line">      <span class="keyword">return</span> decorated</div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run_all</span><span class="params">(self,*args,**kwargs)</span>:</span></div><div class="line">      return_values = []</div><div class="line">      <span class="keyword">for</span> func <span class="keyword">in</span> self._functions:</div><div class="line">        return_values.append(func(*args,**kwargs))</div><div class="line">      <span class="keyword">return</span> return_values</div><div class="line"><span class="comment">#人机分离！</span></div><div class="line">a = Registry()</div><div class="line">b = Registry()</div><div class="line"></div><div class="line"><span class="meta">@a.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x=<span class="number">3</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="meta">@b.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x=<span class="number">5</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="meta">@a.register</span></div><div class="line"><span class="meta">@b.register</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sa</span><span class="params">(x=<span class="number">7</span>)</span>:</span></div><div class="line">  <span class="keyword">return</span> x</div><div class="line"><span class="comment">#查看各自结果</span></div><div class="line"><span class="keyword">print</span> a.run_all()</div><div class="line"><span class="keyword">print</span> b.run_all()</div><div class="line"><span class="comment">#赋值</span></div><div class="line"><span class="keyword">print</span> a.run_all(<span class="number">4</span>)</div></pre></td></tr></table></figure></p>
<p>示例二：类型检查<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#装饰器检查函数参数是否为整形</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_ints</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">replace_of_func</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#获取字典方式传入的参数</span></div><div class="line">    kwarg_values = [i <span class="keyword">for</span> i <span class="keyword">in</span> kwargs.values()]</div><div class="line">    <span class="comment">#判断所有参数值是不是整数</span></div><div class="line">    <span class="keyword">for</span> arg <span class="keyword">in</span> list(args) + kwarg_values:</div><div class="line">      <span class="keyword">if</span> <span class="keyword">not</span> isinstance(arg,int):</div><div class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'%s only accepts intergers as arguments.'</span> % func.__name__)</div><div class="line">    <span class="comment">#参数没问题的话要返回func的计算值</span></div><div class="line">    <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">  <span class="comment">#原始函数func已经被替换了</span></div><div class="line">  <span class="keyword">return</span> replace_of_func</div><div class="line"><span class="meta">@requires_ints</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y)</span>:</span></div><div class="line">  <span class="keyword">return</span> x + y</div><div class="line"><span class="comment">#help命令已经暴露了，这个装饰器其实已经把原始func替换掉了，只不过是计算结果一致而已</span></div><div class="line">help(foo)</div><div class="line"><span class="comment">#查看错误输入和正确输入</span></div><div class="line"><span class="keyword">print</span> foo(<span class="number">1</span>,<span class="number">2</span>)</div><div class="line">foo(<span class="string">'1'</span>,<span class="string">'2'</span>)</div></pre></td></tr></table></figure></p>
<p>另一个例子，在上述代码的基础上,追加了<code>@functools.wraps(func)</code>,<code>help(foo)</code>返回结果则不同了，没有暴露出我们的狸猫换太子。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line">...</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_ints</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="comment">#functools.wraps(func)接受了一个参数即func，并保存了帮助和文档字符串等内容</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">replace_of_func</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    ...</div></pre></td></tr></table></figure>
<p>示例三：用户验证</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="comment">#区分普通用户和匿名用户，并用__nonzero__私有方法做标识（返回False）</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,username,email)</span>:</span></div><div class="line">    self.username = username</div><div class="line">    self.email = email</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnonymousUser</span><span class="params">(object)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">    self.username = <span class="keyword">None</span></div><div class="line">    self.email = <span class="keyword">None</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__nonzero__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">requires_user</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(user,*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#判断非零和用户类型</span></div><div class="line">    <span class="keyword">if</span> user <span class="keyword">and</span> isinstance(user,User):</div><div class="line">    <span class="comment">#原书这里写的是func(user,*args,**kwargs)，我认为应该是func(*args,**kwargs),</span></div><div class="line">    <span class="comment">#因为原始func只接受两个参数，并不包含user。</span></div><div class="line">      <span class="keyword">return</span> func(*args,**kwargs)</div><div class="line">    <span class="keyword">else</span>:</div><div class="line">      <span class="keyword">return</span> ValueError(<span class="string">'A valid user is required to run this.'</span>)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#创建函数，并用help(foo)发现函数已经增加了一个参数</span></div><div class="line"><span class="meta">@requires_user</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x,y)</span>:</span></div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">help(foo)</div><div class="line"><span class="comment">#创建类实例，来验证参数个数和异常</span></div><div class="line">usr1 = User(<span class="string">'name'</span>,<span class="string">'email'</span>)</div><div class="line"><span class="keyword">print</span> foo(usr1,<span class="number">7</span>,<span class="number">8</span>)</div><div class="line"><span class="keyword">print</span> foo(<span class="number">7</span>,<span class="number">8</span>)</div></pre></td></tr></table></figure>
<p>示例四：输出格式化</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(func)</span>:</span></div><div class="line">  <span class="comment">#序列化输出函数结果</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    result = func(*args,**kwargs)</div><div class="line">    <span class="keyword">return</span> json.dumps(result)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"><span class="comment">#测试</span></div><div class="line"><span class="keyword">print</span> do_nothing(),type(do_nothing())</div></pre></td></tr></table></figure>
<p>另一个例子:捕获特定异常并JSON输出<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="comment">#定义异常</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="keyword">try</span>:</div><div class="line">      result = func(*args,**kwargs)</div><div class="line">    <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">      result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">    <span class="keyword">return</span> json.dumps(result)</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#可以针对特定异常进行处理（本处为JSONOutputError）</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">error</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">raise</span> JSONOutputError(<span class="string">'This function is erratic.'</span>)</div><div class="line"><span class="comment">#打印输出</span></div><div class="line"><span class="keyword">print</span> error()</div><div class="line"><span class="comment">#查看其他类型异常</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">other_error</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">raise</span> ValueError(<span class="string">'What is this.'</span>)</div><div class="line"><span class="keyword">print</span> other_error()</div></pre></td></tr></table></figure></p>
<p>示例五：日志管理</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> logging</div><div class="line"><span class="keyword">import</span> time</div><div class="line"><span class="keyword">import</span> os</div><div class="line"></div><div class="line"><span class="comment">#配置默认日志输出目录和格式,日志位于/tmp/test.log</span></div><div class="line">logging.basicConfig(level=logging.DEBUG,</div><div class="line">                    format=<span class="string">'%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s'</span>,</div><div class="line">                    datefmt=<span class="string">'%a, %d %b %Y %H:%M:%S'</span>,</div><div class="line">                    filename=<span class="string">'/tmp/test.log'</span>,</div><div class="line">                    filemode=<span class="string">'w'</span>)</div><div class="line"><span class="comment">#定义装饰器函数</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">logged</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">  @functools.wraps(func)</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">    <span class="comment">#记录开始时间</span></div><div class="line">    start = time.time()</div><div class="line">    <span class="comment">#记录结果</span></div><div class="line">    return_value = func(*args,**kwargs)</div><div class="line">    <span class="comment">#记录结束时间并计算</span></div><div class="line">    end = time.time()</div><div class="line">    delta = end - start</div><div class="line">    <span class="comment">#使用默认的日志设置</span></div><div class="line">    logger = logging.getLogger()</div><div class="line">    logger.warn(<span class="string">'Called method %s at %.2f;execution time %.2f seconds;result %r.'</span> % (func.__name__,start,delta,return_value))</div><div class="line">    <span class="comment">#返回原始func的返回值</span></div><div class="line">    <span class="keyword">return</span> return_value</div><div class="line">  <span class="keyword">return</span> inner</div><div class="line"><span class="comment">#</span></div><div class="line"><span class="meta">@logged</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">sleep_and_return</span><span class="params">(return_value)</span>:</span></div><div class="line">  time.sleep(<span class="number">2</span>)</div><div class="line">  <span class="keyword">return</span> return_value</div><div class="line"><span class="comment">#查看输出</span></div><div class="line"><span class="keyword">print</span> sleep_and_return(<span class="number">10</span>)</div><div class="line">os.system(<span class="string">'cat /tmp/test.log'</span>)</div></pre></td></tr></table></figure>
<h2 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h2><p>废话少说，放码过来<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="comment">#添加参数的装饰器就是比普通的装饰器多了一层，外层负责接收参数，内层接收函数作为参数</span></div><div class="line"><span class="comment">#我的理解是，外层函数（这里是json_output）接收参数后，定向的返回了</span></div><div class="line"><span class="comment">#一个装饰器（这里是actual_decorator），这里定向是指针对所给的</span></div><div class="line"><span class="comment">#参数（indent=4）生成一个缩进4格的装饰器，然后actual_decorator就和普通装饰器</span></div><div class="line"><span class="comment">#做的工作一样，用另一个函数（这里是inner）去替代原始函数func，从而实现了带参数的效果</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(indent=None,sort_keys=False)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">actual_decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        result = func(*args,**kwargs)</div><div class="line">      <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">        result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">      <span class="keyword">return</span> json.dumps(result,indent=indent,sort_keys=sort_keys)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">  <span class="keyword">return</span> actual_decorator</div><div class="line"><span class="comment">#注意，此时应用装饰器时，没有参数也必须调用（即@json_output()）,前文说了，这里调用相当于生成了</span></div><div class="line"><span class="comment">#actual_decorator装饰器，否则@json_output会报错,附加参数的效果</span></div><div class="line"><span class="comment">#相当于 json_output(参数)(do_nothing)，即actual_decorator(do_nothing)</span></div><div class="line"><span class="meta">@json_output(indent=4)</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"></div><div class="line"><span class="keyword">print</span> do_nothing()，type(do_nothing())</div></pre></td></tr></table></figure></p>
<p>理想的装饰器应该是这样的：</p>
<ul>
<li><code>@json_output</code></li>
<li><code>@json_output()</code></li>
<li><code>@json_output(参数)</code><br>所以对上述代码作如下修改：</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/usr/bin/env python</span></div><div class="line"><span class="comment">#_*_ coding:utf-8 _*_</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> functools</div><div class="line"><span class="keyword">import</span> json</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSONOutputError</span><span class="params">(Exception)</span>:</span></div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></div><div class="line">    self._message = message</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="keyword">return</span> self._message</div><div class="line"><span class="comment">#前面都一样</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">json_output</span><span class="params">(decorated_=None,indent=None,sort_keys=False)</span>:</span></div><div class="line">  <span class="comment">#加了一层判断，不应该同时函数func和参数都给json_output,即json_output(func,indent,sort_keys)</span></div><div class="line">  <span class="keyword">if</span> decorated_ <span class="keyword">and</span> (indent <span class="keyword">or</span> sort_keys):</div><div class="line">    <span class="keyword">raise</span> RuntimeError(<span class="string">'Unexpected arguments.'</span>)</div><div class="line">  <span class="function"><span class="keyword">def</span> <span class="title">actual_decorator</span><span class="params">(func)</span>:</span></div><div class="line"><span class="meta">    @functools.wraps(func)</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></div><div class="line">      <span class="keyword">try</span>:</div><div class="line">        result = func(*args,**kwargs)</div><div class="line">      <span class="keyword">except</span> JSONOutputError <span class="keyword">as</span> ex:</div><div class="line">        result = &#123;<span class="string">'status'</span>:<span class="string">'error'</span>,<span class="string">'message'</span>:str(ex)&#125;</div><div class="line">      <span class="keyword">return</span> json.dumps(result,indent=indent,sort_keys=sort_keys)</div><div class="line">    <span class="keyword">return</span> inner</div><div class="line">  <span class="comment">#加了一层判断，获得的参数是函数（即直接@json_output,相当于json_output(func)），</span></div><div class="line">  <span class="comment">#是函数则直接返回内层装饰器inner，否则照常返回actual_decorator</span></div><div class="line">  <span class="keyword">if</span> decorated_:</div><div class="line">    <span class="keyword">return</span> actual_decorator(decorated_)</div><div class="line">  <span class="keyword">else</span>:</div><div class="line">    <span class="keyword">return</span> actual_decorator</div><div class="line"></div><div class="line"><span class="comment">#仅测试不带调用,注意@json_output无括号调用，相当于decorated_ = do_nothing</span></div><div class="line"><span class="meta">@json_output</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">do_nothing</span><span class="params">()</span>:</span></div><div class="line">  <span class="keyword">return</span> &#123;<span class="string">'name'</span>:<span class="string">'YangMingJun'</span>&#125;</div><div class="line"><span class="keyword">print</span> do_nothing()，type(do_nothing())</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;内容绝大部分出自《Python高级编程》，Luke Sneeringer，清华大学出版社，Python版本2.7。&lt;br&gt;代码部分经修改可以完整运行，方便理解和直接测试。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
      <category term="语法" scheme="http://yoursite.com/tags/%E8%AF%AD%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>图</title>
    <link href="http://yoursite.com/2016/10/10/Graph0/"/>
    <id>http://yoursite.com/2016/10/10/Graph0/</id>
    <published>2016-10-10T00:46:20.000Z</published>
    <updated>2016-10-10T02:18:25.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概念-amp-性质-amp-实现"><a href="#概念-amp-性质-amp-实现" class="headerlink" title="概念&amp;性质&amp;实现"></a>概念&amp;性质&amp;实现</h2><p>一个图是一个二元组<code>G=(V,E)</code>,其中：</p>
<ul>
<li>V是顶点集合，E是边集合， E ⊆ V × V</li>
<li><em>有向图</em>的边有方向，是顶点的有序对，<em>无向图</em>边无方向。（之后的 <em>有向边</em> 表示为尖括号，&lt; v<sub>i</sub>,v<sub>j</sub> &gt; 表示v<sub>i</sub>到v<sub>j</sub>的边，<em>无向边</em>用圆括号表示）</li>
<li>&lt; v<sub>i</sub>,v<sub>j</sub> &gt; ∈ E,v<sub>j</sub>为v<sub>i</sub>的邻接点(无向图的邻接点是双向的)，不考虑顶点到自身的边，无重复的边。</li>
<li>完全图：任意两顶点之间都有边（有向图<code>n×(n-1)</code>,无向图<code>n×(n-1)/2</code>）|E|≦|V|<sup>2</sup>,即|E|=O(|V|<sup>2</sup>)</li>
<li>度：一个顶点邻接边的条数，有向图有入度和出度,边数等于所有顶点度数和的一半（有向图要同时算入度和出度）</li>
<li>路径：沿着边（有向图边有方向）从一顶点v<sub>i</sub>到另一顶点v<sub>j</sub>的通路称为v<sub>i</sub>到v<sub>j</sub>的一条路径，长度为边的条数，环路指起点终点相同，若环路除了起点终点外都不同则称为<strong>简单回路</strong></li>
</ul>
<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概念-amp-性质-amp-实现&quot;&gt;&lt;a href=&quot;#概念-amp-性质-amp-实现&quot; class=&quot;headerlink&quot; title=&quot;概念&amp;amp;性质&amp;amp;实现&quot;&gt;&lt;/a&gt;概念&amp;amp;性质&amp;amp;实现&lt;/h2&gt;&lt;p&gt;一个图是一个二元组&lt;code&gt;G=(V,E)&lt;/code&gt;,其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;V是顶点集合，E是边集合， E ⊆ V × V&lt;/li&gt;
&lt;li&gt;&lt;em&gt;有向图&lt;/em&gt;的边有方向，是顶点的有序对，&lt;em&gt;无向图&lt;/em&gt;边无方向。（之后的 &lt;em&gt;有向边&lt;/em&gt; 表示为尖括号，&amp;lt; v&lt;sub&gt;i&lt;/sub&gt;,v&lt;sub&gt;j&lt;/sub&gt; &amp;gt; 表示v&lt;sub&gt;i&lt;/sub&gt;到v&lt;sub&gt;j&lt;/sub&gt;的边，&lt;em&gt;无向边&lt;/em&gt;用圆括号表示）&lt;/li&gt;
&lt;li&gt;&amp;lt; v&lt;sub&gt;i&lt;/sub&gt;,v&lt;sub&gt;j&lt;/sub&gt; &amp;gt; ∈ E,v&lt;sub&gt;j&lt;/sub&gt;为v&lt;sub&gt;i&lt;/sub&gt;的邻接点(无向图的邻接点是双向的)，不考虑顶点到自身的边，无重复的边。&lt;/li&gt;
&lt;li&gt;完全图：任意两顶点之间都有边（有向图&lt;code&gt;n×(n-1)&lt;/code&gt;,无向图&lt;code&gt;n×(n-1)/2&lt;/code&gt;）|E|≦|V|&lt;sup&gt;2&lt;/sup&gt;,即|E|=O(|V|&lt;sup&gt;2&lt;/sup&gt;)&lt;/li&gt;
&lt;li&gt;度：一个顶点邻接边的条数，有向图有入度和出度,边数等于所有顶点度数和的一半（有向图要同时算入度和出度）&lt;/li&gt;
&lt;li&gt;路径：沿着边（有向图边有方向）从一顶点v&lt;sub&gt;i&lt;/sub&gt;到另一顶点v&lt;sub&gt;j&lt;/sub&gt;的通路称为v&lt;sub&gt;i&lt;/sub&gt;到v&lt;sub&gt;j&lt;/sub&gt;的一条路径，长度为边的条数，环路指起点终点相同，若环路除了起点终点外都不同则称为&lt;strong&gt;简单回路&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="图" scheme="http://yoursite.com/tags/%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>SED命令</title>
    <link href="http://yoursite.com/2016/10/04/linux1/"/>
    <id>http://yoursite.com/2016/10/04/linux1/</id>
    <published>2016-10-04T02:12:25.000Z</published>
    <updated>2016-10-10T00:46:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed [-nefri] &apos;command&apos; input_file  #注意，是单引号</div></pre></td></tr></table></figure>
<h2 id="常用选项："><a href="#常用选项：" class="headerlink" title="常用选项："></a>常用选项：</h2><table>
<thead>
<tr>
<th>选项</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>-n</td>
<td>使用安静(silent)模式。在一般sed的用法中，所有来自STDIN的资料一般都会被列出到萤幕上。但如果加上该 参数后，则只有经过sed特殊处理的那一行(或者动作)才会被列出来。</td>
</tr>
<tr>
<td>-e</td>
<td>直接在指令列模式上进行 sed 的动作编辑</td>
</tr>
<tr>
<td>-f</td>
<td>直接将 sed 的动作写在一个档案内，-f filename 则可以执行filename内的sed动作</td>
</tr>
<tr>
<td>-r</td>
<td>sed的动作支援的是延伸型正则表示法的语法。</td>
</tr>
<tr>
<td>-i</td>
<td>直接修改读取的档案内容，而不是由萤幕输出。 </td>
</tr>
</tbody>
</table>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>新增，a的后面可以接字串，而这些字串会在新的一行出现(当前行的下一行)</td>
</tr>
<tr>
<td>c</td>
<td>取代，c的后面可以接字串，这些字串可以取代n1,n2之间的行</td>
</tr>
<tr>
<td>d</td>
<td>删除，d后面通常不接任何内容</td>
</tr>
<tr>
<td>i</td>
<td>插入，i的后面可以接字串，而这些字串会在新的一行出现(目前的上一行)</td>
</tr>
<tr>
<td>p</td>
<td>列印，亦即将某个选择的资料印出。通常p会与参数<code>-n</code>选项一起运作</td>
</tr>
<tr>
<td>s</td>
<td>取代，通常这个 s 的动作可以搭配正规表示法</td>
</tr>
</tbody>
</table>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>假设当前目录下要操作的文件名为test：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">删除</div><div class="line">$ sed &apos;15d&apos; test             #删除15行内容</div><div class="line">$ sed &apos;$d&apos; test              #删除最后一行</div><div class="line">$ sed &apos;1,2d&apos; test              #删除第一行到第二行，</div><div class="line">$ sed &apos;2,$d&apos; test              #删除第二行到最后一行</div><div class="line">$ sed &apos;/My/,10d&apos; datafile     #删除包含&quot;My&quot;的行到第10行</div><div class="line"></div><div class="line">显示</div><div class="line">$ sed -n &apos;1p&apos; test             #显示第一行</div><div class="line">$ sed -n &apos;$p&apos; test             #显示最后一行</div><div class="line">$ sed -n &apos;1,2p&apos; test           #显示第一行和第二行，包含关系，即[1,2]f非(1，2]</div><div class="line">$ sed -n &apos;2,$p&apos; test           #显示第二行到最后一行</div><div class="line">查询</div><div class="line">$ sed -n &apos;/root/p&apos; test        #查询包括关键字root所在所有行</div><div class="line">$ sed -n &apos;/\$/p&apos; test          #查询包括关键字$所在所有行，使用反斜线转义</div><div class="line">增加</div><div class="line">$ sed &apos;1a something&apos; test               #第一行后增加字符串something，注意前面有空格</div><div class="line">$ sed &apos;1,3a something&apos; test             #第一行到第三行每行后都增加字符串something</div><div class="line">$ sed &apos;1a something\nor anothor&apos; test   #使用换行符\n追加多行</div><div class="line">替代</div><div class="line">$ sed &apos;1c Hi&apos; test                #第一行代替为Hi</div><div class="line">$ sed &apos;1,2c Hi&apos; test              #第一行到第二行的内容用Hi替代，即两行的内容现为一行</div><div class="line">$ sed &apos;s/ruby/bird/g&apos; test          #替换ruby为bird，会替换所有</div><div class="line">插入</div><div class="line">$ sed -i &apos;1a bye&apos; test            #在文件test中第一行后插入直接输入&quot;bye&quot;，会写入文件</div><div class="line">$ sed -i &apos;/matched_string/d&apos;  test      #删除匹配行，也就是说/matched_string/匹配结果是一整行</div><div class="line">$ sed -i &apos;/matchedstring/s/source_string/changed_string/g&apos; test #替换匹配行字串</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;命令格式&quot;&gt;&lt;a href=&quot;#命令格式&quot; class=&quot;headerlink&quot; title=&quot;命令格式&quot;&gt;&lt;/a&gt;命令格式&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>反唱西游</title>
    <link href="http://yoursite.com/2016/10/03/song5/"/>
    <id>http://yoursite.com/2016/10/03/song5/</id>
    <published>2016-10-03T13:57:53.000Z</published>
    <updated>2016-12-24T13:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>我很喜欢这里面的乐器。<br>我小时候也是会吹箫和笛子的（羞耻），也是上过舞台的(学校文艺汇演的大场面，不过不是独奏)，不过没坚持住发展势头，现在反而越来越平庸了。干啥啥不行，（不只是钱）一点也不富有。我这矫情，老在自己的博客说这些东西，一点都不干。不过（说出来你可能不信，我这二指禅 <em>过</em> 字就打错了8次，可怜我还数了下）好在也没人关心，哈哈哈。<br>就在我感觉要<strong>__</strong>（此处缺少主语）没戏了的时候,在简书上看到一篇安利的文章，说什么老天爷总会在关键时刻把<strong>__</strong>一脚踹到你身边。同一天，喜欢的姑娘就跟我微信了（好吧，我承认，她可能就是八卦一下，或者喝假酒了）。尽管只是随便说了几句，并且大部分时间都是我在絮絮叨叨的，我还是高兴地像尿床没被抓一样。晚上健身的时候好像兄贵附体了。然而。有不过是空欢喜一场而已。<br>说好十一要把PPT好好整理一下，HTTP协议书也到了，TCP/IP也到了。结果DOTA比赛两天，焦虑。好在身还是贱。这么下去要一事无成啊。该学的要学啊。<br>不学不会不练，可怜可笑可恨。</p>
<a id="more"></a>
<blockquote><p>男：唐僧取经西天还<br>一番阴谋归长安<br>棋盘为地子为天<br>唯独这猴王本性难缠</p>
<p>女：山高自有客行路<br>水深自有渡人船<br>辱者定碌碌<br>荣者自安安</p>
<p>男：八戒沙僧做神仙<br>悟空被如来的小鞋穿<br>五行山下五百年<br>水深自有渡他的船</p>
<p>合：山高自有客行路<br>水深自有渡人船<br>辱者定碌碌<br>荣者自安安</p>
<p>男：悟空怒打天宫乱<br>灰心拜师菩提仙<br>求得菩提解惑端<br>归隐花果山<br>化一石头了尘缘<br>不会机谋巧算<br>没荣辱步步生白莲</p>
<footer><strong>游园惊梦乐队</strong><cite>反唱西游</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=29719520&auto=1&height=66"></iframe>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我很喜欢这里面的乐器。&lt;br&gt;我小时候也是会吹箫和笛子的（羞耻），也是上过舞台的(学校文艺汇演的大场面，不过不是独奏)，不过没坚持住发展势头，现在反而越来越平庸了。干啥啥不行，（不只是钱）一点也不富有。我这矫情，老在自己的博客说这些东西，一点都不干。不过（说出来你可能不信，我这二指禅 &lt;em&gt;过&lt;/em&gt; 字就打错了8次，可怜我还数了下）好在也没人关心，哈哈哈。&lt;br&gt;就在我感觉要&lt;strong&gt;__&lt;/strong&gt;（此处缺少主语）没戏了的时候,在简书上看到一篇安利的文章，说什么老天爷总会在关键时刻把&lt;strong&gt;__&lt;/strong&gt;一脚踹到你身边。同一天，喜欢的姑娘就跟我微信了（好吧，我承认，她可能就是八卦一下，或者喝假酒了）。尽管只是随便说了几句，并且大部分时间都是我在絮絮叨叨的，我还是高兴地像尿床没被抓一样。晚上健身的时候好像兄贵附体了。然而。有不过是空欢喜一场而已。&lt;br&gt;说好十一要把PPT好好整理一下，HTTP协议书也到了，TCP/IP也到了。结果DOTA比赛两天，焦虑。好在身还是贱。这么下去要一事无成啊。该学的要学啊。&lt;br&gt;不学不会不练，可怜可笑可恨。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Python 批量生成变量</title>
    <link href="http://yoursite.com/2016/09/22/python/"/>
    <id>http://yoursite.com/2016/09/22/python/</id>
    <published>2016-09-22T01:41:37.000Z</published>
    <updated>2016-10-03T14:13:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>基本思想就是利用<code>locals()</code>字典生成特定的变量,如列表，字典等。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p,i <span class="keyword">in</span> enumerate(range(<span class="number">1</span>,<span class="number">11</span>)):</div><div class="line">    locals()[<span class="string">'l%i'</span>%(p+<span class="number">1</span>)] = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    locals()[<span class="string">'list'</span>+str(i)] = []</div><div class="line">    </div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</div><div class="line">    a=<span class="string">'list%d=[]'</span>%i </div><div class="line"><span class="keyword">exec</span> a</div></pre></td></tr></table></figure>
<p>另小九九</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dict_ = &#123;&#125;</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">1</span>,<span class="number">10</span>):</div><div class="line">    dict_[i]=<span class="string">''</span></div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,i+<span class="number">1</span>):</div><div class="line">        tmp = str(j)+<span class="string">'*'</span>+str(i)+<span class="string">'='</span>+str(j*i)</div><div class="line">        dict_[i] = dict_[i]+<span class="string">' '</span>+tmp</div><div class="line">    <span class="keyword">print</span> dict_[i]</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基本思想就是利用&lt;code&gt;locals()&lt;/code&gt;字典生成特定的变量,如列表，字典等。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="基础" scheme="http://yoursite.com/tags/%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>那朵花</title>
    <link href="http://yoursite.com/2016/09/21/song4/"/>
    <id>http://yoursite.com/2016/09/21/song4/</id>
    <published>2016-09-21T12:54:28.000Z</published>
    <updated>2016-09-21T13:03:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>实在是没什么说的。</p>
<a id="more"></a>
<blockquote><p>费了好几页<br>终于写完我们的心情<br>却不知为何<br>弥补不了空白的一行<br>夹上花样书签<br>和你乘着用完就扔的自行车<br>堆起快被人遗忘的砖头<br>却突然倒塌了</p>
<p>那逐渐将人拖向对等的<br>蓝得可怕的天空<br>玩累了的我们<br>一定不会再想起<br>现在就这样朝我这边<br>一束束阳光倾注而来<br>两个人明明仍近在咫尺<br>而我却祈求「愿能再次相遇」<br>好像脑袋短路了</p>
<p>在翻开新一页的手掌<br>用嘴唇绑结上纸手圈<br>今天也是一成不变的今天<br>下雨的话也能打电话<br>现在就这样朝你那边<br>(手圈不知不觉间断开了)<br>传递出我的温柔<br>(但不知为何总是难以开口)<br>好像真的脑袋短路了</p>
<p>只要从中选一<br>便会传出崩溃的声音<br>我说那就是爱<br>你却真的笑了<br>能赶上太好了<br>整条街默认不知道陷入沉睡<br>前往用被人遗忘的砖头<br>堆积而成的地方吧</p>
<p>攀上可以遥望大海的山坡<br>头上是蓝得可怕的天空<br>右手拿着汽水<br>而左手却一直在找寻你</p>
<p>就这样用这双紧密的手<br>拥抱着春日之风<br>时间仍然归属于我们<br>「总有一天，会把今天遗忘」什么的<br>希望你不要说出口</p>
<p>“现在”就这样<br>你也再没追问我什么<br>两个人依然停留在那里吧<br>「没错，弥补空白的语言」<br>不，还是先别说吧</p>
<p>翻开新一页的手掌<br>用嘴唇解开的手带<br>首班电车零散的幸福<br>呐，今天也是一成不变的日子呢</p>
<p>好像真的脑袋短路了</p>
<footer><strong>Galileo Galilei</strong><cite>青い栞</cite></footer></blockquote>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="http://music.163.com/outchain/player?type=2&id=417613399&auto=1&height=66"></iframe>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;实在是没什么说的。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Django获取数据库模型相关</title>
    <link href="http://yoursite.com/2016/09/21/django1/"/>
    <id>http://yoursite.com/2016/09/21/django1/</id>
    <published>2016-09-21T07:54:58.000Z</published>
    <updated>2016-09-26T02:18:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.获取数据库模型字段<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">params = yourmodel._meta.fields</div><div class="line"></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(params)):</div><div class="line">    <span class="keyword">print</span> params[i],params[i].verbose_name</div></pre></td></tr></table></figure></p>
<p>2.获取数据库名称<br><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yourmodel._meta.object_name</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.获取数据库模型字段&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="栈和队列" scheme="http://yoursite.com/tags/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
    
      <category term="Django" scheme="http://yoursite.com/tags/Django/"/>
    
      <category term="WEB框架" scheme="http://yoursite.com/tags/WEB%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB备份策略和Backup服务简介</title>
    <link href="http://yoursite.com/2016/09/21/mongodb3/"/>
    <id>http://yoursite.com/2016/09/21/mongodb3/</id>
    <published>2016-09-21T02:02:23.000Z</published>
    <updated>2016-09-26T02:18:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="冗余-versus-备份"><a href="#冗余-versus-备份" class="headerlink" title="冗余 versus 备份"></a>冗余 versus 备份</h2><blockquote>
<p><strong>冗余 ！= 备份</strong></p>
</blockquote>
<table>
<thead>
<tr>
<th>冗余</th>
<th>备份</th>
</tr>
</thead>
<tbody>
<tr>
<td><ul><li>Replica Set</li><li>7*24可用</li><li>故障发生无需干预<ul><li>秒级自动failover</li><li>多数据中心部署</li></ul></li><li>系统升级维护对用户透明</li></ul></td>
<td><ul><li>灾难恢复</li><li>程序Bug损坏数据</li><li>人工误操作</li></ul></td>
</tr>
<tr>
<td>可以离线多少时间？</td>
<td>可以丢失多少数据？</td>
</tr>
</tbody>
</table>
<h2 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h2><h3 id="mongodump-mongorestore"><a href="#mongodump-mongorestore" class="headerlink" title="mongodump / mongorestore"></a>mongodump / mongorestore</h3><ul>
<li>导出BSON文件</li>
<li>可以选择备份Namespace</li>
<li>可以通过Oplog实现时间点恢复（Point-in-time）</li>
<li>缺点<ul>
<li>速度较慢</li>
<li>分片集群需同步</li>
</ul>
</li>
</ul>
<h3 id="文件系统备份"><a href="#文件系统备份" class="headerlink" title="文件系统备份"></a>文件系统备份</h3><ul>
<li>常见方式<ul>
<li>文件复制</li>
<li>文件系统或块存储快照，如LVM 或AWS EBS</li>
</ul>
</li>
<li>速度最快</li>
<li><p>缺点</p>
<ul>
<li>日志文件（journal）落盘</li>
<li>无法选择性备份</li>
<li>备份文件占用空间较大</li>
<li>分片同步问题</li>
</ul>
<h3 id="Backup服务"><a href="#Backup服务" class="headerlink" title="Backup服务"></a>Backup服务</h3><ul>
<li>MongoDB开发</li>
<li>操作简单</li>
<li>选择性备份</li>
<li>时间点恢复</li>
<li>缺点</li>
<li>无法备份Standalone mongod</li>
</ul>
</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>分片集群备份时的同步问题</li>
<li>若无法恢复，失去备份意义<ul>
<li>持续恢复？</li>
</ul>
</li>
</ul>
<h2 id="Backup服务-1"><a href="#Backup服务-1" class="headerlink" title="Backup服务"></a>Backup服务</h2><h3 id="Backup-amp-Restore系统"><a href="#Backup-amp-Restore系统" class="headerlink" title="Backup &amp; Restore系统"></a>Backup &amp; Restore系统</h3><p>是MongoDB云服务系统的主要组件之一，目标是降低备份难度（只需要安装agent）</p>
<table>
<thead>
<tr>
<th>类似Secondary</th>
<th>又不是Secondary</th>
</tr>
</thead>
<tbody>
<tr>
<td><ul><li>复制数据</li><li>更新数据，采用MongoDB Replication机制</li><li>Tail Oplog</li><li>回访Oplog</li><li>离线维护时不影响用户生产环境</li></ul></td>
<td><ul><li>不是Replica Set组成部分</li><li>不参与选举</li><li>不参与Write Concern</li><li>无状态，没有磁盘I/O</li></ul></td>
</tr>
</tbody>
</table>
<div align="center"><img src="/img/image1.png" alt="主要组件"></div>

<h4 id="Backup-Agent"><a href="#Backup-Agent" class="headerlink" title="Backup Agent"></a>Backup Agent</h4><ul>
<li>可执行文件，用GO语言编写</li>
<li>无状态，从Ingestion获得配置命令</li>
<li>发送InitialSync数据</li>
<li>传输Oplog流</li>
<li>对于Sharded Cluster快照，试图同步Shards和Config servers</li>
<li>序列化BSON，压缩，网络传输</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;冗余-versus-备份&quot;&gt;&lt;a href=&quot;#冗余-versus-备份&quot; class=&quot;headerlink&quot; title=&quot;冗余 versus 备份&quot;&gt;&lt;/a&gt;冗余 versus 备份&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;冗余 ！= 备份&lt;
    
    </summary>
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
      <category term="转载" scheme="http://yoursite.com/tags/%E8%BD%AC%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>xwlt模块</title>
    <link href="http://yoursite.com/2016/09/19/xwlt/"/>
    <id>http://yoursite.com/2016/09/19/xwlt/</id>
    <published>2016-09-19T05:43:27.000Z</published>
    <updated>2016-09-20T14:27:21.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xwlt"><a href="#xwlt" class="headerlink" title="xwlt"></a>xwlt</h2><blockquote>
<p>生成兼容MS Excel 97/2000/XP/2003 XLS的电子表格文件，Python2.6+均支持该模块，平台不限。无需任何Python自带库外的文件依赖。</p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install xwlt</div></pre></td></tr></table></figure>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> xlwt</div><div class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</div><div class="line"><span class="comment">#创建两种显示样式</span></div><div class="line">style0 = xlwt.easyxf(<span class="string">'font:name Times New Roman,color-index red,bold on'</span>,num_format_str=<span class="string">'#,##0.00'</span>)</div><div class="line">style1 = xlwt.easyxf(num_format_str=<span class="string">'D-MMM-YY'</span>)</div><div class="line"><span class="comment">#创建表格，表格名称（非文件名）</span></div><div class="line">wb = xlwt.Workbook()</div><div class="line">ws = wb.add_sheet(<span class="string">'A Test Sheet'</span>)</div><div class="line"><span class="comment">#表格里输入，选项依次为行，列，内容，样式（从0开始算起）</span></div><div class="line">ws.write(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1234.56</span>,style0)</div><div class="line">ws.write(<span class="number">1</span>,<span class="number">0</span>,datetime.now(),style1)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">0</span>,<span class="number">1</span>)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>)</div><div class="line">ws.write(<span class="number">2</span>,<span class="number">2</span>,xlwt.Formula(<span class="string">'A3+B3'</span>))</div><div class="line"><span class="comment">#此处保存为文件名称</span></div><div class="line">wb.save(<span class="string">'Example.xls'</span>)</div></pre></td></tr></table></figure>
<h2 id="API参考"><a href="#API参考" class="headerlink" title="API参考"></a>API参考</h2><hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">xlwt</span>.<span class="title">Workbook</span>.<span class="title">Workbook</span><span class="params">(encoding=<span class="string">'ascii'</span>,style_compression=<span class="number">0</span>)</span></span></div></pre></td></tr></table></figure>
<p>该类代表了工作簿的全部内容，使用<code>xlwt</code>模块创建一个Excel文件就是使用该类实例化一个对象。</p>
<ul>
<li><span style="color: blue;background-color: #eeeeee">add_sheet(sheetname,cell_overwrite_ok=False)</span></li>
</ul>
<p>该方法用于在工作簿中创建表格（可以理解为Excel文件当中的一个个Tab）。</p>
<blockquote>
<p>参数：</p>
<ul>
<li><code>sheetname</code>:表格Tab名称（通常显示在Excel程序底部）</li>
<li><code>cell_overwrite_ok</code>:如果设置为<code>True</code>，表格内容被写入超过一次时不会报错（exception）<br>返回值：Excel中将添加一个Tab</li>
</ul>
</blockquote>
<ul>
<li><span style="color: blue;background-color: #eeeeee">save(filename_or_stream)</span></li>
</ul>
<p>顾名思义就是保存成一个Excel文件喽。</p>
<blockquote>
<p>参数：<code>filename_or_stream</code>:要保存的文件名称字符串。参数也可以是拥有<code>write</code>方法的流对象（stream object），例如<code>StringIO</code>,此时数据将写入文件流中。</p>
</blockquote>
<hr>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">xlwt</span>.<span class="title">Worksheet</span>.<span class="title">Worksheet</span><span class="params">(sheetname,parent_book,cell_overwrite_ok=False)</span></span></div></pre></td></tr></table></figure>
<p>该类表示工作簿中的一个Tab表格。</p>
<blockquote>
<p>通常你是在实例化<code>Workbook</code>类时调用<code>add_sheet</code>方法创建该类的实例对象的。</p>
</blockquote>
<ul>
<li><span style="color: blue;background-color: #eeeeee">write(r,c,label=’’,style=[xlwt.XFStyle object])</span><br>该方法用于在表格的某个小格子写东西。</li>
</ul>
<blockquote>
<p>参数：</p>
<ul>
<li>r:行，从零开始</li>
<li>c:列，从零开始</li>
<li>label:写入的内容。简而言之，数都写成浮点数，Unicode对象保持原样，字节转化成Unicode对象，使用默认的ascii编码。时间类对象转化成距离1900年开始的天数。布尔对象显示为TRUE和FALSE,None将内容置空，xlwt.Formula用来创建Excel公式。</li>
<li>style:XF(扩展格式)，具体就是表格内容的表现形式（颜色等）</li>
</ul>
</blockquote>
<h2 id="扩展格式"><a href="#扩展格式" class="headerlink" title="扩展格式"></a>扩展格式</h2><p>扩展格式用来记录单元格的显示样式，主要包括六组：数字格式，字体，对齐（水平，垂直，居中，缩进，换行等），边界样式，背景，保护内容。</p>
<ul>
<li><span style="color: blue;background-color: #eeeeee">xlwt.Style.easyxf(strg_to_parse=’’,num_format_str=None,field_sep=’,’,line_sep=’;’,intro_sep=’:’,esc_char=’\\’,debug=False)</span></li>
</ul>
<p>该函数用处创建扩展格式对象（XFStyle）。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;xwlt&quot;&gt;&lt;a href=&quot;#xwlt&quot; class=&quot;headerlink&quot; title=&quot;xwlt&quot;&gt;&lt;/a&gt;xwlt&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;生成兼容MS Excel 97/2000/XP/2003 XLS的电子表格文件，Python2.6
    
    </summary>
    
      <category term="翻译" scheme="http://yoursite.com/categories/%E7%BF%BB%E8%AF%91/"/>
    
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>如何用十条命令在一分钟内检查Linux服务器性能</title>
    <link href="http://yoursite.com/2016/09/18/linux0/"/>
    <id>http://yoursite.com/2016/09/18/linux0/</id>
    <published>2016-09-18T13:43:40.000Z</published>
    <updated>2016-09-18T14:05:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>通过执行以下命令，可以在1分钟内对系统资源使用情况有个大致的了解。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">uptime</div><div class="line">dmesg | tail</div><div class="line">vmstat 1</div><div class="line">mpstat -P ALL 1</div><div class="line">pidstat 1</div><div class="line">iostat -xz 1</div><div class="line">free -m</div><div class="line">sar -n DEV 1</div><div class="line">sar -n TCP,ETCP 1</div><div class="line">top</div></pre></td></tr></table></figure></p>
<p>其中一些命令需要安装<code>sysstat</code>包，有一些由<code>procps</code>包提供。这些命令的输出，有助于快速定位性能瓶颈，检查出所有资源（CPU、内存、磁盘IO等）的利用率（<em>utilization</em>）、饱和度（<em>saturation</em>）和错误（<em>error</em>）度量，也就是所谓的USE方法。<br>下面我们来逐一介绍下这些命令，有关这些命令更多的参数和说明，请参照命令的手册。</p>
<hr>
<h2 id="uptime"><a href="#uptime" class="headerlink" title="uptime"></a>uptime</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ uptime</div><div class="line">23:51:26 up 21:31,  1 user,  load average: 30.02, 26.43, 19.02</div></pre></td></tr></table></figure>
<p>这个命令可以快速查看机器的负载情况。在Linux系统中，这些数据表示等待CPU资源的进程和阻塞在不可中断IO进程（进程状态为D）的数量。这些数据可以让我们对系统资源使用有一个宏观的了解。<br>命令的输出分别表示1分钟、5分钟、15分钟的平均负载情况。通过这三个数据，可以了解服务器负载是在趋于紧张还是区域缓解。如果1分钟平均负载很高，而15分钟平均负载很低，说明服务器正在命令高负载情况，需要进一步排查CPU资源都消耗在了哪里。反之，如果15分钟平均负载很高，1分钟平均负载较低，则有可能是CPU资源紧张时刻已经过去。<br>上面例子中的输出，可以看见最近1分钟的平均负载非常高，且远高于最近15分钟负载，因此我们需要继续排查当前系统中有什么进程消耗了大量的资源。可以通过下文将会介绍的vmstat、mpstat等命令进一步排查。</p>
<hr>
<h2 id="dmesg丨tail"><a href="#dmesg丨tail" class="headerlink" title="dmesg丨tail"></a>dmesg丨tail</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ dmesg | tail</div><div class="line">[1880957.563150] perl invoked oom-killer: gfp_mask=0x280da, order=0, oom_score_adj=0</div><div class="line">[...]</div><div class="line">[1880957.563400] Out of memory: Kill process 18694 (perl) score 246 or sacrifice child</div><div class="line">[1880957.563408] Killed process 18694 (perl) total-vm:1972392kB, anon-rss:1953348kB, file-rss:0kB</div><div class="line">[2320864.954447] TCP: Possible SYN flooding on port 7001. Dropping request.  Check SNMP counters.</div></pre></td></tr></table></figure>
<p>该命令会输出系统日志的最后10行。示例中的输出，可以看见一次内核的oom kill和一次TCP丢包。这些日志可以帮助排查性能问题。千万不要忘了这一步。</p>
<hr>
<h2 id="vmstat-1"><a href="#vmstat-1" class="headerlink" title="vmstat 1"></a>vmstat 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ vmstat 1</div><div class="line">procs ---------memory---------- ---swap-- -----io---- -system-- ------cpu-----</div><div class="line"> r  b swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</div><div class="line">34  0    0 200889792  73708 591828    0    0     0     5    6   10 96  1  3  0  0</div><div class="line">32  0    0 200889920  73708 591860    0    0     0   592 13284 4282 98  1  1  0  0</div><div class="line">32  0    0 200890112  73708 591860    0    0     0     0 9501 2154 99  1  0  0  0</div><div class="line">32  0    0 200889568  73712 591856    0    0     0    48 11900 2459 99  0  0  0  0</div><div class="line">32  0    0 200890208  73712 591860    0    0     0     0 15898 4840 98  1  1  0  0</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>vmstat(8) 命令，每行会输出一些系统核心指标，这些指标可以让我们更详细的了解系统状态。后面跟的参数1，表示每秒输出一次统计信息，表头提示了每一列的含义，这几介绍一些和性能调优相关的列：</p>
<ul>
<li>r：等待在CPU资源的进程数。这个数据比平均负载更加能够体现CPU负载情况，数据中不包含等待IO的进程。如果这个数值大于机器CPU核数，那么机器的CPU资源已经饱和。</li>
<li>free：系统可用内存数（以千字节为单位），如果剩余内存不足，也会导致系统性能问题。下文介绍到的free命令，可以更详细的了解系统内存的使用情况。</li>
<li>si, so：交换区写入和读取的数量。如果这个数据不为0，说明系统已经在使用交换区（swap），机器物理内存已经不足。</li>
<li>us, sy, id, wa, st：这些都代表了CPU时间的消耗，它们分别表示用户时间（user）、系统（内核）时间（sys）、空闲时间（idle）、IO等待时间（wait）和被偷走的时间（stolen，一般被其他虚拟机消耗）。<br>上述这些CPU时间，可以让我们很快了解CPU是否出于繁忙状态。一般情况下，如果用户时间和系统时间相加非常大，CPU出于忙于执行指令。如果IO等待时间很长，那么系统的瓶颈可能在磁盘IO。<br>示例命令的输出可以看见，大量CPU时间消耗在用户态，也就是用户应用程序消耗了CPU时间。这不一定是性能问题，需要结合r队列，一起分析。</li>
</ul>
<hr>
<h2 id="mpstat-P-ALL-1"><a href="#mpstat-P-ALL-1" class="headerlink" title="mpstat-P ALL 1"></a>mpstat-P ALL 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ mpstat -P ALL 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)</div><div class="line">07:38:49 PM  CPU   %usr  %nice   %sys %iowait   %irq  %soft  %steal  %guest  %gnice  %idle</div><div class="line">07:38:50 PM  all  98.47   0.00   0.75    0.00   0.00   0.00    0.00    0.00    0.00   0.78</div><div class="line">07:38:50 PM    0  96.04   0.00   2.97    0.00   0.00   0.00    0.00    0.00    0.00   0.99</div><div class="line">07:38:50 PM    1  97.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   2.00</div><div class="line">07:38:50 PM    2  98.00   0.00   1.00    0.00   0.00   0.00    0.00    0.00    0.00   1.00</div><div class="line">07:38:50 PM    3  96.97   0.00   0.00    0.00   0.00   0.00    0.00    0.00    0.00   3.03</div><div class="line">[...]</div></pre></td></tr></table></figure>
<p>该命令可以显示每个CPU的占用情况，如果有一个CPU占用率特别高，那么有可能是一个单线程应用程序引起的。</p>
<hr>
<h2 id="pidstat-1"><a href="#pidstat-1" class="headerlink" title="pidstat 1"></a>pidstat 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ pidstat 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)</div><div class="line">07:41:02 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line">07:41:03 PM     0         9    0.00    0.94    0.00    0.94     1  rcuos/0</div><div class="line">07:41:03 PM     0      4214    5.66    5.66    0.00   11.32    15  mesos-slave</div><div class="line">07:41:03 PM     0      4354    0.94    0.94    0.00    1.89     8  java</div><div class="line">07:41:03 PM     0      6521 1596.23    1.89    0.00 1598.11    27  java</div><div class="line">07:41:03 PM     0      6564 1571.70    7.55    0.00 1579.25    28  java</div><div class="line">07:41:03 PM 60004     60154    0.94    4.72    0.00    5.66     9  pidstat</div><div class="line">07:41:03 PM   UID       PID    %usr %system  %guest    %CPU   CPU  Command</div><div class="line">07:41:04 PM     0      4214    6.00    2.00    0.00    8.00    15  mesos-slave</div><div class="line">07:41:04 PM     0      6521 1590.00    1.00    0.00 1591.00    27  java07:41:04 PM     0      6564 1573.00   10.00    0.00 1583.00    28  java</div><div class="line">07:41:04 PM   108      6718    1.00    0.00    0.00    1.00     0  snmp-pass</div><div class="line">07:41:04 PM 60004     60154    1.00    4.00    0.00    5.00     9  pidstat</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>pidstat命令输出进程的CPU占用率，该命令会持续输出，并且不会覆盖之前的数据，可以方便观察系统动态。如上的输出，可以看见两个JAVA进程占用了将近1600%的CPU时间，既消耗了大约16个CPU核心的运算资源。</p>
<hr>
<h2 id="iostat-xz-1"><a href="#iostat-xz-1" class="headerlink" title="iostat-xz 1"></a>iostat-xz 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ iostat -xz 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015  _x86_64_ (32 CPU)</div><div class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</div><div class="line">          73.96    0.00    3.73    0.03    0.06   22.21</div><div class="line">Device:   rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %util</div><div class="line">xvda        0.00     0.23    0.21    0.18     4.52     2.08    34.37     0.00    9.98   13.80    5.42   2.44   0.09</div><div class="line">xvdb        0.01     0.00    1.02    8.94   127.97   598.53   145.79     0.00    0.43    1.78    0.28   0.25   0.25</div><div class="line">xvdc        0.01     0.00    1.02    8.86   127.79   595.94   146.50     0.00    0.45    1.82    0.30   0.27   0.26</div><div class="line">dm-0        0.00     0.00    0.69    2.32    10.47    31.69    28.01     0.01    3.23    0.71    3.98   0.13   0.04</div><div class="line">dm-1        0.00     0.00    0.00    0.94     0.01     3.78     8.00     0.33  345.84    0.04  346.81   0.01   0.00</div><div class="line">dm-2        0.00     0.00    0.09    0.07     1.35     0.36    22.50     0.00    2.55    0.23    5.62   1.78   0.03</div><div class="line">[...]</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>iostat命令主要用于查看机器磁盘IO情况。该命令输出的列，主要含义是：</p>
<ul>
<li>r/s, w/s, rkB/s, wkB/s：分别表示每秒读写次数和每秒读写数据量（千字节）。读写量过大，可能会引起性能问题。</li>
<li>await：IO操作的平均等待时间，单位是毫秒。这是应用程序在和磁盘交互时，需要消耗的时间，包括IO等待和实际操作的耗时。如果这个数值过大，可能是硬件设备遇到了瓶颈或者出现故障。</li>
<li>avgqu-sz：向设备发出的请求平均数量。如果这个数值大于1，可能是硬件设备已经饱和（部分前端硬件设备支持并行写入）。</li>
<li>%util：设备利用率。这个数值表示设备的繁忙程度，经验值是如果超过60，可能会影响IO性能（可以参照IO操作平均等待时间）。如果到达100%，说明硬件设备已经饱和。<br>如果显示的是逻辑设备的数据，那么设备利用率不代表后端实际的硬件设备已经饱和。值得注意的是，即使IO性能不理想，也不一定意味这应用程序性能会不好，可以利用诸如预读取、写缓存等策略提升应用性能。</li>
</ul>
<hr>
<h2 id="free-m"><a href="#free-m" class="headerlink" title="free -m"></a>free -m</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ free -m</div><div class="line">             total       used       free     shared    buffers     cached</div><div class="line">Mem:        245998      24545     221453         83         59        541</div><div class="line">-/+ buffers/cache:      23944     222053</div><div class="line">Swap:            0          0          0</div></pre></td></tr></table></figure>
<p>free命令可以查看系统内存的使用情况，-m参数表示按照兆字节展示。最后两列分别表示用于IO缓存的内存数，和用于文件系统页缓存的内存数。需要注意的是，第二行-/+ buffers/cache，看上去缓存占用了大量内存空间。这是Linux系统的内存使用策略，尽可能的利用内存，如果应用程序需要内存，这部分内存会立即被回收并分配给应用程序。因此，这部分内存一般也被当成是可用内存。<br>如果可用内存非常少，系统可能会动用交换区（如果配置了的话），这样会增加IO开销（可以在iostat命令中提现），降低系统性能。</p>
<hr>
<h2 id="sar-n-DEV-1"><a href="#sar-n-DEV-1" class="headerlink" title="sar -n DEV 1"></a>sar -n DEV 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sar -n DEV 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015     _x86_64_    (32 CPU)</div><div class="line">12:16:48 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</div><div class="line">12:16:49 AM      eth0  18763.00   5032.00  20686.42    478.30      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM        lo     14.00     14.00      1.36      1.36      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">12:16:49 AM     IFACE   rxpck/s   txpck/s    rxkB/s    txkB/s   rxcmp/s   txcmp/s  rxmcst/s   %ifutil</div><div class="line">12:16:50 AM      eth0  19763.00   5101.00  21999.10    482.56      0.00      0.00      0.00      0.00</div><div class="line">12:16:50 AM        lo     20.00     20.00      3.25      3.25      0.00      0.00      0.00      0.00</div><div class="line">12:16:50 AM   docker0      0.00      0.00      0.00      0.00      0.00      0.00      0.00      0.00</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>sar命令在这里可以查看网络设备的吞吐率。在排查性能问题时，可以通过网络设备的吞吐量，判断网络设备是否已经饱和。如示例输出中，eth0网卡设备，吞吐率大概在22 Mbytes/s，既176 Mbits/sec，没有达到1Gbit/sec的硬件上限。</p>
<hr>
<h2 id="sar-n-TCP-ETCP-1"><a href="#sar-n-TCP-ETCP-1" class="headerlink" title="sar -n TCP,ETCP 1"></a>sar -n TCP,ETCP 1</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ sar -n TCP,ETCP 1</div><div class="line">Linux 3.13.0-49-generic (titanclusters-xxxxx)  07/14/2015    _x86_64_    (32 CPU)</div><div class="line">12:17:19 AM  active/s passive/s    iseg/s    oseg/s</div><div class="line">12:17:20 AM      1.00      0.00  10233.00  18846.00</div><div class="line">12:17:19 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s</div><div class="line">12:17:20 AM      0.00      0.00      0.00      0.00      0.00</div><div class="line">12:17:20 AM  active/s passive/s    iseg/s    oseg/s</div><div class="line">12:17:21 AM      1.00      0.00   8359.00   6039.00</div><div class="line">12:17:20 AM  atmptf/s  estres/s retrans/s isegerr/s   orsts/s</div><div class="line">12:17:21 AM      0.00      0.00      0.00      0.00      0.00</div><div class="line">^C</div></pre></td></tr></table></figure>
<p>sar命令在这里用于查看TCP连接状态，其中包括：</p>
<ul>
<li>active/s：每秒本地发起的TCP连接数，既通过connect调用创建的TCP连接；</li>
<li>passive/s：每秒远程发起的TCP连接数，即通过accept调用创建的TCP连接；</li>
<li>retrans/s：每秒TCP重传数量；<br>TCP连接数可以用来判断性能问题是否由于建立了过多的连接，进一步可以判断是主动发起的连接，还是被动接受的连接。TCP重传可能是因为网络环境恶劣，或者服务器压力过大导致丢包。</li>
</ul>
<hr>
<h2 id="top"><a href="#top" class="headerlink" title="top"></a>top</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ top</div><div class="line">top - 00:15:40 up 21:56,  1 user,  load average: 31.09, 29.87, 29.92</div><div class="line">Tasks: 871 total,   1 running, 868 sleeping,   0 stopped,   2 zombie</div><div class="line">%Cpu(s): 96.8 us,  0.4 sy,  0.0 ni,  2.7 id,  0.1 wa,  0.0 hi,  0.0 si,  0.0 st</div><div class="line">KiB Mem:  25190241+total, 24921688 used, 22698073+free,    60448 buffers</div><div class="line">KiB Swap:        0 total,        0 used,        0 free.   554208 cached Mem</div><div class="line">   PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND</div><div class="line"> 20248 root      20   0  0.227t 0.012t  18748 S  3090  5.2  29812:58 java</div><div class="line">  4213 root      20   0 2722544  64640  44232 S  23.5  0.0 233:35.37 mesos-slave</div><div class="line"> 66128 titancl+  20   0   24344   2332   1172 R   1.0  0.0   0:00.07 top</div><div class="line">  5235 root      20   0 38.227g 547004  49996 S   0.7  0.2   2:02.74 java</div><div class="line">  4299 root      20   0 20.015g 2.682g  16836 S   0.3  1.1  33:14.42 java     1 root      20   0   33620   2920   1496 S   0.0  0.0   0:03.82 init</div><div class="line">     2 root      20   0       0      0      0 S   0.0  0.0   0:00.02 kthreadd</div><div class="line">     3 root      20   0       0      0      0 S   0.0  0.0   0:05.35 ksoftirqd/0</div><div class="line">     5 root       0 -20       0      0      0 S   0.0  0.0   0:00.00 kworker/0:0H</div><div class="line">     6 root      20   0       0      0      0 S   0.0  0.0   0:06.94 kworker/u256:0</div><div class="line">     8 root      20   0       0      0      0 S   0.0  0.0   2:38.05 rcu_sched</div></pre></td></tr></table></figure>
<p>top命令包含了前面好几个命令的检查的内容。比如系统负载情况（uptime）、系统内存使用情况（free）、系统CPU使用情况（vmstat）等。因此通过这个命令，可以相对全面的查看系统负载的来源。同时，top命令支持排序，可以按照不同的列排序，方便查找出诸如内存占用最多的进程、CPU占用率最高的进程等。<br>但是，top命令相对于前面一些命令，输出是一个瞬间值，如果不持续盯着，可能会错过一些线索。这时可能需要暂停top命令刷新，来记录和比对数据。</p>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>排查Linux服务器性能问题还有很多工具，上面介绍的一些命令，可以帮助我们快速的定位问题。例如前面的示例输出，多个证据证明有JAVA进程占用了大量CPU资源，之后的性能调优就可以针对应用程序进行。</p>
<hr>
<p>文章出自<a href="http://chuansong.me/n/2293468" target="_blank" rel="external">InfoQ</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;通过执行以下命令，可以在1分钟内对系统资源使用情况有个大致的了解。&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;
    
    </summary>
    
      <category term="转载" scheme="http://yoursite.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="操作系统" scheme="http://yoursite.com/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Song F</title>
    <link href="http://yoursite.com/2016/09/17/song3/"/>
    <id>http://yoursite.com/2016/09/17/song3/</id>
    <published>2016-09-17T13:46:05.000Z</published>
    <updated>2016-12-24T14:15:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>居然由于版权保护，无法生成外链。<br>达达的黄金时代，一整张专辑都很好，怎么说呢，就是年轻逼人。隔着耳机你都能感觉彭坦的喉结在随着歌曲，像一只没长毛的老鼠，在蠕动。<br>我这么比喻可能有点恶心，或者说有点GAY?毕竟一个一脸痘的粗犷老爷们听着唧唧歪歪的情歌，想像男主唱的喉结，是很奇怪的一件事。但是阳光这东西真的不是谁都有，真的，难以掩盖。歌曲鼓点响起来的时候，画面感很强，在青春的校园，男孩得意洋洋又故意扮酷的打着爵士鼓，仿佛司马相如和卓文君的凤求凰，下面是同样青春、阳光的的可爱的女孩子，阳光在她的脸上留下的是外放的情绪。你可以看得见，女孩穿的是运动鞋，不是那些个庸脂俗粉的各路妖魔鬼怪的也称之为鞋的东西；圆圆的脸蛋，不是那种审美疲劳的瓜子脸，白皙，干净，黑色镜框，头发整齐的扎在后面，阳光在侧面打过来，肉肉的脸蛋上的绒毛都一清二楚，饱满的嘴唇，干净简洁的衬衫，干净简洁的牛仔裤。这样一个午后，一个美好的，青春的校园爱情故事就要发生了，或者，已经发生了。<br>我大概学了学这歌，听起来就像我那只不争气的柯基在学狼叫，滑稽。粗糙。妈的好伤心。看来这辈子想唱点什么是没戏了。</p>
<a id="more"></a>
<blockquote><p>在那些黎明将至的山谷里<br>我急促的甚至奔跑起来<br>生命穿越过苏醒的花丛<br>让我带走这里躁动的希望<br>在那些炙热潮湿的喧嚣里<br>我急促的甚至奔跑起来<br>汗水渗透着城市的睡梦<br>让我带走这里火红的舞蹈<br>在那些插着稻草人的田野里<br>我急促的甚至奔跑起来<br>风吹拂金黄色的大地<br>让我带走这里成熟的消息<br>在那些雪花绽放的日子里<br>我急促的甚至奔跑起来<br>冰雪的花粉在脸上融化<br>让我带走这里所有的回忆<br>谁能够明白<br>爱又是什么<br>谁能告诉我<br>我该去哪里</p>
<p>在那些雪花绽放的日子里<br>我急促的甚至奔跑起来<br>冰雪的花粉在脸上融化<br>让我带走这里所有的回忆<br>在那些插着稻草人的田野里<br>我急促的甚至奔跑起来<br>风吹拂金黄色的大地<br>让我带走这里成熟的消息<br>在那些炙热潮湿的喧嚣里<br>我急促的甚至奔跑起来<br>汗水渗透着城市的睡梦<br>让我带走这里火红的舞蹈<br>在那些黎明将至的山谷里<br>我急促的甚至奔跑起来<br>生命穿越过苏醒的花丛<br>让我带走这里躁动的希望<br>你告诉我 爱就是森林<br>我向森林奔去<br>你告诉我 爱就是海湾<br>我向海湾骑行<br>你告诉我 爱就是云朵,<br>我向云朵飞翔<br>你告诉我 爱就在你心中<br>我轻轻吻你</p>
<p>让我带走 这里躁动的希望<br>让我带走 这里火红的舞蹈<br>让我带走 这里成熟的消息<br>让我带走 这里所有的回忆<br>Ah~</p>
<footer><strong>达达</strong><cite>Song F</cite></footer></blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;居然由于版权保护，无法生成外链。&lt;br&gt;达达的黄金时代，一整张专辑都很好，怎么说呢，就是年轻逼人。隔着耳机你都能感觉彭坦的喉结在随着歌曲，像一只没长毛的老鼠，在蠕动。&lt;br&gt;我这么比喻可能有点恶心，或者说有点GAY?毕竟一个一脸痘的粗犷老爷们听着唧唧歪歪的情歌，想像男主唱的喉结，是很奇怪的一件事。但是阳光这东西真的不是谁都有，真的，难以掩盖。歌曲鼓点响起来的时候，画面感很强，在青春的校园，男孩得意洋洋又故意扮酷的打着爵士鼓，仿佛司马相如和卓文君的凤求凰，下面是同样青春、阳光的的可爱的女孩子，阳光在她的脸上留下的是外放的情绪。你可以看得见，女孩穿的是运动鞋，不是那些个庸脂俗粉的各路妖魔鬼怪的也称之为鞋的东西；圆圆的脸蛋，不是那种审美疲劳的瓜子脸，白皙，干净，黑色镜框，头发整齐的扎在后面，阳光在侧面打过来，肉肉的脸蛋上的绒毛都一清二楚，饱满的嘴唇，干净简洁的衬衫，干净简洁的牛仔裤。这样一个午后，一个美好的，青春的校园爱情故事就要发生了，或者，已经发生了。&lt;br&gt;我大概学了学这歌，听起来就像我那只不争气的柯基在学狼叫，滑稽。粗糙。妈的好伤心。看来这辈子想唱点什么是没戏了。&lt;/p&gt;
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>Django</title>
    <link href="http://yoursite.com/2016/09/17/something4/"/>
    <id>http://yoursite.com/2016/09/17/something4/</id>
    <published>2016-09-17T13:10:24.000Z</published>
    <updated>2016-09-17T13:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<p> 中秋节，利用Django做一个数据库后台，数据库是现成的，结果由于建库不太规范，各种奇怪的问题，网络上一顿找资料。稀里糊涂的还是。无外乎建库的主键设置，元组的一些详细参数，防止MySQL出错column名称的选择，找来找去还是官方文档和stackoverflow比较靠谱些。妈的代码都用不了搞个毛线啊。什么时候编程就应该像搭积木一样，我什么需求，拼到一起来，不关心底层的实现。</p>
<p> 数据库的东西要接着看，接着整理资料。Django还是老老实实的把官方文档看的明白点。其实那些queryset什么东西的，国际化序列化都挺乱的。或者是我笨。数据结构和算法还是得继续敲。</p>
<p> 感觉时间不够用呢怎么。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 中秋节，利用Django做一个数据库后台，数据库是现成的，结果由于建库不太规范，各种奇怪的问题，网络上一顿找资料。稀里糊涂的还是。无外乎建库的主键设置，元组的一些详细参数，防止MySQL出错column名称的选择，找来找去还是官方文档和stackoverflow比较靠谱些
    
    </summary>
    
      <category term="Tips" scheme="http://yoursite.com/categories/Tips/"/>
    
    
      <category term="私人" scheme="http://yoursite.com/tags/%E7%A7%81%E4%BA%BA/"/>
    
      <category term="自欺欺人" scheme="http://yoursite.com/tags/%E8%87%AA%E6%AC%BA%E6%AC%BA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB-3</title>
    <link href="http://yoursite.com/2016/09/15/mongodb2/"/>
    <id>http://yoursite.com/2016/09/15/mongodb2/</id>
    <published>2016-09-15T13:07:01.000Z</published>
    <updated>2016-09-17T13:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MongoDB实战3"><a href="#MongoDB实战3" class="headerlink" title="MongoDB实战3"></a>MongoDB实战3</h2><hr>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MongoDB实战3&quot;&gt;&lt;a href=&quot;#MongoDB实战3&quot; class=&quot;headerlink&quot; title=&quot;MongoDB实战3&quot;&gt;&lt;/a&gt;MongoDB实战3&lt;/h2&gt;&lt;hr&gt;

    
    </summary>
    
      <category term="MongoDB" scheme="http://yoursite.com/categories/MongoDB/"/>
    
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="NoSQL" scheme="http://yoursite.com/tags/NoSQL/"/>
    
  </entry>
  
</feed>
